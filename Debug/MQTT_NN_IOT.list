
MQTT_NN_IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b170  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800b2f8  0800b2f8  0001b2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc38  0800bc38  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc40  0800bc40  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc40  0800bc40  0001bc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc44  0800bc44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800bc48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000208  0800be50  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800be50  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dced  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219a  00000000  00000000  0002df1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00030db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed9f  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e729  00000000  00000000  00050807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b575c  00000000  00000000  0005ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011468c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e24  00000000  00000000  001146dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000208 	.word	0x20000208
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b2e0 	.word	0x0800b2e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	0800b2e0 	.word	0x0800b2e0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c46:	2afd      	cmp	r2, #253	; 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	; 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	; 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	; 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__aeabi_f2uiz>:
 8000e94:	0042      	lsls	r2, r0, #1
 8000e96:	d20e      	bcs.n	8000eb6 <__aeabi_f2uiz+0x22>
 8000e98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e9c:	d30b      	bcc.n	8000eb6 <__aeabi_f2uiz+0x22>
 8000e9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ea2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ea6:	d409      	bmi.n	8000ebc <__aeabi_f2uiz+0x28>
 8000ea8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr
 8000ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_f2uiz+0x32>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d102      	bne.n	8000ecc <__aeabi_f2uiz+0x38>
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	4770      	bx	lr
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_uldivmod>:
 8000ed4:	b953      	cbnz	r3, 8000eec <__aeabi_uldivmod+0x18>
 8000ed6:	b94a      	cbnz	r2, 8000eec <__aeabi_uldivmod+0x18>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bf08      	it	eq
 8000edc:	2800      	cmpeq	r0, #0
 8000ede:	bf1c      	itt	ne
 8000ee0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee8:	f000 b9ae 	b.w	8001248 <__aeabi_idiv0>
 8000eec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef4:	f000 f83e 	bl	8000f74 <__udivmoddi4>
 8000ef8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_d2lz>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4605      	mov	r5, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4628      	mov	r0, r5
 8000f10:	4621      	mov	r1, r4
 8000f12:	f7ff fd99 	bl	8000a48 <__aeabi_dcmplt>
 8000f16:	b928      	cbnz	r0, 8000f24 <__aeabi_d2lz+0x20>
 8000f18:	4628      	mov	r0, r5
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f20:	f000 b80a 	b.w	8000f38 <__aeabi_d2ulz>
 8000f24:	4628      	mov	r0, r5
 8000f26:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f2a:	f000 f805 	bl	8000f38 <__aeabi_d2ulz>
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	bd38      	pop	{r3, r4, r5, pc}
 8000f36:	bf00      	nop

08000f38 <__aeabi_d2ulz>:
 8000f38:	b5d0      	push	{r4, r6, r7, lr}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <__aeabi_d2ulz+0x34>)
 8000f3e:	4606      	mov	r6, r0
 8000f40:	460f      	mov	r7, r1
 8000f42:	f7ff fb0f 	bl	8000564 <__aeabi_dmul>
 8000f46:	f7ff fde5 	bl	8000b14 <__aeabi_d2uiz>
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	f7ff fa90 	bl	8000470 <__aeabi_ui2d>
 8000f50:	2200      	movs	r2, #0
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <__aeabi_d2ulz+0x38>)
 8000f54:	f7ff fb06 	bl	8000564 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	4639      	mov	r1, r7
 8000f60:	f7ff f948 	bl	80001f4 <__aeabi_dsub>
 8000f64:	f7ff fdd6 	bl	8000b14 <__aeabi_d2uiz>
 8000f68:	4621      	mov	r1, r4
 8000f6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f6c:	3df00000 	.word	0x3df00000
 8000f70:	41f00000 	.word	0x41f00000

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9e08      	ldr	r6, [sp, #32]
 8000f7a:	460d      	mov	r5, r1
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4688      	mov	r8, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d14d      	bne.n	8001020 <__udivmoddi4+0xac>
 8000f84:	428a      	cmp	r2, r1
 8000f86:	4694      	mov	ip, r2
 8000f88:	d968      	bls.n	800105c <__udivmoddi4+0xe8>
 8000f8a:	fab2 f282 	clz	r2, r2
 8000f8e:	b152      	cbz	r2, 8000fa6 <__udivmoddi4+0x32>
 8000f90:	fa01 f302 	lsl.w	r3, r1, r2
 8000f94:	f1c2 0120 	rsb	r1, r2, #32
 8000f98:	fa20 f101 	lsr.w	r1, r0, r1
 8000f9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa0:	ea41 0803 	orr.w	r8, r1, r3
 8000fa4:	4094      	lsls	r4, r2
 8000fa6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000faa:	fbb8 f7f1 	udiv	r7, r8, r1
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	fb01 8817 	mls	r8, r1, r7, r8
 8000fb6:	fb07 f00e 	mul.w	r0, r7, lr
 8000fba:	0c23      	lsrs	r3, r4, #16
 8000fbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d90a      	bls.n	8000fda <__udivmoddi4+0x66>
 8000fc4:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fcc:	f080 811e 	bcs.w	800120c <__udivmoddi4+0x298>
 8000fd0:	4298      	cmp	r0, r3
 8000fd2:	f240 811b 	bls.w	800120c <__udivmoddi4+0x298>
 8000fd6:	3f02      	subs	r7, #2
 8000fd8:	4463      	add	r3, ip
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fe0:	fb01 3310 	mls	r3, r1, r0, r3
 8000fe4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ffa:	f080 8109 	bcs.w	8001210 <__udivmoddi4+0x29c>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f240 8106 	bls.w	8001210 <__udivmoddi4+0x29c>
 8001004:	4464      	add	r4, ip
 8001006:	3802      	subs	r0, #2
 8001008:	2100      	movs	r1, #0
 800100a:	eba4 040e 	sub.w	r4, r4, lr
 800100e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001012:	b11e      	cbz	r6, 800101c <__udivmoddi4+0xa8>
 8001014:	2300      	movs	r3, #0
 8001016:	40d4      	lsrs	r4, r2
 8001018:	e9c6 4300 	strd	r4, r3, [r6]
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	428b      	cmp	r3, r1
 8001022:	d908      	bls.n	8001036 <__udivmoddi4+0xc2>
 8001024:	2e00      	cmp	r6, #0
 8001026:	f000 80ee 	beq.w	8001206 <__udivmoddi4+0x292>
 800102a:	2100      	movs	r1, #0
 800102c:	e9c6 0500 	strd	r0, r5, [r6]
 8001030:	4608      	mov	r0, r1
 8001032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001036:	fab3 f183 	clz	r1, r3
 800103a:	2900      	cmp	r1, #0
 800103c:	d14a      	bne.n	80010d4 <__udivmoddi4+0x160>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d302      	bcc.n	8001048 <__udivmoddi4+0xd4>
 8001042:	4282      	cmp	r2, r0
 8001044:	f200 80fc 	bhi.w	8001240 <__udivmoddi4+0x2cc>
 8001048:	1a84      	subs	r4, r0, r2
 800104a:	eb65 0303 	sbc.w	r3, r5, r3
 800104e:	2001      	movs	r0, #1
 8001050:	4698      	mov	r8, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d0e2      	beq.n	800101c <__udivmoddi4+0xa8>
 8001056:	e9c6 4800 	strd	r4, r8, [r6]
 800105a:	e7df      	b.n	800101c <__udivmoddi4+0xa8>
 800105c:	b902      	cbnz	r2, 8001060 <__udivmoddi4+0xec>
 800105e:	deff      	udf	#255	; 0xff
 8001060:	fab2 f282 	clz	r2, r2
 8001064:	2a00      	cmp	r2, #0
 8001066:	f040 8091 	bne.w	800118c <__udivmoddi4+0x218>
 800106a:	eba1 000c 	sub.w	r0, r1, ip
 800106e:	2101      	movs	r1, #1
 8001070:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001074:	fa1f fe8c 	uxth.w	lr, ip
 8001078:	fbb0 f3f7 	udiv	r3, r0, r7
 800107c:	fb07 0013 	mls	r0, r7, r3, r0
 8001080:	0c25      	lsrs	r5, r4, #16
 8001082:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001086:	fb0e f003 	mul.w	r0, lr, r3
 800108a:	42a8      	cmp	r0, r5
 800108c:	d908      	bls.n	80010a0 <__udivmoddi4+0x12c>
 800108e:	eb1c 0505 	adds.w	r5, ip, r5
 8001092:	f103 38ff 	add.w	r8, r3, #4294967295
 8001096:	d202      	bcs.n	800109e <__udivmoddi4+0x12a>
 8001098:	42a8      	cmp	r0, r5
 800109a:	f200 80ce 	bhi.w	800123a <__udivmoddi4+0x2c6>
 800109e:	4643      	mov	r3, r8
 80010a0:	1a2d      	subs	r5, r5, r0
 80010a2:	fbb5 f0f7 	udiv	r0, r5, r7
 80010a6:	fb07 5510 	mls	r5, r7, r0, r5
 80010aa:	fb0e fe00 	mul.w	lr, lr, r0
 80010ae:	b2a4      	uxth	r4, r4
 80010b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010b4:	45a6      	cmp	lr, r4
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x156>
 80010b8:	eb1c 0404 	adds.w	r4, ip, r4
 80010bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80010c0:	d202      	bcs.n	80010c8 <__udivmoddi4+0x154>
 80010c2:	45a6      	cmp	lr, r4
 80010c4:	f200 80b6 	bhi.w	8001234 <__udivmoddi4+0x2c0>
 80010c8:	4628      	mov	r0, r5
 80010ca:	eba4 040e 	sub.w	r4, r4, lr
 80010ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010d2:	e79e      	b.n	8001012 <__udivmoddi4+0x9e>
 80010d4:	f1c1 0720 	rsb	r7, r1, #32
 80010d8:	408b      	lsls	r3, r1
 80010da:	fa22 fc07 	lsr.w	ip, r2, r7
 80010de:	ea4c 0c03 	orr.w	ip, ip, r3
 80010e2:	fa25 fa07 	lsr.w	sl, r5, r7
 80010e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010ea:	fbba f8f9 	udiv	r8, sl, r9
 80010ee:	fa20 f307 	lsr.w	r3, r0, r7
 80010f2:	fb09 aa18 	mls	sl, r9, r8, sl
 80010f6:	408d      	lsls	r5, r1
 80010f8:	fa1f fe8c 	uxth.w	lr, ip
 80010fc:	431d      	orrs	r5, r3
 80010fe:	fa00 f301 	lsl.w	r3, r0, r1
 8001102:	fb08 f00e 	mul.w	r0, r8, lr
 8001106:	0c2c      	lsrs	r4, r5, #16
 8001108:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800110c:	42a0      	cmp	r0, r4
 800110e:	fa02 f201 	lsl.w	r2, r2, r1
 8001112:	d90b      	bls.n	800112c <__udivmoddi4+0x1b8>
 8001114:	eb1c 0404 	adds.w	r4, ip, r4
 8001118:	f108 3aff 	add.w	sl, r8, #4294967295
 800111c:	f080 8088 	bcs.w	8001230 <__udivmoddi4+0x2bc>
 8001120:	42a0      	cmp	r0, r4
 8001122:	f240 8085 	bls.w	8001230 <__udivmoddi4+0x2bc>
 8001126:	f1a8 0802 	sub.w	r8, r8, #2
 800112a:	4464      	add	r4, ip
 800112c:	1a24      	subs	r4, r4, r0
 800112e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001132:	fb09 4410 	mls	r4, r9, r0, r4
 8001136:	fb00 fe0e 	mul.w	lr, r0, lr
 800113a:	b2ad      	uxth	r5, r5
 800113c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001140:	45a6      	cmp	lr, r4
 8001142:	d908      	bls.n	8001156 <__udivmoddi4+0x1e2>
 8001144:	eb1c 0404 	adds.w	r4, ip, r4
 8001148:	f100 35ff 	add.w	r5, r0, #4294967295
 800114c:	d26c      	bcs.n	8001228 <__udivmoddi4+0x2b4>
 800114e:	45a6      	cmp	lr, r4
 8001150:	d96a      	bls.n	8001228 <__udivmoddi4+0x2b4>
 8001152:	3802      	subs	r0, #2
 8001154:	4464      	add	r4, ip
 8001156:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800115a:	fba0 9502 	umull	r9, r5, r0, r2
 800115e:	eba4 040e 	sub.w	r4, r4, lr
 8001162:	42ac      	cmp	r4, r5
 8001164:	46c8      	mov	r8, r9
 8001166:	46ae      	mov	lr, r5
 8001168:	d356      	bcc.n	8001218 <__udivmoddi4+0x2a4>
 800116a:	d053      	beq.n	8001214 <__udivmoddi4+0x2a0>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d069      	beq.n	8001244 <__udivmoddi4+0x2d0>
 8001170:	ebb3 0208 	subs.w	r2, r3, r8
 8001174:	eb64 040e 	sbc.w	r4, r4, lr
 8001178:	fa22 f301 	lsr.w	r3, r2, r1
 800117c:	fa04 f707 	lsl.w	r7, r4, r7
 8001180:	431f      	orrs	r7, r3
 8001182:	40cc      	lsrs	r4, r1
 8001184:	e9c6 7400 	strd	r7, r4, [r6]
 8001188:	2100      	movs	r1, #0
 800118a:	e747      	b.n	800101c <__udivmoddi4+0xa8>
 800118c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa25 f301 	lsr.w	r3, r5, r1
 8001198:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800119c:	fa20 f101 	lsr.w	r1, r0, r1
 80011a0:	4095      	lsls	r5, r2
 80011a2:	430d      	orrs	r5, r1
 80011a4:	fbb3 f1f7 	udiv	r1, r3, r7
 80011a8:	fb07 3311 	mls	r3, r7, r1, r3
 80011ac:	fa1f fe8c 	uxth.w	lr, ip
 80011b0:	0c28      	lsrs	r0, r5, #16
 80011b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011b6:	fb01 f30e 	mul.w	r3, r1, lr
 80011ba:	4283      	cmp	r3, r0
 80011bc:	fa04 f402 	lsl.w	r4, r4, r2
 80011c0:	d908      	bls.n	80011d4 <__udivmoddi4+0x260>
 80011c2:	eb1c 0000 	adds.w	r0, ip, r0
 80011c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80011ca:	d22f      	bcs.n	800122c <__udivmoddi4+0x2b8>
 80011cc:	4283      	cmp	r3, r0
 80011ce:	d92d      	bls.n	800122c <__udivmoddi4+0x2b8>
 80011d0:	3902      	subs	r1, #2
 80011d2:	4460      	add	r0, ip
 80011d4:	1ac0      	subs	r0, r0, r3
 80011d6:	fbb0 f3f7 	udiv	r3, r0, r7
 80011da:	fb07 0013 	mls	r0, r7, r3, r0
 80011de:	b2ad      	uxth	r5, r5
 80011e0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e4:	fb03 f00e 	mul.w	r0, r3, lr
 80011e8:	42a8      	cmp	r0, r5
 80011ea:	d908      	bls.n	80011fe <__udivmoddi4+0x28a>
 80011ec:	eb1c 0505 	adds.w	r5, ip, r5
 80011f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f4:	d216      	bcs.n	8001224 <__udivmoddi4+0x2b0>
 80011f6:	42a8      	cmp	r0, r5
 80011f8:	d914      	bls.n	8001224 <__udivmoddi4+0x2b0>
 80011fa:	3b02      	subs	r3, #2
 80011fc:	4465      	add	r5, ip
 80011fe:	1a28      	subs	r0, r5, r0
 8001200:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001204:	e738      	b.n	8001078 <__udivmoddi4+0x104>
 8001206:	4631      	mov	r1, r6
 8001208:	4630      	mov	r0, r6
 800120a:	e707      	b.n	800101c <__udivmoddi4+0xa8>
 800120c:	462f      	mov	r7, r5
 800120e:	e6e4      	b.n	8000fda <__udivmoddi4+0x66>
 8001210:	4618      	mov	r0, r3
 8001212:	e6f9      	b.n	8001008 <__udivmoddi4+0x94>
 8001214:	454b      	cmp	r3, r9
 8001216:	d2a9      	bcs.n	800116c <__udivmoddi4+0x1f8>
 8001218:	ebb9 0802 	subs.w	r8, r9, r2
 800121c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001220:	3801      	subs	r0, #1
 8001222:	e7a3      	b.n	800116c <__udivmoddi4+0x1f8>
 8001224:	4643      	mov	r3, r8
 8001226:	e7ea      	b.n	80011fe <__udivmoddi4+0x28a>
 8001228:	4628      	mov	r0, r5
 800122a:	e794      	b.n	8001156 <__udivmoddi4+0x1e2>
 800122c:	4641      	mov	r1, r8
 800122e:	e7d1      	b.n	80011d4 <__udivmoddi4+0x260>
 8001230:	46d0      	mov	r8, sl
 8001232:	e77b      	b.n	800112c <__udivmoddi4+0x1b8>
 8001234:	4464      	add	r4, ip
 8001236:	3802      	subs	r0, #2
 8001238:	e747      	b.n	80010ca <__udivmoddi4+0x156>
 800123a:	3b02      	subs	r3, #2
 800123c:	4465      	add	r5, ip
 800123e:	e72f      	b.n	80010a0 <__udivmoddi4+0x12c>
 8001240:	4608      	mov	r0, r1
 8001242:	e706      	b.n	8001052 <__udivmoddi4+0xde>
 8001244:	4631      	mov	r1, r6
 8001246:	e6e9      	b.n	800101c <__udivmoddi4+0xa8>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <case_insensitive_strcmp+0x16>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001262:	2301      	movs	r3, #1
 8001264:	e056      	b.n	8001314 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d10d      	bne.n	800128a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800126e:	2300      	movs	r3, #0
 8001270:	e050      	b.n	8001314 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800127a:	2300      	movs	r3, #0
 800127c:	e04a      	b.n	8001314 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3301      	adds	r3, #1
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <case_insensitive_strcmp+0xd4>)
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d103      	bne.n	80012aa <case_insensitive_strcmp+0x5e>
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f103 0220 	add.w	r2, r3, #32
 80012a8:	e000      	b.n	80012ac <case_insensitive_strcmp+0x60>
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	73bb      	strb	r3, [r7, #14]
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	3301      	adds	r3, #1
 80012b6:	491a      	ldr	r1, [pc, #104]	; (8001320 <case_insensitive_strcmp+0xd4>)
 80012b8:	440b      	add	r3, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <case_insensitive_strcmp+0x7e>
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	3320      	adds	r3, #32
 80012c8:	e000      	b.n	80012cc <case_insensitive_strcmp+0x80>
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d0d0      	beq.n	8001272 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	737b      	strb	r3, [r7, #13]
 80012d6:	7b7b      	ldrb	r3, [r7, #13]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <case_insensitive_strcmp+0xd4>)
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d103      	bne.n	80012f0 <case_insensitive_strcmp+0xa4>
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	f103 0220 	add.w	r2, r3, #32
 80012ee:	e000      	b.n	80012f2 <case_insensitive_strcmp+0xa6>
 80012f0:	7b7a      	ldrb	r2, [r7, #13]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	733b      	strb	r3, [r7, #12]
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4908      	ldr	r1, [pc, #32]	; (8001320 <case_insensitive_strcmp+0xd4>)
 80012fe:	440b      	add	r3, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <case_insensitive_strcmp+0xc4>
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	3320      	adds	r3, #32
 800130e:	e000      	b.n	8001312 <case_insensitive_strcmp+0xc6>
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	0800b6d8 	.word	0x0800b6d8

08001324 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2028      	movs	r0, #40	; 0x28
 8001332:	4798      	blx	r3
 8001334:	60f8      	str	r0, [r7, #12]
    if (node)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800133c:	2228      	movs	r2, #40	; 0x28
 800133e:	2100      	movs	r1, #0
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f005 fc1b 	bl	8006b7c <memset>
    }

    return node;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800135c:	e037      	b.n	80013ce <cJSON_Delete+0x7e>
    {
        next = item->next;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d108      	bne.n	8001382 <cJSON_Delete+0x32>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffe7 	bl	8001350 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <cJSON_Delete+0x52>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <cJSON_Delete+0x90>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6912      	ldr	r2, [r2, #16]
 800139e:	4610      	mov	r0, r2
 80013a0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <cJSON_Delete+0x72>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <cJSON_Delete+0x90>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6a12      	ldr	r2, [r2, #32]
 80013be:	4610      	mov	r0, r2
 80013c0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <cJSON_Delete+0x90>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
        item = next;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1c4      	bne.n	800135e <cJSON_Delete+0xe>
    }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000

080013e4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80013e8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	0000      	movs	r0, r0
 80013f4:	0000      	movs	r0, r0
	...

080013f8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b098      	sub	sp, #96	; 0x60
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001412:	f7ff ffe7 	bl	80013e4 <get_decimal_point>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <parse_number+0x36>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <parse_number+0x3a>
    {
        return false;
 800142e:	2300      	movs	r3, #0
 8001430:	e0c6      	b.n	80015c0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001432:	2300      	movs	r3, #0
 8001434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001436:	e063      	b.n	8001500 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6899      	ldr	r1, [r3, #8]
 8001440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001442:	440b      	add	r3, r1
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b45      	cmp	r3, #69	; 0x45
 800144a:	dc3d      	bgt.n	80014c8 <parse_number+0xd0>
 800144c:	2b2b      	cmp	r3, #43	; 0x2b
 800144e:	db66      	blt.n	800151e <parse_number+0x126>
 8001450:	3b2b      	subs	r3, #43	; 0x2b
 8001452:	2b1a      	cmp	r3, #26
 8001454:	d863      	bhi.n	800151e <parse_number+0x126>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <parse_number+0x64>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	080014cd 	.word	0x080014cd
 8001460:	0800151f 	.word	0x0800151f
 8001464:	080014cd 	.word	0x080014cd
 8001468:	080014eb 	.word	0x080014eb
 800146c:	0800151f 	.word	0x0800151f
 8001470:	080014cd 	.word	0x080014cd
 8001474:	080014cd 	.word	0x080014cd
 8001478:	080014cd 	.word	0x080014cd
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014cd 	.word	0x080014cd
 8001484:	080014cd 	.word	0x080014cd
 8001488:	080014cd 	.word	0x080014cd
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014cd 	.word	0x080014cd
 8001494:	080014cd 	.word	0x080014cd
 8001498:	0800151f 	.word	0x0800151f
 800149c:	0800151f 	.word	0x0800151f
 80014a0:	0800151f 	.word	0x0800151f
 80014a4:	0800151f 	.word	0x0800151f
 80014a8:	0800151f 	.word	0x0800151f
 80014ac:	0800151f 	.word	0x0800151f
 80014b0:	0800151f 	.word	0x0800151f
 80014b4:	0800151f 	.word	0x0800151f
 80014b8:	0800151f 	.word	0x0800151f
 80014bc:	0800151f 	.word	0x0800151f
 80014c0:	0800151f 	.word	0x0800151f
 80014c4:	080014cd 	.word	0x080014cd
 80014c8:	2b65      	cmp	r3, #101	; 0x65
 80014ca:	d128      	bne.n	800151e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d6:	440b      	add	r3, r1
 80014d8:	4413      	add	r3, r2
 80014da:	7819      	ldrb	r1, [r3, #0]
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e2:	4413      	add	r3, r2
 80014e4:	460a      	mov	r2, r1
 80014e6:	701a      	strb	r2, [r3, #0]
                break;
 80014e8:	e007      	b.n	80014fa <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	4413      	add	r3, r2
 80014f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80014f6:	701a      	strb	r2, [r3, #0]
                break;
 80014f8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80014fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fc:	3301      	adds	r3, #1
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001502:	2b3e      	cmp	r3, #62	; 0x3e
 8001504:	d80d      	bhi.n	8001522 <parse_number+0x12a>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00a      	beq.n	8001522 <parse_number+0x12a>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001512:	441a      	add	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	d38d      	bcc.n	8001438 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800151c:	e001      	b.n	8001522 <parse_number+0x12a>
                goto loop_end;
 800151e:	bf00      	nop
 8001520:	e000      	b.n	8001524 <parse_number+0x12c>
loop_end:
 8001522:	bf00      	nop
    number_c_string[i] = '\0';
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152a:	4413      	add	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001530:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f007 f82c 	bl	8008598 <strtod>
 8001540:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	429a      	cmp	r2, r3
 800154c:	d101      	bne.n	8001552 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800154e:	2300      	movs	r3, #0
 8001550:	e036      	b.n	80015c0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001558:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800155c:	a31a      	add	r3, pc, #104	; (adr r3, 80015c8 <parse_number+0x1d0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001566:	f7ff fa83 	bl	8000a70 <__aeabi_dcmpge>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	e015      	b.n	80015a6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <parse_number+0x1d8>)
 8001580:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001584:	f7ff fa6a 	bl	8000a5c <__aeabi_dcmple>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	e006      	b.n	80015a6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001598:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800159c:	f7ff fa92 	bl	8000ac4 <__aeabi_d2iz>
 80015a0:	4602      	mov	r2, r0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2208      	movs	r2, #8
 80015aa:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015b2:	f107 0208 	add.w	r2, r7, #8
 80015b6:	1a8a      	subs	r2, r1, r2
 80015b8:	441a      	add	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	609a      	str	r2, [r3, #8]
    return true;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3760      	adds	r7, #96	; 0x60
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	ffc00000 	.word	0xffc00000
 80015cc:	41dfffff 	.word	0x41dfffff
 80015d0:	c1e00000 	.word	0xc1e00000

080015d4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	e04c      	b.n	8001684 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b2f      	cmp	r3, #47	; 0x2f
 80015f4:	d90f      	bls.n	8001616 <parse_hex4+0x42>
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b39      	cmp	r3, #57	; 0x39
 8001600:	d809      	bhi.n	8001616 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	3b30      	subs	r3, #48	; 0x30
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e02d      	b.n	8001672 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b40      	cmp	r3, #64	; 0x40
 8001620:	d90f      	bls.n	8001642 <parse_hex4+0x6e>
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b46      	cmp	r3, #70	; 0x46
 800162c:	d809      	bhi.n	8001642 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	3b37      	subs	r3, #55	; 0x37
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e017      	b.n	8001672 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b60      	cmp	r3, #96	; 0x60
 800164c:	d90f      	bls.n	800166e <parse_hex4+0x9a>
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b66      	cmp	r3, #102	; 0x66
 8001658:	d809      	bhi.n	800166e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	3b57      	subs	r3, #87	; 0x57
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e001      	b.n	8001672 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e00c      	b.n	800168c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d802      	bhi.n	800167e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d9af      	bls.n	80015ea <parse_hex4+0x16>
        }
    }

    return h;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
	...

08001698 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	f340 80b7 	ble.w	8001842 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3302      	adds	r3, #2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff7b 	bl	80015d4 <parse_hex4>
 80016de:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016e6:	d304      	bcc.n	80016f2 <utf16_literal_to_utf8+0x5a>
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016ee:	f0c0 80aa 	bcc.w	8001846 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016f8:	d337      	bcc.n	800176a <utf16_literal_to_utf8+0xd2>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001700:	d233      	bcs.n	800176a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	3306      	adds	r3, #6
 8001706:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800170c:	230c      	movs	r3, #12
 800170e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b05      	cmp	r3, #5
 800171a:	f340 8096 	ble.w	800184a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b5c      	cmp	r3, #92	; 0x5c
 8001724:	f040 8093 	bne.w	800184e <utf16_literal_to_utf8+0x1b6>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b75      	cmp	r3, #117	; 0x75
 8001730:	f040 808d 	bne.w	800184e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3302      	adds	r3, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff4b 	bl	80015d4 <parse_hex4>
 800173e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001746:	f0c0 8084 	bcc.w	8001852 <utf16_literal_to_utf8+0x1ba>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001750:	d27f      	bcs.n	8001852 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	029a      	lsls	r2, r3, #10
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <utf16_literal_to_utf8+0x1cc>)
 8001758:	4013      	ands	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001760:	4313      	orrs	r3, r2
 8001762:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001768:	e004      	b.n	8001774 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800176a:	2306      	movs	r3, #6
 800176c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	2b7f      	cmp	r3, #127	; 0x7f
 8001778:	d803      	bhi.n	8001782 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001780:	e01f      	b.n	80017c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001788:	d206      	bcs.n	8001798 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001790:	23c0      	movs	r3, #192	; 0xc0
 8001792:	f887 3020 	strb.w	r3, [r7, #32]
 8001796:	e014      	b.n	80017c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179e:	d206      	bcs.n	80017ae <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80017a6:	23e0      	movs	r3, #224	; 0xe0
 80017a8:	f887 3020 	strb.w	r3, [r7, #32]
 80017ac:	e009      	b.n	80017c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80017b4:	d24f      	bcs.n	8001856 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80017b6:	2304      	movs	r3, #4
 80017b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80017bc:	23f0      	movs	r3, #240	; 0xf0
 80017be:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80017c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017cc:	e015      	b.n	80017fa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017e0:	440b      	add	r3, r1
 80017e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80017f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017f4:	3b01      	subs	r3, #1
 80017f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e5      	bne.n	80017ce <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001806:	2b01      	cmp	r3, #1
 8001808:	d909      	bls.n	800181e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001816:	430a      	orrs	r2, r1
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800183c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001840:	e00b      	b.n	800185a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e008      	b.n	8001858 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001846:	bf00      	nop
 8001848:	e006      	b.n	8001858 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800184a:	bf00      	nop
 800184c:	e004      	b.n	8001858 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001856:	bf00      	nop

fail:
    return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000ffc00 	.word	0x000ffc00

08001868 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	3301      	adds	r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b22      	cmp	r3, #34	; 0x22
 80018a4:	f040 8102 	bne.w	8001aac <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80018b0:	e017      	b.n	80018e2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b5c      	cmp	r3, #92	; 0x5c
 80018b8:	d110      	bne.n	80018dc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	f080 80f0 	bcs.w	8001ab0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	3301      	adds	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	3301      	adds	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a3a      	ldr	r2, [r7, #32]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d203      	bcs.n	80018fc <parse_string+0x94>
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b22      	cmp	r3, #34	; 0x22
 80018fa:	d1da      	bne.n	80018b2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	461a      	mov	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	f080 80d2 	bcs.w	8001ab4 <parse_string+0x24c>
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b22      	cmp	r3, #34	; 0x22
 8001916:	f040 80cd 	bne.w	8001ab4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4413      	add	r3, r2
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	461a      	mov	r2, r3
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	3201      	adds	r2, #1
 8001938:	4610      	mov	r0, r2
 800193a:	4798      	blx	r3
 800193c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80b9 	beq.w	8001ab8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800194a:	e093      	b.n	8001a74 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b5c      	cmp	r3, #92	; 0x5c
 8001952:	d008      	beq.n	8001966 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001956:	1c53      	adds	r3, r2, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	60f9      	str	r1, [r7, #12]
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e086      	b.n	8001a74 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001966:	2302      	movs	r3, #2
 8001968:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f340 80a3 	ble.w	8001abc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	3301      	adds	r3, #1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b75      	cmp	r3, #117	; 0x75
 800197e:	f300 809f 	bgt.w	8001ac0 <parse_string+0x258>
 8001982:	2b5c      	cmp	r3, #92	; 0x5c
 8001984:	da04      	bge.n	8001990 <parse_string+0x128>
 8001986:	2b22      	cmp	r3, #34	; 0x22
 8001988:	d05c      	beq.n	8001a44 <parse_string+0x1dc>
 800198a:	2b2f      	cmp	r3, #47	; 0x2f
 800198c:	d05a      	beq.n	8001a44 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800198e:	e097      	b.n	8001ac0 <parse_string+0x258>
            switch (input_pointer[1])
 8001990:	3b5c      	subs	r3, #92	; 0x5c
 8001992:	2b19      	cmp	r3, #25
 8001994:	f200 8094 	bhi.w	8001ac0 <parse_string+0x258>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <parse_string+0x138>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	08001a45 	.word	0x08001a45
 80019a4:	08001ac1 	.word	0x08001ac1
 80019a8:	08001ac1 	.word	0x08001ac1
 80019ac:	08001ac1 	.word	0x08001ac1
 80019b0:	08001ac1 	.word	0x08001ac1
 80019b4:	08001ac1 	.word	0x08001ac1
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001ac1 	.word	0x08001ac1
 80019c0:	08001ac1 	.word	0x08001ac1
 80019c4:	08001ac1 	.word	0x08001ac1
 80019c8:	08001a15 	.word	0x08001a15
 80019cc:	08001ac1 	.word	0x08001ac1
 80019d0:	08001ac1 	.word	0x08001ac1
 80019d4:	08001ac1 	.word	0x08001ac1
 80019d8:	08001ac1 	.word	0x08001ac1
 80019dc:	08001ac1 	.word	0x08001ac1
 80019e0:	08001ac1 	.word	0x08001ac1
 80019e4:	08001ac1 	.word	0x08001ac1
 80019e8:	08001a21 	.word	0x08001a21
 80019ec:	08001ac1 	.word	0x08001ac1
 80019f0:	08001ac1 	.word	0x08001ac1
 80019f4:	08001ac1 	.word	0x08001ac1
 80019f8:	08001a2d 	.word	0x08001a2d
 80019fc:	08001ac1 	.word	0x08001ac1
 8001a00:	08001a39 	.word	0x08001a39
 8001a04:	08001a53 	.word	0x08001a53
                    *output_pointer++ = '\b';
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60fa      	str	r2, [r7, #12]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	701a      	strb	r2, [r3, #0]
                    break;
 8001a12:	e02b      	b.n	8001a6c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60fa      	str	r2, [r7, #12]
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a1e:	e025      	b.n	8001a6c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60fa      	str	r2, [r7, #12]
 8001a26:	220a      	movs	r2, #10
 8001a28:	701a      	strb	r2, [r3, #0]
                    break;
 8001a2a:	e01f      	b.n	8001a6c <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60fa      	str	r2, [r7, #12]
 8001a32:	220d      	movs	r2, #13
 8001a34:	701a      	strb	r2, [r3, #0]
                    break;
 8001a36:	e019      	b.n	8001a6c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60fa      	str	r2, [r7, #12]
 8001a3e:	2209      	movs	r2, #9
 8001a40:	701a      	strb	r2, [r3, #0]
                    break;
 8001a42:	e013      	b.n	8001a6c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60fa      	str	r2, [r7, #12]
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	7852      	ldrb	r2, [r2, #1]
 8001a4e:	701a      	strb	r2, [r3, #0]
                    break;
 8001a50:	e00c      	b.n	8001a6c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	461a      	mov	r2, r3
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5c:	f7ff fe1c 	bl	8001698 <utf16_literal_to_utf8>
 8001a60:	4603      	mov	r3, r0
 8001a62:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02c      	beq.n	8001ac4 <parse_string+0x25c>
                    break;
 8001a6a:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	4413      	add	r3, r2
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f4ff af67 	bcc.w	800194c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2210      	movs	r2, #16
 8001a88:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	609a      	str	r2, [r3, #8]

    return true;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e01e      	b.n	8001aea <parse_string+0x282>
        goto fail;
 8001aac:	bf00      	nop
 8001aae:	e00a      	b.n	8001ac6 <parse_string+0x25e>
                    goto fail;
 8001ab0:	bf00      	nop
 8001ab2:	e008      	b.n	8001ac6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001ab4:	bf00      	nop
 8001ab6:	e006      	b.n	8001ac6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001ab8:	bf00      	nop
 8001aba:	e004      	b.n	8001ac6 <parse_string+0x25e>
                goto fail;
 8001abc:	bf00      	nop
 8001abe:	e002      	b.n	8001ac6 <parse_string+0x25e>
                    goto fail;
 8001ac0:	bf00      	nop
 8001ac2:	e000      	b.n	8001ac6 <parse_string+0x25e>
                        goto fail;
 8001ac4:	bf00      	nop

fail:
    if (output != NULL)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop

08001af4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <buffer_skip_whitespace+0x16>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e02c      	b.n	8001b68 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <buffer_skip_whitespace+0x2c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d306      	bcc.n	8001b2e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e021      	b.n	8001b68 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <buffer_skip_whitespace+0x5c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <buffer_skip_whitespace+0x5c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d9e9      	bls.n	8001b24 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <skip_utf8_bom+0x1e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <skip_utf8_bom+0x1e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e01c      	b.n	8001bd0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d018      	beq.n	8001bce <skip_utf8_bom+0x5a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d211      	bcs.n	8001bce <skip_utf8_bom+0x5a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <skip_utf8_bom+0x64>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 feba 	bl	8007932 <strncmp>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	1cda      	adds	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800b32c 	.word	0x0800b32c

08001bdc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e00c      	b.n	8001c0c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7fe faf2 	bl	80001dc <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f805 	bl	8001c14 <cJSON_ParseWithLengthOpts>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <cJSON_ParseWithLengthOpts+0x12c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <cJSON_ParseWithLengthOpts+0x12c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d042      	beq.n	8001cd2 <cJSON_ParseWithLengthOpts+0xbe>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03f      	beq.n	8001cd2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001c5e:	4a39      	ldr	r2, [pc, #228]	; (8001d44 <cJSON_ParseWithLengthOpts+0x130>)
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001c6a:	4836      	ldr	r0, [pc, #216]	; (8001d44 <cJSON_ParseWithLengthOpts+0x130>)
 8001c6c:	f7ff fb5a 	bl	8001324 <cJSON_New_Item>
 8001c70:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02e      	beq.n	8001cd6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff79 	bl	8001b74 <skip_utf8_bom>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <buffer_skip_whitespace>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c90:	f000 f868 	bl	8001d64 <parse_value>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01f      	beq.n	8001cda <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff25 	bl	8001af4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001caa:	6a3a      	ldr	r2, [r7, #32]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d215      	bcs.n	8001cde <cJSON_ParseWithLengthOpts+0xca>
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	441a      	add	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	e031      	b.n	8001d36 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001cd2:	bf00      	nop
 8001cd4:	e004      	b.n	8001ce0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001cd6:	bf00      	nop
 8001cd8:	e002      	b.n	8001ce0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001cda:	bf00      	nop
 8001cdc:	e000      	b.n	8001ce0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001cde:	bf00      	nop

fail:
    if (item != NULL)
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001ce6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ce8:	f7ff fb32 	bl	8001350 <cJSON_Delete>
    }

    if (value != NULL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d202      	bcs.n	8001d08 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e005      	b.n	8001d14 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	441a      	add	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <cJSON_ParseWithLengthOpts+0x12c>)
 8001d26:	461a      	mov	r2, r3
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d30:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000224 	.word	0x20000224
 8001d44:	20000000 	.word	0x20000000

08001d48 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff41 	bl	8001bdc <cJSON_ParseWithOpts>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <parse_value+0x18>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <parse_value+0x1c>
    {
        return false; /* no input */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e0d2      	b.n	8001f26 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01d      	beq.n	8001dc2 <parse_value+0x5e>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d816      	bhi.n	8001dc2 <parse_value+0x5e>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4963      	ldr	r1, [pc, #396]	; (8001f30 <parse_value+0x1cc>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fdc5 	bl	8007932 <strncmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2204      	movs	r2, #4
 8001db2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	1d1a      	adds	r2, r3, #4
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	609a      	str	r2, [r3, #8]
        return true;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0b1      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01d      	beq.n	8001e04 <parse_value+0xa0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	1d5a      	adds	r2, r3, #5
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d816      	bhi.n	8001e04 <parse_value+0xa0>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4413      	add	r3, r2
 8001de0:	2205      	movs	r2, #5
 8001de2:	4954      	ldr	r1, [pc, #336]	; (8001f34 <parse_value+0x1d0>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fda4 	bl	8007932 <strncmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	1d5a      	adds	r2, r3, #5
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	609a      	str	r2, [r3, #8]
        return true;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e090      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d020      	beq.n	8001e4c <parse_value+0xe8>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	1d1a      	adds	r2, r3, #4
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d819      	bhi.n	8001e4c <parse_value+0xe8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	2204      	movs	r2, #4
 8001e24:	4944      	ldr	r1, [pc, #272]	; (8001f38 <parse_value+0x1d4>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 fd83 	bl	8007932 <strncmp>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	609a      	str	r2, [r3, #8]
        return true;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e06c      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d013      	beq.n	8001e7a <parse_value+0x116>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20d      	bcs.n	8001e7a <parse_value+0x116>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b22      	cmp	r3, #34	; 0x22
 8001e6c:	d105      	bne.n	8001e7a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001e6e:	6839      	ldr	r1, [r7, #0]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fcf9 	bl	8001868 <parse_string>
 8001e76:	4603      	mov	r3, r0
 8001e78:	e055      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <parse_value+0x164>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d21d      	bcs.n	8001ec8 <parse_value+0x164>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b2d      	cmp	r3, #45	; 0x2d
 8001e9a:	d00f      	beq.n	8001ebc <parse_value+0x158>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8001eaa:	d90d      	bls.n	8001ec8 <parse_value+0x164>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b39      	cmp	r3, #57	; 0x39
 8001eba:	d805      	bhi.n	8001ec8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fa9a 	bl	80013f8 <parse_number>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	e02e      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d013      	beq.n	8001ef6 <parse_value+0x192>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d20d      	bcs.n	8001ef6 <parse_value+0x192>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b5b      	cmp	r3, #91	; 0x5b
 8001ee8:	d105      	bne.n	8001ef6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f825 	bl	8001f3c <parse_array>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	e017      	b.n	8001f26 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <parse_value+0x1c0>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d20d      	bcs.n	8001f24 <parse_value+0x1c0>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b7b      	cmp	r3, #123	; 0x7b
 8001f16:	d105      	bne.n	8001f24 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d2 	bl	80020c4 <parse_object>
 8001f20:	4603      	mov	r3, r0
 8001f22:	e000      	b.n	8001f26 <parse_value+0x1c2>
    }

    return false;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	0800b304 	.word	0x0800b304
 8001f34:	0800b330 	.word	0x0800b330
 8001f38:	0800b338 	.word	0x0800b338

08001f3c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f56:	d301      	bcc.n	8001f5c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e0af      	b.n	80020bc <parse_array+0x180>
    }
    input_buffer->depth++;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b5b      	cmp	r3, #91	; 0x5b
 8001f74:	f040 8094 	bne.w	80020a0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7ff fdb6 	bl	8001af4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <parse_array+0x6e>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d207      	bcs.n	8001faa <parse_array+0x6e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b5d      	cmp	r3, #93	; 0x5d
 8001fa8:	d061      	beq.n	800206e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <parse_array+0x80>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d305      	bcc.n	8001fc8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	1e5a      	subs	r2, r3, #1
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001fc6:	e072      	b.n	80020ae <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f9a4 	bl	8001324 <cJSON_New_Item>
 8001fdc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05f      	beq.n	80020a4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d104      	bne.n	8001ff4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e007      	b.n	8002004 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f7ff fd70 	bl	8001af4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6938      	ldr	r0, [r7, #16]
 8002018:	f7ff fea4 	bl	8001d64 <parse_value>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d042      	beq.n	80020a8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f7ff fd66 	bl	8001af4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <parse_array+0x10e>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d207      	bcs.n	800204a <parse_array+0x10e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b2c      	cmp	r3, #44	; 0x2c
 8002048:	d0c3      	beq.n	8001fd2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02d      	beq.n	80020ac <parse_array+0x170>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d227      	bcs.n	80020ac <parse_array+0x170>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b5d      	cmp	r3, #93	; 0x5d
 800206a:	d11f      	bne.n	80020ac <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800206c:	e000      	b.n	8002070 <parse_array+0x134>
        goto success;
 800206e:	bf00      	nop
    input_buffer->depth--;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <parse_array+0x14a>
        head->prev = current_item;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	609a      	str	r2, [r3, #8]

    return true;
 800209c:	2301      	movs	r3, #1
 800209e:	e00d      	b.n	80020bc <parse_array+0x180>
        goto fail;
 80020a0:	bf00      	nop
 80020a2:	e004      	b.n	80020ae <parse_array+0x172>
            goto fail; /* allocation failure */
 80020a4:	bf00      	nop
 80020a6:	e002      	b.n	80020ae <parse_array+0x172>
            goto fail; /* failed to parse value */
 80020a8:	bf00      	nop
 80020aa:	e000      	b.n	80020ae <parse_array+0x172>
        goto fail; /* expected end of array */
 80020ac:	bf00      	nop

fail:
    if (head != NULL)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f7ff f94b 	bl	8001350 <cJSON_Delete>
    }

    return false;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020de:	d301      	bcc.n	80020e4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80020e0:	2300      	movs	r3, #0
 80020e2:	e0ea      	b.n	80022ba <parse_object+0x1f6>
    }
    input_buffer->depth++;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80d0 	beq.w	8002296 <parse_object+0x1d2>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	f080 80c9 	bcs.w	8002296 <parse_object+0x1d2>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b7b      	cmp	r3, #123	; 0x7b
 8002112:	f040 80c0 	bne.w	8002296 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f7ff fce7 	bl	8001af4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <parse_object+0x86>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d208      	bcs.n	800214a <parse_object+0x86>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b7d      	cmp	r3, #125	; 0x7d
 8002146:	f000 808d 	beq.w	8002264 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <parse_object+0x98>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d305      	bcc.n	8002168 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	609a      	str	r2, [r3, #8]
        goto fail;
 8002166:	e0a1      	b.n	80022ac <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	3310      	adds	r3, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f8d4 	bl	8001324 <cJSON_New_Item>
 800217c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 808a 	beq.w	800229a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	e007      	b.n	80021a6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f7ff fc9f 	bl	8001af4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	6938      	ldr	r0, [r7, #16]
 80021ba:	f7ff fb55 	bl	8001868 <parse_string>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06c      	beq.n	800229e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f7ff fc95 	bl	8001af4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d061      	beq.n	80022a2 <parse_object+0x1de>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d25b      	bcs.n	80022a2 <parse_object+0x1de>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b3a      	cmp	r3, #58	; 0x3a
 80021f8:	d153      	bne.n	80022a2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002204:	6838      	ldr	r0, [r7, #0]
 8002206:	f7ff fc75 	bl	8001af4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6938      	ldr	r0, [r7, #16]
 800220e:	f7ff fda9 	bl	8001d64 <parse_value>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d046      	beq.n	80022a6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7ff fc6b 	bl	8001af4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <parse_object+0x17c>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <parse_object+0x17c>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b2c      	cmp	r3, #44	; 0x2c
 800223e:	d098      	beq.n	8002172 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d031      	beq.n	80022aa <parse_object+0x1e6>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d22b      	bcs.n	80022aa <parse_object+0x1e6>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b7d      	cmp	r3, #125	; 0x7d
 8002260:	d123      	bne.n	80022aa <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002262:	e000      	b.n	8002266 <parse_object+0x1a2>
        goto success; /* empty object */
 8002264:	bf00      	nop
    input_buffer->depth--;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <parse_object+0x1b8>
        head->prev = current_item;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
    return true;
 8002292:	2301      	movs	r3, #1
 8002294:	e011      	b.n	80022ba <parse_object+0x1f6>
        goto fail; /* not an object */
 8002296:	bf00      	nop
 8002298:	e008      	b.n	80022ac <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800229a:	bf00      	nop
 800229c:	e006      	b.n	80022ac <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800229e:	bf00      	nop
 80022a0:	e004      	b.n	80022ac <parse_object+0x1e8>
            goto fail; /* invalid object */
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80022aa:	bf00      	nop

fail:
    if (head != NULL)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff f84c 	bl	8001350 <cJSON_Delete>
    }

    return false;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <get_object_item+0x1c>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <get_object_item+0x20>
    {
        return NULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	e033      	b.n	800234a <get_object_item+0x88>
    }

    current_element = object->child;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d017      	beq.n	800231e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80022ee:	e002      	b.n	80022f6 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01c      	beq.n	8002336 <get_object_item+0x74>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <get_object_item+0x74>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4619      	mov	r1, r3
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f7fd ff5c 	bl	80001c8 <strcmp>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ec      	bne.n	80022f0 <get_object_item+0x2e>
 8002316:	e00e      	b.n	8002336 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <get_object_item+0x74>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4619      	mov	r1, r3
 800232a:	68b8      	ldr	r0, [r7, #8]
 800232c:	f7fe ff8e 	bl	800124c <case_insensitive_strcmp>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <get_object_item+0x82>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <get_object_item+0x86>
        return NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <get_object_item+0x88>
    }

    return current_element;
 8002348:	697b      	ldr	r3, [r7, #20]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800235c:	2200      	movs	r2, #0
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffae 	bl	80022c2 <get_object_item>
 8002366:	4603      	mov	r3, r0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <__io_putchar>:
     #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
     #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,0xFFFF);
 8002378:	1d39      	adds	r1, r7, #4
 800237a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237e:	2201      	movs	r2, #1
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <__io_putchar+0x20>)
 8002382:	f003 fce7 	bl	8005d54 <HAL_UART_Transmit>
	return ch;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200002d0 	.word	0x200002d0

08002394 <SendMQTT>:


// VIET CAC HAM CON

void SendMQTT(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	while(1)
	{
	if(HAL_GetTick() - last >= 500)
 8002398:	f001 ff30 	bl	80041fc <HAL_GetTick>
 800239c:	4603      	mov	r3, r0
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <SendMQTT+0x3c>)
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023a8:	d3f6      	bcc.n	8002398 <SendMQTT+0x4>
		{
			if(CheckConnect)
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <SendMQTT+0x40>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <SendMQTT+0x28>
			{
				SendData( mqtt_pub );
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <SendMQTT+0x44>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f810 	bl	80023dc <SendData>
			}
			last = HAL_GetTick();
 80023bc:	f001 ff1e 	bl	80041fc <HAL_GetTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <SendMQTT+0x3c>)
 80023c6:	601a      	str	r2, [r3, #0]
			break;
 80023c8:	bf00      	nop
		}
	}
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000788 	.word	0x20000788
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	20000024 	.word	0x20000024

080023dc <SendData>:

// GUI DU LIEU KIEU INT SANG CHAR

void SendData(char *pub )
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80023e2:	af02      	add	r7, sp, #8
 80023e4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80023e8:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80023ec:	6018      	str	r0, [r3, #0]
	char Str_FBF407[100];
	char Str_CF407[100];
	char Str_run[100];


	for(int i = 0 ; i < 100; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80023f4:	e05a      	b.n	80024ac <SendData+0xd0>
	{
		MQTTPUBRAW[i] = 0;
 80023f6:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 80023fa:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80023fe:	4413      	add	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
		JSON[i] = 0;
 8002404:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8002408:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800240c:	4413      	add	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
		Length[i] = 0;
 8002412:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002416:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800241a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800241e:	4413      	add	r3, r2
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
		Str_FA[i]=0;
 8002424:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002428:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800242c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002430:	4413      	add	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
		Str_FB[i]=0;
 8002436:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800243a:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800243e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002442:	4413      	add	r3, r2
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
		Str_C[i]=0;
 8002448:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800244c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002450:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002454:	4413      	add	r3, r2
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
		Str_FAF407[i]=0;
 800245a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800245e:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8002462:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002466:	4413      	add	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
		Str_FBF407[i]=0;
 800246c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002470:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8002474:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002478:	4413      	add	r3, r2
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
		Str_CF407[i]=0;
 800247e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002482:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8002486:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800248a:	4413      	add	r3, r2
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
		Str_run[i]=0;
 8002490:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002494:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002498:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 100; i++)
 80024a2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80024ac:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80024b0:	2b63      	cmp	r3, #99	; 0x63
 80024b2:	dda0      	ble.n	80023f6 <SendData+0x1a>
	}
	sprintf(Str_FA, "%.2f", aFA);
 80024b4:	4be3      	ldr	r3, [pc, #908]	; (8002844 <SendData+0x468>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fffb 	bl	80004b4 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	f507 7018 	add.w	r0, r7, #608	; 0x260
 80024c6:	49e0      	ldr	r1, [pc, #896]	; (8002848 <SendData+0x46c>)
 80024c8:	f005 f9b4 	bl	8007834 <siprintf>
	sprintf(Str_FB, "%.2f", bFB);
 80024cc:	4bdf      	ldr	r3, [pc, #892]	; (800284c <SendData+0x470>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd ffef 	bl	80004b4 <__aeabi_f2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 80024de:	49da      	ldr	r1, [pc, #872]	; (8002848 <SendData+0x46c>)
 80024e0:	f005 f9a8 	bl	8007834 <siprintf>
	sprintf(Str_C, "%d", cCycle);
 80024e4:	4bda      	ldr	r3, [pc, #872]	; (8002850 <SendData+0x474>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80024ec:	49d9      	ldr	r1, [pc, #868]	; (8002854 <SendData+0x478>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f005 f9a0 	bl	8007834 <siprintf>
	sprintf(Str_FAF407, "%.2f", FAF407);
 80024f4:	4bd8      	ldr	r3, [pc, #864]	; (8002858 <SendData+0x47c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ffdb 	bl	80004b4 <__aeabi_f2d>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8002506:	49d0      	ldr	r1, [pc, #832]	; (8002848 <SendData+0x46c>)
 8002508:	f005 f994 	bl	8007834 <siprintf>
	sprintf(Str_FBF407, "%.2f", FBF407);
 800250c:	4bd3      	ldr	r3, [pc, #844]	; (800285c <SendData+0x480>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ffcf 	bl	80004b4 <__aeabi_f2d>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800251e:	49ca      	ldr	r1, [pc, #808]	; (8002848 <SendData+0x46c>)
 8002520:	f005 f988 	bl	8007834 <siprintf>
	sprintf(Str_CF407, "%d", CycleF407);
 8002524:	4bce      	ldr	r3, [pc, #824]	; (8002860 <SendData+0x484>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800252c:	49c9      	ldr	r1, [pc, #804]	; (8002854 <SendData+0x478>)
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f980 	bl	8007834 <siprintf>
	sprintf(Str_run, "%d", run);
 8002534:	4bcb      	ldr	r3, [pc, #812]	; (8002864 <SendData+0x488>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	49c5      	ldr	r1, [pc, #788]	; (8002854 <SendData+0x478>)
 800253e:	4618      	mov	r0, r3
 8002540:	f005 f978 	bl	8007834 <siprintf>
	// TAO CHUOI JSON GUI LEN MQTT

	strcat(JSON,"{\"FA\":\"");
 8002544:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe47 	bl	80001dc <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002556:	4413      	add	r3, r2
 8002558:	49c3      	ldr	r1, [pc, #780]	; (8002868 <SendData+0x48c>)
 800255a:	461a      	mov	r2, r3
 800255c:	460b      	mov	r3, r1
 800255e:	cb03      	ldmia	r3!, {r0, r1}
 8002560:	6010      	str	r0, [r2, #0]
 8002562:	6051      	str	r1, [r2, #4]
	strcat(JSON,Str_FA);
 8002564:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002568:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f005 f9c3 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 8002574:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe2f 	bl	80001dc <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002586:	4413      	add	r3, r2
 8002588:	4ab8      	ldr	r2, [pc, #736]	; (800286c <SendData+0x490>)
 800258a:	8811      	ldrh	r1, [r2, #0]
 800258c:	7892      	ldrb	r2, [r2, #2]
 800258e:	8019      	strh	r1, [r3, #0]
 8002590:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"FB\":\"");
 8002592:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd fe20 	bl	80001dc <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025a4:	4413      	add	r3, r2
 80025a6:	4ab2      	ldr	r2, [pc, #712]	; (8002870 <SendData+0x494>)
 80025a8:	6810      	ldr	r0, [r2, #0]
 80025aa:	6018      	str	r0, [r3, #0]
 80025ac:	8891      	ldrh	r1, [r2, #4]
 80025ae:	7992      	ldrb	r2, [r2, #6]
 80025b0:	8099      	strh	r1, [r3, #4]
 80025b2:	719a      	strb	r2, [r3, #6]
	strcat(JSON,Str_FB);
 80025b4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80025b8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 f99b 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 80025c4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd fe07 	bl	80001dc <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025d6:	4413      	add	r3, r2
 80025d8:	4aa4      	ldr	r2, [pc, #656]	; (800286c <SendData+0x490>)
 80025da:	8811      	ldrh	r1, [r2, #0]
 80025dc:	7892      	ldrb	r2, [r2, #2]
 80025de:	8019      	strh	r1, [r3, #0]
 80025e0:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"C\":\"");
 80025e2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdf8 	bl	80001dc <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025f4:	4413      	add	r3, r2
 80025f6:	4a9f      	ldr	r2, [pc, #636]	; (8002874 <SendData+0x498>)
 80025f8:	6810      	ldr	r0, [r2, #0]
 80025fa:	6018      	str	r0, [r3, #0]
 80025fc:	8892      	ldrh	r2, [r2, #4]
 80025fe:	809a      	strh	r2, [r3, #4]
	strcat(JSON,Str_C);
 8002600:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8002604:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f005 f975 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 8002610:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fde1 	bl	80001dc <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002622:	4413      	add	r3, r2
 8002624:	4a91      	ldr	r2, [pc, #580]	; (800286c <SendData+0x490>)
 8002626:	8811      	ldrh	r1, [r2, #0]
 8002628:	7892      	ldrb	r2, [r2, #2]
 800262a:	8019      	strh	r1, [r3, #0]
 800262c:	709a      	strb	r2, [r3, #2]


	strcat(JSON,"\"FAF407\":\"");
 800262e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fdd2 	bl	80001dc <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002640:	4413      	add	r3, r2
 8002642:	498d      	ldr	r1, [pc, #564]	; (8002878 <SendData+0x49c>)
 8002644:	461a      	mov	r2, r3
 8002646:	460b      	mov	r3, r1
 8002648:	cb03      	ldmia	r3!, {r0, r1}
 800264a:	6010      	str	r0, [r2, #0]
 800264c:	6051      	str	r1, [r2, #4]
 800264e:	8819      	ldrh	r1, [r3, #0]
 8002650:	789b      	ldrb	r3, [r3, #2]
 8002652:	8111      	strh	r1, [r2, #8]
 8002654:	7293      	strb	r3, [r2, #10]
	strcat(JSON,Str_FAF407);
 8002656:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800265a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f005 f94a 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 8002666:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fdb6 	bl	80001dc <strlen>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002678:	4413      	add	r3, r2
 800267a:	4a7c      	ldr	r2, [pc, #496]	; (800286c <SendData+0x490>)
 800267c:	8811      	ldrh	r1, [r2, #0]
 800267e:	7892      	ldrb	r2, [r2, #2]
 8002680:	8019      	strh	r1, [r3, #0]
 8002682:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"FBF407\":\"");
 8002684:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd fda7 	bl	80001dc <strlen>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002696:	4413      	add	r3, r2
 8002698:	4978      	ldr	r1, [pc, #480]	; (800287c <SendData+0x4a0>)
 800269a:	461a      	mov	r2, r3
 800269c:	460b      	mov	r3, r1
 800269e:	cb03      	ldmia	r3!, {r0, r1}
 80026a0:	6010      	str	r0, [r2, #0]
 80026a2:	6051      	str	r1, [r2, #4]
 80026a4:	8819      	ldrh	r1, [r3, #0]
 80026a6:	789b      	ldrb	r3, [r3, #2]
 80026a8:	8111      	strh	r1, [r2, #8]
 80026aa:	7293      	strb	r3, [r2, #10]
	strcat(JSON,Str_FBF407);
 80026ac:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80026b0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 f91f 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 80026bc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fd8b 	bl	80001dc <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80026ce:	4413      	add	r3, r2
 80026d0:	4a66      	ldr	r2, [pc, #408]	; (800286c <SendData+0x490>)
 80026d2:	8811      	ldrh	r1, [r2, #0]
 80026d4:	7892      	ldrb	r2, [r2, #2]
 80026d6:	8019      	strh	r1, [r3, #0]
 80026d8:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"CF407\":\"");
 80026da:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd7c 	bl	80001dc <strlen>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80026ec:	4413      	add	r3, r2
 80026ee:	4964      	ldr	r1, [pc, #400]	; (8002880 <SendData+0x4a4>)
 80026f0:	461a      	mov	r2, r3
 80026f2:	460b      	mov	r3, r1
 80026f4:	cb03      	ldmia	r3!, {r0, r1}
 80026f6:	6010      	str	r0, [r2, #0]
 80026f8:	6051      	str	r1, [r2, #4]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	8113      	strh	r3, [r2, #8]
	strcat(JSON, Str_CF407);
 80026fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002702:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f005 f8f6 	bl	80078fa <strcat>
	strcat(JSON,"\",");
 800270e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd62 	bl	80001dc <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002720:	4413      	add	r3, r2
 8002722:	4a52      	ldr	r2, [pc, #328]	; (800286c <SendData+0x490>)
 8002724:	8811      	ldrh	r1, [r2, #0]
 8002726:	7892      	ldrb	r2, [r2, #2]
 8002728:	8019      	strh	r1, [r3, #0]
 800272a:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"run\":\"");
 800272c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fd53 	bl	80001dc <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800273e:	4413      	add	r3, r2
 8002740:	4950      	ldr	r1, [pc, #320]	; (8002884 <SendData+0x4a8>)
 8002742:	461a      	mov	r2, r3
 8002744:	460b      	mov	r3, r1
 8002746:	cb03      	ldmia	r3!, {r0, r1}
 8002748:	6010      	str	r0, [r2, #0]
 800274a:	6051      	str	r1, [r2, #4]
	strcat(JSON,Str_run);
 800274c:	f107 0208 	add.w	r2, r7, #8
 8002750:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f005 f8cf 	bl	80078fa <strcat>
	strcat(JSON,"\"}");
 800275c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fd3b 	bl	80001dc <strlen>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800276e:	4413      	add	r3, r2
 8002770:	4a45      	ldr	r2, [pc, #276]	; (8002888 <SendData+0x4ac>)
 8002772:	8811      	ldrh	r1, [r2, #0]
 8002774:	7892      	ldrb	r2, [r2, #2]
 8002776:	8019      	strh	r1, [r3, #0]
 8002778:	709a      	strb	r2, [r3, #2]
	strcat(JSON,"\r\n");
 800277a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd2c 	bl	80001dc <strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800278c:	4413      	add	r3, r2
 800278e:	4a3f      	ldr	r2, [pc, #252]	; (800288c <SendData+0x4b0>)
 8002790:	8811      	ldrh	r1, [r2, #0]
 8002792:	7892      	ldrb	r2, [r2, #2]
 8002794:	8019      	strh	r1, [r3, #0]
 8002796:	709a      	strb	r2, [r3, #2]

									//printf("DataJson: %s\n", JSON);
	int len = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
	len = strlen(JSON);
 800279e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fd1a 	bl	80001dc <strlen>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
	sprintf(Length, "%d", len);
 80027ae:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80027b2:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80027b6:	4927      	ldr	r1, [pc, #156]	; (8002854 <SendData+0x478>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 f83b 	bl	8007834 <siprintf>



	//AT+MQTTPUBRAW=0,"nhatnguyen/sub",5,0,1$0D$0A

	strcat(MQTTPUBRAW,"AT+MQTTPUBRAW=0,\"");
 80027be:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fd0a 	bl	80001dc <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80027d0:	4413      	add	r3, r2
 80027d2:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <SendData+0x4b4>)
 80027d4:	461d      	mov	r5, r3
 80027d6:	4614      	mov	r4, r2
 80027d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027da:	6028      	str	r0, [r5, #0]
 80027dc:	6069      	str	r1, [r5, #4]
 80027de:	60aa      	str	r2, [r5, #8]
 80027e0:	60eb      	str	r3, [r5, #12]
 80027e2:	8823      	ldrh	r3, [r4, #0]
 80027e4:	822b      	strh	r3, [r5, #16]
	strcat(MQTTPUBRAW,pub);
 80027e6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80027ea:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80027ee:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	4610      	mov	r0, r2
 80027f6:	f005 f880 	bl	80078fa <strcat>
	strcat(MQTTPUBRAW,"\",");
 80027fa:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fcec 	bl	80001dc <strlen>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800280c:	4413      	add	r3, r2
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <SendData+0x490>)
 8002810:	8811      	ldrh	r1, [r2, #0]
 8002812:	7892      	ldrb	r2, [r2, #2]
 8002814:	8019      	strh	r1, [r3, #0]
 8002816:	709a      	strb	r2, [r3, #2]
	strcat(MQTTPUBRAW,Length);
 8002818:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800281c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f005 f869 	bl	80078fa <strcat>
	strcat(MQTTPUBRAW,",0,1\r\n");
 8002828:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fcd5 	bl	80001dc <strlen>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800283a:	4413      	add	r3, r2
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <SendData+0x4b8>)
 800283e:	6810      	ldr	r0, [r2, #0]
 8002840:	e02a      	b.n	8002898 <SendData+0x4bc>
 8002842:	bf00      	nop
 8002844:	20000334 	.word	0x20000334
 8002848:	0800b398 	.word	0x0800b398
 800284c:	20000338 	.word	0x20000338
 8002850:	20000344 	.word	0x20000344
 8002854:	0800b3a0 	.word	0x0800b3a0
 8002858:	2000033c 	.word	0x2000033c
 800285c:	20000340 	.word	0x20000340
 8002860:	20000348 	.word	0x20000348
 8002864:	2000034c 	.word	0x2000034c
 8002868:	0800b3a4 	.word	0x0800b3a4
 800286c:	0800b3ac 	.word	0x0800b3ac
 8002870:	0800b3b0 	.word	0x0800b3b0
 8002874:	0800b3b8 	.word	0x0800b3b8
 8002878:	0800b3c0 	.word	0x0800b3c0
 800287c:	0800b3cc 	.word	0x0800b3cc
 8002880:	0800b3d8 	.word	0x0800b3d8
 8002884:	0800b3e4 	.word	0x0800b3e4
 8002888:	0800b3ec 	.word	0x0800b3ec
 800288c:	0800b3f0 	.word	0x0800b3f0
 8002890:	0800b3f4 	.word	0x0800b3f4
 8002894:	0800b408 	.word	0x0800b408
 8002898:	6018      	str	r0, [r3, #0]
 800289a:	8891      	ldrh	r1, [r2, #4]
 800289c:	7992      	ldrb	r2, [r2, #6]
 800289e:	8099      	strh	r1, [r3, #4]
 80028a0:	719a      	strb	r2, [r3, #6]

	// => {"FA":"","FB":"","C":""}

	// CONTINUE CHECK CONNECT

	Send_AT_Commands_SendMessager(MQTTPUBRAW, "OK\r\n\r\n>" , 5000 , 0 , 3);
 80028a2:	f507 7063 	add.w	r0, r7, #908	; 0x38c
 80028a6:	2303      	movs	r3, #3
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	490e      	ldr	r1, [pc, #56]	; (80028ec <SendData+0x510>)
 80028b2:	f000 f9e7 	bl	8002c84 <Send_AT_Commands_SendMessager>

	clearbuffer_UART_ESP();
 80028b6:	f000 fe4b 	bl	8003550 <clearbuffer_UART_ESP>

	if(ErrorCode == 0)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <SendData+0x514>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <SendData+0x4fe>
	{
		Send_AT_Commands_SendMessager(JSON, "+MQTTPUB:OK" , 5000 , 0 , 5);
 80028c2:	f507 704a 	add.w	r0, r7, #808	; 0x328
 80028c6:	2305      	movs	r3, #5
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2300      	movs	r3, #0
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4908      	ldr	r1, [pc, #32]	; (80028f4 <SendData+0x518>)
 80028d2:	f000 f9d7 	bl	8002c84 <Send_AT_Commands_SendMessager>
		clearbuffer_UART_ESP();
 80028d6:	f000 fe3b 	bl	8003550 <clearbuffer_UART_ESP>
	}

	ConfigAT = 1;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <SendData+0x51c>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0800b410 	.word	0x0800b410
 80028f0:	20000780 	.word	0x20000780
 80028f4:	0800b418 	.word	0x0800b418
 80028f8:	20000784 	.word	0x20000784

080028fc <ConnectMQTT>:


// CONNECT MQTT

void ConnectMQTT(char *server , char *port , char *user , char *pass , char *sub , char *pub)
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8002902:	af02      	add	r7, sp, #8
 8002904:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8002908:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 800290c:	6020      	str	r0, [r4, #0]
 800290e:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8002912:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 8002916:	6001      	str	r1, [r0, #0]
 8002918:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800291c:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002920:	600a      	str	r2, [r1, #0]
 8002922:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002926:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800292a:	6013      	str	r3, [r2, #0]
	uint32_t id = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	id = rand()%100;
 8002932:	f004 fef5 	bl	8007720 <rand>
 8002936:	4602      	mov	r2, r0
 8002938:	4bc1      	ldr	r3, [pc, #772]	; (8002c40 <ConnectMQTT+0x344>)
 800293a:	fb83 1302 	smull	r1, r3, r3, r2
 800293e:	1159      	asrs	r1, r3, #5
 8002940:	17d3      	asrs	r3, r2, #31
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	2164      	movs	r1, #100	; 0x64
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	char MathRandom[100];
	char MQTTUSERCFG[100];
	char MQTTCONN[100];
	char MQTTSUB[100];

	for(int i = 0 ; i < 100; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002956:	e02d      	b.n	80029b4 <ConnectMQTT+0xb8>
	{
		clientid[i] = 0;
 8002958:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800295c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002960:	4413      	add	r3, r2
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
		MathRandom[i] = 0;
 8002966:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800296a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800296e:	4413      	add	r3, r2
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
		MQTTUSERCFG[i] = 0;
 8002974:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002978:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800297c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002980:	4413      	add	r3, r2
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
		MQTTCONN[i] = 0;
 8002986:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800298a:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800298e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002992:	4413      	add	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
		MQTTSUB[i] = 0;
 8002998:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800299c:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80029a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 100; i++)
 80029aa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029ae:	3301      	adds	r3, #1
 80029b0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80029b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029b8:	2b63      	cmp	r3, #99	; 0x63
 80029ba:	ddcd      	ble.n	8002958 <ConnectMQTT+0x5c>
	}

	printf(MathRandom, "%d", id);
 80029bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80029c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80029c4:	499f      	ldr	r1, [pc, #636]	; (8002c44 <ConnectMQTT+0x348>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fe1c 	bl	8007604 <iprintf>
	strcat(clientid, "ESP");
 80029cc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fc03 	bl	80001dc <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80029de:	4413      	add	r3, r2
 80029e0:	4a99      	ldr	r2, [pc, #612]	; (8002c48 <ConnectMQTT+0x34c>)
 80029e2:	6810      	ldr	r0, [r2, #0]
 80029e4:	6018      	str	r0, [r3, #0]
	strcat (clientid, MathRandom);
 80029e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80029ea:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 ff82 	bl	80078fa <strcat>

	// TAO CHUOI USER AND PASS

	//AT+MQTTUSERCFG=0,1,"ESP8266","nhatnguyenIOT","123456nnn",0,0,""$0D$0A => OK

	strcat(MQTTUSERCFG, "AT+MQTTUSERCFG=0,1,\"");
 80029f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fbee 	bl	80001dc <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a90      	ldr	r2, [pc, #576]	; (8002c4c <ConnectMQTT+0x350>)
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	4614      	mov	r4, r2
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	6028      	str	r0, [r5, #0]
 8002a14:	6069      	str	r1, [r5, #4]
 8002a16:	60aa      	str	r2, [r5, #8]
 8002a18:	60eb      	str	r3, [r5, #12]
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	6128      	str	r0, [r5, #16]
 8002a1e:	7923      	ldrb	r3, [r4, #4]
 8002a20:	752b      	strb	r3, [r5, #20]
	strcat(MQTTUSERCFG,clientid);
 8002a22:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002a26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 ff64 	bl	80078fa <strcat>
	strcat(MQTTUSERCFG,"\",\"");
 8002a32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fbd0 	bl	80001dc <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a44:	4413      	add	r3, r2
 8002a46:	4a82      	ldr	r2, [pc, #520]	; (8002c50 <ConnectMQTT+0x354>)
 8002a48:	6810      	ldr	r0, [r2, #0]
 8002a4a:	6018      	str	r0, [r3, #0]
	strcat(MQTTUSERCFG,user);
 8002a4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002a50:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002a54:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f004 ff4d 	bl	80078fa <strcat>
	strcat(MQTTUSERCFG,"\",\"");
 8002a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fbb9 	bl	80001dc <strlen>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a72:	4413      	add	r3, r2
 8002a74:	4a76      	ldr	r2, [pc, #472]	; (8002c50 <ConnectMQTT+0x354>)
 8002a76:	6810      	ldr	r0, [r2, #0]
 8002a78:	6018      	str	r0, [r3, #0]
	strcat(MQTTUSERCFG,pass);
 8002a7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002a7e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002a82:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f004 ff36 	bl	80078fa <strcat>
	strcat(MQTTUSERCFG,"\",0,0,");
 8002a8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fba2 	bl	80001dc <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a6c      	ldr	r2, [pc, #432]	; (8002c54 <ConnectMQTT+0x358>)
 8002aa4:	6810      	ldr	r0, [r2, #0]
 8002aa6:	6018      	str	r0, [r3, #0]
 8002aa8:	8891      	ldrh	r1, [r2, #4]
 8002aaa:	7992      	ldrb	r2, [r2, #6]
 8002aac:	8099      	strh	r1, [r3, #4]
 8002aae:	719a      	strb	r2, [r3, #6]
	strcat(MQTTUSERCFG,"\"\"");
 8002ab0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fb91 	bl	80001dc <strlen>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a64      	ldr	r2, [pc, #400]	; (8002c58 <ConnectMQTT+0x35c>)
 8002ac6:	8811      	ldrh	r1, [r2, #0]
 8002ac8:	7892      	ldrb	r2, [r2, #2]
 8002aca:	8019      	strh	r1, [r3, #0]
 8002acc:	709a      	strb	r2, [r3, #2]
	strcat(MQTTUSERCFG,"\r\n");
 8002ace:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fb82 	bl	80001dc <strlen>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	; (8002c5c <ConnectMQTT+0x360>)
 8002ae4:	8811      	ldrh	r1, [r2, #0]
 8002ae6:	7892      	ldrb	r2, [r2, #2]
 8002ae8:	8019      	strh	r1, [r3, #0]
 8002aea:	709a      	strb	r2, [r3, #2]

	// TAO CHUOI SERVER AND PORT

	//AT+MQTTCONN=0,"ngoinhaiot.com",1111,1$0D$0A

	strcat(MQTTCONN, "AT+MQTTCONN=0,\"");
 8002aec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fb73 	bl	80001dc <strlen>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002afe:	4413      	add	r3, r2
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <ConnectMQTT+0x364>)
 8002b02:	461c      	mov	r4, r3
 8002b04:	4615      	mov	r5, r2
 8002b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b08:	6020      	str	r0, [r4, #0]
 8002b0a:	6061      	str	r1, [r4, #4]
 8002b0c:	60a2      	str	r2, [r4, #8]
 8002b0e:	60e3      	str	r3, [r4, #12]
	strcat(MQTTCONN, server);
 8002b10:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b18:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f004 feeb 	bl	80078fa <strcat>
	strcat(MQTTCONN, "\",");
 8002b24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fb57 	bl	80001dc <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b36:	4413      	add	r3, r2
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <ConnectMQTT+0x368>)
 8002b3a:	8811      	ldrh	r1, [r2, #0]
 8002b3c:	7892      	ldrb	r2, [r2, #2]
 8002b3e:	8019      	strh	r1, [r3, #0]
 8002b40:	709a      	strb	r2, [r3, #2]
	strcat(MQTTCONN, port);
 8002b42:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b46:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b4a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	4610      	mov	r0, r2
 8002b52:	f004 fed2 	bl	80078fa <strcat>
	strcat(MQTTCONN, ",1\r\n");
 8002b56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fb3e 	bl	80001dc <strlen>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <ConnectMQTT+0x36c>)
 8002b6c:	6810      	ldr	r0, [r2, #0]
 8002b6e:	6018      	str	r0, [r3, #0]
 8002b70:	7912      	ldrb	r2, [r2, #4]
 8002b72:	711a      	strb	r2, [r3, #4]

	// TAO CHUOI DE NHAN DU LIEU

	//AT+MQTTSUB=0,"nhatnguyen/tr",0$0D$0A => OK

	strcat(MQTTSUB, "AT+MQTTSUB=0,\"");
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fb2f 	bl	80001dc <strlen>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4413      	add	r3, r2
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <ConnectMQTT+0x370>)
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b90:	6020      	str	r0, [r4, #0]
 8002b92:	6061      	str	r1, [r4, #4]
 8002b94:	60a2      	str	r2, [r4, #8]
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	789b      	ldrb	r3, [r3, #2]
 8002b9a:	81a2      	strh	r2, [r4, #12]
 8002b9c:	73a3      	strb	r3, [r4, #14]
	strcat(MQTTSUB, sub);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fea7 	bl	80078fa <strcat>
	strcat(MQTTSUB, "\",0\r\n");
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fb13 	bl	80001dc <strlen>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <ConnectMQTT+0x374>)
 8002bc2:	6810      	ldr	r0, [r2, #0]
 8002bc4:	6018      	str	r0, [r3, #0]
 8002bc6:	8892      	ldrh	r2, [r2, #4]
 8002bc8:	809a      	strh	r2, [r3, #4]


	// GUI LENH QUA ESP8266 DE KET NOI WIFI

	Send_AT_Commands_ConnectMQTT(MQTTUSERCFG, "OK" , 5000 , 0 , 5);
 8002bca:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8002bce:	2305      	movs	r3, #5
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4926      	ldr	r1, [pc, #152]	; (8002c74 <ConnectMQTT+0x378>)
 8002bda:	f000 f90d 	bl	8002df8 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be2:	f001 fb15 	bl	8004210 <HAL_Delay>
	clearbuffer_UART_ESP();
 8002be6:	f000 fcb3 	bl	8003550 <clearbuffer_UART_ESP>


	Send_AT_Commands_ConnectMQTT(MQTTCONN, "+MQTTCONNECTED" , 5000 , 0 , 5);
 8002bea:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002bee:	2305      	movs	r3, #5
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	491f      	ldr	r1, [pc, #124]	; (8002c78 <ConnectMQTT+0x37c>)
 8002bfa:	f000 f8fd 	bl	8002df8 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c02:	f001 fb05 	bl	8004210 <HAL_Delay>
	clearbuffer_UART_ESP();
 8002c06:	f000 fca3 	bl	8003550 <clearbuffer_UART_ESP>


	Send_AT_Commands_ConnectMQTT(MQTTSUB, "OK" , 5000 , 0 , 5);
 8002c0a:	f107 0014 	add.w	r0, r7, #20
 8002c0e:	2305      	movs	r3, #5
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4916      	ldr	r1, [pc, #88]	; (8002c74 <ConnectMQTT+0x378>)
 8002c1a:	f000 f8ed 	bl	8002df8 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c22:	f001 faf5 	bl	8004210 <HAL_Delay>
	clearbuffer_UART_ESP();
 8002c26:	f000 fc93 	bl	8003550 <clearbuffer_UART_ESP>

	ConfigAT = 1;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <ConnectMQTT+0x380>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
	ErrorCode = 1;
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <ConnectMQTT+0x384>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]

}
 8002c36:	bf00      	nop
 8002c38:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c40:	51eb851f 	.word	0x51eb851f
 8002c44:	0800b3a0 	.word	0x0800b3a0
 8002c48:	0800b424 	.word	0x0800b424
 8002c4c:	0800b428 	.word	0x0800b428
 8002c50:	0800b440 	.word	0x0800b440
 8002c54:	0800b444 	.word	0x0800b444
 8002c58:	0800b44c 	.word	0x0800b44c
 8002c5c:	0800b3f0 	.word	0x0800b3f0
 8002c60:	0800b450 	.word	0x0800b450
 8002c64:	0800b3ac 	.word	0x0800b3ac
 8002c68:	0800b460 	.word	0x0800b460
 8002c6c:	0800b468 	.word	0x0800b468
 8002c70:	0800b478 	.word	0x0800b478
 8002c74:	0800b480 	.word	0x0800b480
 8002c78:	0800b484 	.word	0x0800b484
 8002c7c:	20000784 	.word	0x20000784
 8002c80:	20000780 	.word	0x20000780

08002c84 <Send_AT_Commands_SendMessager>:

// GUI KET NOI DEN ESP8266

void Send_AT_Commands_SendMessager(char *AT_Commands, char *DataResponse , uint32_t timeout , uint32_t setting , uint32_t count)
{
 8002c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c88:	b08b      	sub	sp, #44	; 0x2c
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	466b      	mov	r3, sp
 8002c96:	461e      	mov	r6, r3
	clearbuffer_UART_ESP();
 8002c98:	f000 fc5a 	bl	8003550 <clearbuffer_UART_ESP>
	last = HAL_GetTick();
 8002c9c:	f001 faae 	bl	80041fc <HAL_GetTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002ca6:	601a      	str	r2, [r3, #0]
	uint32_t Size = 300;
 8002ca8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cac:	61fb      	str	r3, [r7, #28]
	uint32_t Count = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
	ConfigAT = setting;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <Send_AT_Commands_SendMessager+0x15c>)
 8002cb6:	6013      	str	r3, [r2, #0]
	char DataHTTP[Size];
 8002cb8:	69f9      	ldr	r1, [r7, #28]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4688      	mov	r8, r1
 8002cc4:	4699      	mov	r9, r3
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	2300      	movs	r3, #0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	461d      	mov	r5, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	00eb      	lsls	r3, r5, #3
 8002cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cee:	00e2      	lsls	r2, r4, #3
 8002cf0:	1dcb      	adds	r3, r1, #7
 8002cf2:	08db      	lsrs	r3, r3, #3
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	ebad 0d03 	sub.w	sp, sp, r3
 8002cfa:	466b      	mov	r3, sp
 8002cfc:	3300      	adds	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < Size; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	e007      	b.n	8002d16 <Send_AT_Commands_SendMessager+0x92>
	{
		DataHTTP[i] = 0;
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	4413      	add	r3, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < Size; i++)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	3301      	adds	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d8f3      	bhi.n	8002d06 <Send_AT_Commands_SendMessager+0x82>
	}

	// GUI LENH VAO HTTP

	snprintf(DataHTTP, sizeof(DataHTTP),"%s", AT_Commands);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <Send_AT_Commands_SendMessager+0x160>)
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f004 fd52 	bl	80077cc <sniprintf>

	HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 8002d28:	6978      	ldr	r0, [r7, #20]
 8002d2a:	f7fd fa57 	bl	80001dc <strlen>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	6979      	ldr	r1, [r7, #20]
 8002d38:	482b      	ldr	r0, [pc, #172]	; (8002de8 <Send_AT_Commands_SendMessager+0x164>)
 8002d3a:	f003 f80b 	bl	8005d54 <HAL_UART_Transmit>

	//printf("Send AT-Commands Data: %s\r\n", DataHTTP);

	last = HAL_GetTick();
 8002d3e:	f001 fa5d 	bl	80041fc <HAL_GetTick>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002d48:	601a      	str	r2, [r3, #0]
	while(1)
	{

		// CHAY HAM NGAT UART

		if(HAL_GetTick() - last >= timeout)
 8002d4a:	f001 fa57 	bl	80041fc <HAL_GetTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d813      	bhi.n	8002d84 <Send_AT_Commands_SendMessager+0x100>
		{
			Count++;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7fd fa3a 	bl	80001dc <strlen>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	481d      	ldr	r0, [pc, #116]	; (8002de8 <Send_AT_Commands_SendMessager+0x164>)
 8002d74:	f002 ffee 	bl	8005d54 <HAL_UART_Transmit>

			//printf("Send AT-Commands Send Data MQTT: %s\r\n", DataHTTP);

			last = HAL_GetTick();
 8002d78:	f001 fa40 	bl	80041fc <HAL_GetTick>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002d82:	601a      	str	r2, [r3, #0]
		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4819      	ldr	r0, [pc, #100]	; (8002dec <Send_AT_Commands_SendMessager+0x168>)
 8002d88:	f004 fde7 	bl	800795a <strstr>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00e      	beq.n	8002db0 <Send_AT_Commands_SendMessager+0x12c>
		{

			//printf("SEND MQTT OK\r\n");

			clearbuffer_UART_ESP();
 8002d92:	f000 fbdd 	bl	8003550 <clearbuffer_UART_ESP>
			ErrorCode = 0;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <Send_AT_Commands_SendMessager+0x16c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
			CheckConnect = 1;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <Send_AT_Commands_SendMessager+0x170>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
			last = HAL_GetTick();
 8002da2:	f001 fa2b 	bl	80041fc <HAL_GetTick>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002dac:	601a      	str	r2, [r3, #0]
			break;
 8002dae:	e00e      	b.n	8002dce <Send_AT_Commands_SendMessager+0x14a>
		}
		if(Count >= count)
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3c8      	bcc.n	8002d4a <Send_AT_Commands_SendMessager+0xc6>
		{
			//printf("SEND MQTT ERROR\r\n");

			ErrorCode = 1;
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <Send_AT_Commands_SendMessager+0x16c>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
			clearbuffer_UART_ESP();
 8002dbe:	f000 fbc7 	bl	8003550 <clearbuffer_UART_ESP>
			last = HAL_GetTick();
 8002dc2:	f001 fa1b 	bl	80041fc <HAL_GetTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <Send_AT_Commands_SendMessager+0x158>)
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	46b5      	mov	sp, r6
			break;
		}
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	372c      	adds	r7, #44	; 0x2c
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000788 	.word	0x20000788
 8002de0:	20000784 	.word	0x20000784
 8002de4:	0800b494 	.word	0x0800b494
 8002de8:	20000288 	.word	0x20000288
 8002dec:	2000035c 	.word	0x2000035c
 8002df0:	20000780 	.word	0x20000780
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <Send_AT_Commands_ConnectMQTT>:

void Send_AT_Commands_ConnectMQTT(char *AT_Commands, char *DataResponse , uint32_t timeout , uint32_t setting , uint32_t count)
{
 8002df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dfc:	b08b      	sub	sp, #44	; 0x2c
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	466b      	mov	r3, sp
 8002e0a:	461e      	mov	r6, r3
	clearbuffer_UART_ESP();
 8002e0c:	f000 fba0 	bl	8003550 <clearbuffer_UART_ESP>
	last = HAL_GetTick();
 8002e10:	f001 f9f4 	bl	80041fc <HAL_GetTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002e1a:	601a      	str	r2, [r3, #0]
	uint32_t Size = 300;
 8002e1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e20:	61fb      	str	r3, [r7, #28]
	uint32_t Count = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
	ConfigAT = setting;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <Send_AT_Commands_ConnectMQTT+0x160>)
 8002e2a:	6013      	str	r3, [r2, #0]
	char DataHTTP[Size];
 8002e2c:	69f9      	ldr	r1, [r7, #28]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	2300      	movs	r3, #0
 8002e36:	4688      	mov	r8, r1
 8002e38:	4699      	mov	r9, r3
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	2300      	movs	r3, #0
 8002e50:	460c      	mov	r4, r1
 8002e52:	461d      	mov	r5, r3
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	00eb      	lsls	r3, r5, #3
 8002e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e62:	00e2      	lsls	r2, r4, #3
 8002e64:	1dcb      	adds	r3, r1, #7
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8002e6e:	466b      	mov	r3, sp
 8002e70:	3300      	adds	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < Size; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	e007      	b.n	8002e8a <Send_AT_Commands_ConnectMQTT+0x92>
	{
		DataHTTP[i] = 0;
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	4413      	add	r3, r2
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < Size; i++)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	3301      	adds	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d8f3      	bhi.n	8002e7a <Send_AT_Commands_ConnectMQTT+0x82>
	}

	// GUI LENH VAO HTTP

	snprintf(DataHTTP, sizeof(DataHTTP),"%s", AT_Commands);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <Send_AT_Commands_ConnectMQTT+0x164>)
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f004 fc98 	bl	80077cc <sniprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f7fd f99d 	bl	80001dc <strlen>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	482c      	ldr	r0, [pc, #176]	; (8002f60 <Send_AT_Commands_ConnectMQTT+0x168>)
 8002eae:	f002 ff51 	bl	8005d54 <HAL_UART_Transmit>

	//printf("Send AT-Commands Data: %s\r\n", DataHTTP);

	last = HAL_GetTick();
 8002eb2:	f001 f9a3 	bl	80041fc <HAL_GetTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002ebc:	601a      	str	r2, [r3, #0]
	while(1)
	{
		// CHAY HAM NGAT UART

		if(HAL_GetTick() - last >= timeout)
 8002ebe:	f001 f99d 	bl	80041fc <HAL_GetTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d813      	bhi.n	8002ef8 <Send_AT_Commands_ConnectMQTT+0x100>
		{
			Count++;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7fd f980 	bl	80001dc <strlen>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	481e      	ldr	r0, [pc, #120]	; (8002f60 <Send_AT_Commands_ConnectMQTT+0x168>)
 8002ee8:	f002 ff34 	bl	8005d54 <HAL_UART_Transmit>

			//printf("Send AT-Commands Data TimeOut: %s\r\n", DataHTTP);

			last = HAL_GetTick();
 8002eec:	f001 f986 	bl	80041fc <HAL_GetTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002ef6:	601a      	str	r2, [r3, #0]

		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	481a      	ldr	r0, [pc, #104]	; (8002f64 <Send_AT_Commands_ConnectMQTT+0x16c>)
 8002efc:	f004 fd2d 	bl	800795a <strstr>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00e      	beq.n	8002f24 <Send_AT_Commands_ConnectMQTT+0x12c>
		{

			//printf("MQTT Connect OK\r\n");

			clearbuffer_UART_ESP();
 8002f06:	f000 fb23 	bl	8003550 <clearbuffer_UART_ESP>
			ErrorCode = 1;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <Send_AT_Commands_ConnectMQTT+0x170>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
			CheckConnect = 1;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <Send_AT_Commands_ConnectMQTT+0x174>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
			last = HAL_GetTick();
 8002f16:	f001 f971 	bl	80041fc <HAL_GetTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002f20:	601a      	str	r2, [r3, #0]

			break;
 8002f22:	e011      	b.n	8002f48 <Send_AT_Commands_ConnectMQTT+0x150>
		}
		if(Count >= count)
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3c8      	bcc.n	8002ebe <Send_AT_Commands_ConnectMQTT+0xc6>

			//GUI LAI LENH SETTING

			//printf("MQTT Connect ERROR\r\n");

			ErrorCode = 0;
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <Send_AT_Commands_ConnectMQTT+0x170>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
			CheckConnect = 0;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <Send_AT_Commands_ConnectMQTT+0x174>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			clearbuffer_UART_ESP();
 8002f38:	f000 fb0a 	bl	8003550 <clearbuffer_UART_ESP>
			last = HAL_GetTick();
 8002f3c:	f001 f95e 	bl	80041fc <HAL_GetTick>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	46b5      	mov	sp, r6
			break;
		}
	}
}
 8002f4a:	bf00      	nop
 8002f4c:	372c      	adds	r7, #44	; 0x2c
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f54:	20000788 	.word	0x20000788
 8002f58:	20000784 	.word	0x20000784
 8002f5c:	0800b494 	.word	0x0800b494
 8002f60:	20000288 	.word	0x20000288
 8002f64:	2000035c 	.word	0x2000035c
 8002f68:	20000780 	.word	0x20000780
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	// ConfigAT = 0

	if(ConfigAT == 0)
 8002f78:	4b91      	ldr	r3, [pc, #580]	; (80031c0 <HAL_UART_RxCpltCallback+0x250>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10c      	bne.n	8002f9a <HAL_UART_RxCpltCallback+0x2a>
	{
		if(huart -> Instance == USART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a8f      	ldr	r2, [pc, #572]	; (80031c4 <HAL_UART_RxCpltCallback+0x254>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d117      	bne.n	8002fba <HAL_UART_RxCpltCallback+0x4a>
		{
			Received_AT_Commands_ESP();
 8002f8a:	f000 f93d 	bl	8003208 <Received_AT_Commands_ESP>
			HAL_UART_Receive_IT(&huart1,&rx_data1,1);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	498d      	ldr	r1, [pc, #564]	; (80031c8 <HAL_UART_RxCpltCallback+0x258>)
 8002f92:	488e      	ldr	r0, [pc, #568]	; (80031cc <HAL_UART_RxCpltCallback+0x25c>)
 8002f94:	f002 ff61 	bl	8005e5a <HAL_UART_Receive_IT>
 8002f98:	e00f      	b.n	8002fba <HAL_UART_RxCpltCallback+0x4a>
		}
	}
	// ConfigAT = 1

	else if(ConfigAT == 1)
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_UART_RxCpltCallback+0x250>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_RxCpltCallback+0x4a>
	{
		if(huart -> Instance == USART1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <HAL_UART_RxCpltCallback+0x254>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d106      	bne.n	8002fba <HAL_UART_RxCpltCallback+0x4a>
		{
			Received_AT_Commands_ESP_MessagerMQTT();
 8002fac:	f000 f944 	bl	8003238 <Received_AT_Commands_ESP_MessagerMQTT>
			HAL_UART_Receive_IT(&huart1,&rx_data1,1);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4985      	ldr	r1, [pc, #532]	; (80031c8 <HAL_UART_RxCpltCallback+0x258>)
 8002fb4:	4885      	ldr	r0, [pc, #532]	; (80031cc <HAL_UART_RxCpltCallback+0x25c>)
 8002fb6:	f002 ff50 	bl	8005e5a <HAL_UART_Receive_IT>
		}
	}
	uint8_t i;
			if(huart->Instance == USART2) //uart1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a84      	ldr	r2, [pc, #528]	; (80031d0 <HAL_UART_RxCpltCallback+0x260>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 80f9 	bne.w	80031b8 <HAL_UART_RxCpltCallback+0x248>
			{

				if(rx_index2==0) {for (i=0;i<50;i++) rx_buffer2[i] = 0;}
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_UART_RxCpltCallback+0x78>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e006      	b.n	8002fe2 <HAL_UART_RxCpltCallback+0x72>
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	54d1      	strb	r1, [r2, r3]
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b31      	cmp	r3, #49	; 0x31
 8002fe6:	d9f5      	bls.n	8002fd4 <HAL_UART_RxCpltCallback+0x64>
				if(rx_data2[0] != 13)
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b0d      	cmp	r3, #13
 8002fee:	d010      	beq.n	8003012 <HAL_UART_RxCpltCallback+0xa2>
				{
					rx_buffer2[rx_index2++] |= rx_data2[0];
 8002ff0:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	b2d1      	uxtb	r1, r2
 8002ff8:	4a76      	ldr	r2, [pc, #472]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8002ffa:	7011      	strb	r1, [r2, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4a76      	ldr	r2, [pc, #472]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003000:	5c51      	ldrb	r1, [r2, r1]
 8003002:	4a76      	ldr	r2, [pc, #472]	; (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	ea41 0302 	orr.w	r3, r1, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003010:	541a      	strb	r2, [r3, r0]
				}
				switch(rx_data2[0])
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3b61      	subs	r3, #97	; 0x61
 8003018:	2b0a      	cmp	r3, #10
 800301a:	f200 80c7 	bhi.w	80031ac <HAL_UART_RxCpltCallback+0x23c>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_UART_RxCpltCallback+0xb4>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003051 	.word	0x08003051
 8003028:	0800307b 	.word	0x0800307b
 800302c:	080030a5 	.word	0x080030a5
 8003030:	080030c5 	.word	0x080030c5
 8003034:	080030ef 	.word	0x080030ef
 8003038:	08003119 	.word	0x08003119
 800303c:	08003139 	.word	0x08003139
 8003040:	08003163 	.word	0x08003163
 8003044:	080031ad 	.word	0x080031ad
 8003048:	080031ad 	.word	0x080031ad
 800304c:	0800318d 	.word	0x0800318d
				{
					case 'a':
						aFA = atof(rx_buffer2);
 8003050:	4861      	ldr	r0, [pc, #388]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003052:	f003 fd43 	bl	8006adc <atof>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fd79 	bl	8000b54 <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_UART_RxCpltCallback+0x270>)
 8003066:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8003068:	2232      	movs	r2, #50	; 0x32
 800306a:	2100      	movs	r1, #0
 800306c:	485a      	ldr	r0, [pc, #360]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800306e:	f003 fd85 	bl	8006b7c <memset>
						rx_index2 = 0;
 8003072:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
						break;
 8003078:	e099      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'b':
						bFB = atof(rx_buffer2);
 800307a:	4857      	ldr	r0, [pc, #348]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800307c:	f003 fd2e 	bl	8006adc <atof>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd64 	bl	8000b54 <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <HAL_UART_RxCpltCallback+0x274>)
 8003090:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8003092:	2232      	movs	r2, #50	; 0x32
 8003094:	2100      	movs	r1, #0
 8003096:	4850      	ldr	r0, [pc, #320]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003098:	f003 fd70 	bl	8006b7c <memset>
						rx_index2 = 0;
 800309c:	4b4d      	ldr	r3, [pc, #308]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
						break;
 80030a2:	e084      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'c':
						cCycle = atoi(rx_buffer2);
 80030a4:	484c      	ldr	r0, [pc, #304]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80030a6:	f003 fd1c 	bl	8006ae2 <atoi>
 80030aa:	4603      	mov	r3, r0
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_UART_RxCpltCallback+0x278>)
 80030b0:	601a      	str	r2, [r3, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 80030b2:	2232      	movs	r2, #50	; 0x32
 80030b4:	2100      	movs	r1, #0
 80030b6:	4848      	ldr	r0, [pc, #288]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80030b8:	f003 fd60 	bl	8006b7c <memset>
						rx_index2 = 0;
 80030bc:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
						break;
 80030c2:	e074      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'd':
						FAF407 = atof(rx_buffer2);
 80030c4:	4844      	ldr	r0, [pc, #272]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80030c6:	f003 fd09 	bl	8006adc <atof>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fd fd3f 	bl	8000b54 <__aeabi_d2f>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_UART_RxCpltCallback+0x27c>)
 80030da:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 80030dc:	2232      	movs	r2, #50	; 0x32
 80030de:	2100      	movs	r1, #0
 80030e0:	483d      	ldr	r0, [pc, #244]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80030e2:	f003 fd4b 	bl	8006b7c <memset>
						rx_index2 = 0;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
						break;
 80030ec:	e05f      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'e':
						FBF407 = atof(rx_buffer2);
 80030ee:	483a      	ldr	r0, [pc, #232]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80030f0:	f003 fcf4 	bl	8006adc <atof>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fd2a 	bl	8000b54 <__aeabi_d2f>
 8003100:	4603      	mov	r3, r0
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_UART_RxCpltCallback+0x280>)
 8003104:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8003106:	2232      	movs	r2, #50	; 0x32
 8003108:	2100      	movs	r1, #0
 800310a:	4833      	ldr	r0, [pc, #204]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800310c:	f003 fd36 	bl	8006b7c <memset>
						rx_index2 = 0;
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
						break;
 8003116:	e04a      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'f':
						CycleF407 = atoi(rx_buffer2);
 8003118:	482f      	ldr	r0, [pc, #188]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800311a:	f003 fce2 	bl	8006ae2 <atoi>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_UART_RxCpltCallback+0x284>)
 8003124:	601a      	str	r2, [r3, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8003126:	2232      	movs	r2, #50	; 0x32
 8003128:	2100      	movs	r1, #0
 800312a:	482b      	ldr	r0, [pc, #172]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800312c:	f003 fd26 	bl	8006b7c <memset>
						rx_index2 = 0;
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
						break;
 8003136:	e03a      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'g':
						airA = atof(rx_buffer2);
 8003138:	4827      	ldr	r0, [pc, #156]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800313a:	f003 fccf 	bl	8006adc <atof>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f7fd fd05 	bl	8000b54 <__aeabi_d2f>
 800314a:	4603      	mov	r3, r0
 800314c:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <HAL_UART_RxCpltCallback+0x288>)
 800314e:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8003150:	2232      	movs	r2, #50	; 0x32
 8003152:	2100      	movs	r1, #0
 8003154:	4820      	ldr	r0, [pc, #128]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003156:	f003 fd11 	bl	8006b7c <memset>
						rx_index2 = 0;
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
						break;
 8003160:	e025      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'h':
						airB = atof(rx_buffer2);
 8003162:	481d      	ldr	r0, [pc, #116]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003164:	f003 fcba 	bl	8006adc <atof>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f7fd fcf0 	bl	8000b54 <__aeabi_d2f>
 8003174:	4603      	mov	r3, r0
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_UART_RxCpltCallback+0x28c>)
 8003178:	6013      	str	r3, [r2, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 800317a:	2232      	movs	r2, #50	; 0x32
 800317c:	2100      	movs	r1, #0
 800317e:	4816      	ldr	r0, [pc, #88]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003180:	f003 fcfc 	bl	8006b7c <memset>
						rx_index2 = 0;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
						break;
 800318a:	e010      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					case 'k':
						run = atoi(rx_buffer2);
 800318c:	4812      	ldr	r0, [pc, #72]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 800318e:	f003 fca8 	bl	8006ae2 <atoi>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_UART_RxCpltCallback+0x290>)
 8003198:	601a      	str	r2, [r3, #0]
						memset(rx_buffer2, 0, sizeof(rx_buffer2));
 800319a:	2232      	movs	r2, #50	; 0x32
 800319c:	2100      	movs	r1, #0
 800319e:	480e      	ldr	r0, [pc, #56]	; (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 80031a0:	f003 fcec 	bl	8006b7c <memset>
						rx_index2 = 0;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
						break;
 80031aa:	e000      	b.n	80031ae <HAL_UART_RxCpltCallback+0x23e>
					default:
						break;
 80031ac:	bf00      	nop
				}
				HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_data2, 1);
 80031ae:	2201      	movs	r2, #1
 80031b0:	490a      	ldr	r1, [pc, #40]	; (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 80031b2:	4814      	ldr	r0, [pc, #80]	; (8003204 <HAL_UART_RxCpltCallback+0x294>)
 80031b4:	f002 fe51 	bl	8005e5a <HAL_UART_Receive_IT>
			}
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000784 	.word	0x20000784
 80031c4:	40011000 	.word	0x40011000
 80031c8:	20000359 	.word	0x20000359
 80031cc:	20000288 	.word	0x20000288
 80031d0:	40004400 	.word	0x40004400
 80031d4:	2000077a 	.word	0x2000077a
 80031d8:	20000744 	.word	0x20000744
 80031dc:	20000778 	.word	0x20000778
 80031e0:	20000334 	.word	0x20000334
 80031e4:	20000338 	.word	0x20000338
 80031e8:	20000344 	.word	0x20000344
 80031ec:	2000033c 	.word	0x2000033c
 80031f0:	20000340 	.word	0x20000340
 80031f4:	20000348 	.word	0x20000348
 80031f8:	20000350 	.word	0x20000350
 80031fc:	20000354 	.word	0x20000354
 8003200:	2000034c 	.word	0x2000034c
 8003204:	200002d0 	.word	0x200002d0

08003208 <Received_AT_Commands_ESP>:


//

void Received_AT_Commands_ESP(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	rx_buffer1[rx_index1++] = rx_data1;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <Received_AT_Commands_ESP+0x24>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	b2d1      	uxtb	r1, r2
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <Received_AT_Commands_ESP+0x24>)
 8003216:	7011      	strb	r1, [r2, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <Received_AT_Commands_ESP+0x28>)
 800321c:	7819      	ldrb	r1, [r3, #0]
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <Received_AT_Commands_ESP+0x2c>)
 8003220:	5499      	strb	r1, [r3, r2]
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000358 	.word	0x20000358
 8003230:	20000359 	.word	0x20000359
 8003234:	2000035c 	.word	0x2000035c

08003238 <Received_AT_Commands_ESP_MessagerMQTT>:

void Received_AT_Commands_ESP_MessagerMQTT(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0

		if(rx_data1 != '\n')
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d009      	beq.n	800325a <Received_AT_Commands_ESP_MessagerMQTT+0x22>
		{
			ResponseRX[rx_indexResponse++] = rx_data1;
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4933      	ldr	r1, [pc, #204]	; (800331c <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 800324e:	600a      	str	r2, [r1, #0]
 8003250:	4a31      	ldr	r2, [pc, #196]	; (8003318 <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8003252:	7811      	ldrb	r1, [r2, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8003256:	54d1      	strb	r1, [r2, r3]
				last = HAL_GetTick();
			}
			last = HAL_GetTick();
			clearResponse();
		}
}
 8003258:	e059      	b.n	800330e <Received_AT_Commands_ESP_MessagerMQTT+0xd6>
			ResponseRX[rx_indexResponse++] = rx_data1;
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	492e      	ldr	r1, [pc, #184]	; (800331c <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8003262:	600a      	str	r2, [r1, #0]
 8003264:	4a2c      	ldr	r2, [pc, #176]	; (8003318 <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8003266:	7811      	ldrb	r1, [r2, #0]
 8003268:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 800326a:	54d1      	strb	r1, [r2, r3]
			rx_indexResponse = 0;
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
			if(strstr(ResponseRX,"MQTTCONNECTED") != NULL)
 8003272:	492c      	ldr	r1, [pc, #176]	; (8003324 <Received_AT_Commands_ESP_MessagerMQTT+0xec>)
 8003274:	482a      	ldr	r0, [pc, #168]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8003276:	f004 fb70 	bl	800795a <strstr>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <Received_AT_Commands_ESP_MessagerMQTT+0x5c>
				CheckConnect = 1;
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <Received_AT_Commands_ESP_MessagerMQTT+0xf0>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
				last = HAL_GetTick();
 8003286:	f000 ffb9 	bl	80041fc <HAL_GetTick>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e034      	b.n	80032fe <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
			else if(strstr(ResponseRX,"MQTTDISCONNECTED") != NULL)
 8003294:	4926      	ldr	r1, [pc, #152]	; (8003330 <Received_AT_Commands_ESP_MessagerMQTT+0xf8>)
 8003296:	4822      	ldr	r0, [pc, #136]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8003298:	f004 fb5f 	bl	800795a <strstr>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <Received_AT_Commands_ESP_MessagerMQTT+0x7e>
				CheckConnect = 0;
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <Received_AT_Commands_ESP_MessagerMQTT+0xf0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
				last = HAL_GetTick();
 80032a8:	f000 ffa8 	bl	80041fc <HAL_GetTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e023      	b.n	80032fe <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
			else if(strstr(ResponseRX,"+MQTTSUBRECV") != NULL)
 80032b6:	491f      	ldr	r1, [pc, #124]	; (8003334 <Received_AT_Commands_ESP_MessagerMQTT+0xfc>)
 80032b8:	4819      	ldr	r0, [pc, #100]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 80032ba:	f004 fb4e 	bl	800795a <strstr>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
				DataMQTT = strtok(ResponseRX,",");
 80032c4:	491c      	ldr	r1, [pc, #112]	; (8003338 <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 80032c6:	4816      	ldr	r0, [pc, #88]	; (8003320 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 80032c8:	f005 f972 	bl	80085b0 <strtok>
 80032cc:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,",");
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 80032d0:	2000      	movs	r0, #0
 80032d2:	f005 f96d 	bl	80085b0 <strtok>
 80032d6:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,",");
 80032d8:	4917      	ldr	r1, [pc, #92]	; (8003338 <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 80032da:	2000      	movs	r0, #0
 80032dc:	f005 f968 	bl	80085b0 <strtok>
 80032e0:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,"\n");
 80032e2:	4916      	ldr	r1, [pc, #88]	; (800333c <Received_AT_Commands_ESP_MessagerMQTT+0x104>)
 80032e4:	2000      	movs	r0, #0
 80032e6:	f005 f963 	bl	80085b0 <strtok>
 80032ea:	6078      	str	r0, [r7, #4]
				ParseJson(DataMQTT);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f827 	bl	8003340 <ParseJson>
				last = HAL_GetTick();
 80032f2:	f000 ff83 	bl	80041fc <HAL_GetTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 80032fc:	601a      	str	r2, [r3, #0]
			last = HAL_GetTick();
 80032fe:	f000 ff7d 	bl	80041fc <HAL_GetTick>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8003308:	601a      	str	r2, [r3, #0]
			clearResponse();
 800330a:	f000 f93f 	bl	800358c <clearResponse>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000359 	.word	0x20000359
 800331c:	2000077c 	.word	0x2000077c
 8003320:	20000550 	.word	0x20000550
 8003324:	0800b498 	.word	0x0800b498
 8003328:	2000000c 	.word	0x2000000c
 800332c:	20000788 	.word	0x20000788
 8003330:	0800b4a8 	.word	0x0800b4a8
 8003334:	0800b4bc 	.word	0x0800b4bc
 8003338:	0800b4cc 	.word	0x0800b4cc
 800333c:	0800b4d0 	.word	0x0800b4d0

08003340 <ParseJson>:

void ParseJson(char *DataMQTT)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	str_json = cJSON_Parse(DataMQTT);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fe fcfd 	bl	8001d48 <cJSON_Parse>
 800334e:	4603      	mov	r3, r0
 8003350:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <ParseJson+0x1b8>)
 8003352:	6013      	str	r3, [r2, #0]
	if (!str_json)
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <ParseJson+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80c8 	beq.w	80034ee <ParseJson+0x1ae>
	}
	else
	{
		// JSON OK
		//
			str_SetFA = cJSON_GetObjectItem(str_json, "SetFA");
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <ParseJson+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4966      	ldr	r1, [pc, #408]	; (80034fc <ParseJson+0x1bc>)
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fff4 	bl	8002352 <cJSON_GetObjectItem>
 800336a:	4603      	mov	r3, r0
 800336c:	4a64      	ldr	r2, [pc, #400]	; (8003500 <ParseJson+0x1c0>)
 800336e:	6013      	str	r3, [r2, #0]
	        if (str_SetFA != NULL)
 8003370:	4b63      	ldr	r3, [pc, #396]	; (8003500 <ParseJson+0x1c0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <ParseJson+0x46>
	        {
	            printf("%s""a\r\n\n", str_SetFA->valuestring);
 8003378:	4b61      	ldr	r3, [pc, #388]	; (8003500 <ParseJson+0x1c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	4619      	mov	r1, r3
 8003380:	4860      	ldr	r0, [pc, #384]	; (8003504 <ParseJson+0x1c4>)
 8003382:	f004 f93f 	bl	8007604 <iprintf>
	        }
			str_SetFB = cJSON_GetObjectItem(str_json, "SetFB");
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <ParseJson+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	495f      	ldr	r1, [pc, #380]	; (8003508 <ParseJson+0x1c8>)
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ffe0 	bl	8002352 <cJSON_GetObjectItem>
 8003392:	4603      	mov	r3, r0
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <ParseJson+0x1cc>)
 8003396:	6013      	str	r3, [r2, #0]
	        if (str_SetFB != NULL)
 8003398:	4b5c      	ldr	r3, [pc, #368]	; (800350c <ParseJson+0x1cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <ParseJson+0x6e>
	        {
	            printf("%s""b\r\n", str_SetFB->valuestring);
 80033a0:	4b5a      	ldr	r3, [pc, #360]	; (800350c <ParseJson+0x1cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4859      	ldr	r0, [pc, #356]	; (8003510 <ParseJson+0x1d0>)
 80033aa:	f004 f92b 	bl	8007604 <iprintf>
	        }

	    //
	        str_SetairA = cJSON_GetObjectItem(str_json, "SetairA");
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <ParseJson+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4958      	ldr	r1, [pc, #352]	; (8003514 <ParseJson+0x1d4>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe ffcc 	bl	8002352 <cJSON_GetObjectItem>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a56      	ldr	r2, [pc, #344]	; (8003518 <ParseJson+0x1d8>)
 80033be:	6013      	str	r3, [r2, #0]
	        if (str_SetairA != NULL)
 80033c0:	4b55      	ldr	r3, [pc, #340]	; (8003518 <ParseJson+0x1d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <ParseJson+0xa6>
	        {
	            airA=atof(str_SetairA->valuestring);
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <ParseJson+0x1d8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fb84 	bl	8006adc <atof>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fbba 	bl	8000b54 <__aeabi_d2f>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a4e      	ldr	r2, [pc, #312]	; (800351c <ParseJson+0x1dc>)
 80033e4:	6013      	str	r3, [r2, #0]
	        }
	        str_SetairB = cJSON_GetObjectItem(str_json, "SetairB");
 80033e6:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <ParseJson+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	494d      	ldr	r1, [pc, #308]	; (8003520 <ParseJson+0x1e0>)
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe ffb0 	bl	8002352 <cJSON_GetObjectItem>
 80033f2:	4603      	mov	r3, r0
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <ParseJson+0x1e4>)
 80033f6:	6013      	str	r3, [r2, #0]
	        if (str_SetairB != NULL)
 80033f8:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <ParseJson+0x1e4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <ParseJson+0xde>
	        {
	        	airB=atof(str_SetairB->valuestring);
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <ParseJson+0x1e4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fb68 	bl	8006adc <atof>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f7fd fb9e 	bl	8000b54 <__aeabi_d2f>
 8003418:	4603      	mov	r3, r0
 800341a:	4a43      	ldr	r2, [pc, #268]	; (8003528 <ParseJson+0x1e8>)
 800341c:	6013      	str	r3, [r2, #0]
	        }

	    //
			str_SetC = cJSON_GetObjectItem(str_json, "SetC");
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <ParseJson+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4942      	ldr	r1, [pc, #264]	; (800352c <ParseJson+0x1ec>)
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe ff94 	bl	8002352 <cJSON_GetObjectItem>
 800342a:	4603      	mov	r3, r0
 800342c:	4a40      	ldr	r2, [pc, #256]	; (8003530 <ParseJson+0x1f0>)
 800342e:	6013      	str	r3, [r2, #0]
	        if (str_SetC != NULL)
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <ParseJson+0x1f0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <ParseJson+0x106>
	        {
	            printf("%s""f\r\n", str_SetC->valuestring);
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <ParseJson+0x1f0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	4619      	mov	r1, r3
 8003440:	483c      	ldr	r0, [pc, #240]	; (8003534 <ParseJson+0x1f4>)
 8003442:	f004 f8df 	bl	8007604 <iprintf>
	        }



	        str_ON = cJSON_GetObjectItem(str_json, "ON");
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <ParseJson+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	493b      	ldr	r1, [pc, #236]	; (8003538 <ParseJson+0x1f8>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe ff80 	bl	8002352 <cJSON_GetObjectItem>
 8003452:	4603      	mov	r3, r0
 8003454:	4a39      	ldr	r2, [pc, #228]	; (800353c <ParseJson+0x1fc>)
 8003456:	6013      	str	r3, [r2, #0]

	        if (str_ON->type == cJSON_String)
 8003458:	4b38      	ldr	r3, [pc, #224]	; (800353c <ParseJson+0x1fc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b10      	cmp	r3, #16
 8003460:	d13f      	bne.n	80034e2 <ParseJson+0x1a2>
	        {

	        	if(strstr(str_ON->valuestring,"1") != NULL)
 8003462:	4b36      	ldr	r3, [pc, #216]	; (800353c <ParseJson+0x1fc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2131      	movs	r1, #49	; 0x31
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fa54 	bl	8007918 <strchr>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <ParseJson+0x162>
	        	{

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	4831      	ldr	r0, [pc, #196]	; (8003540 <ParseJson+0x200>)
 800347c:	f001 fdbe 	bl	8004ffc <HAL_GPIO_WritePin>
				ON = atoi(str_ON->valuestring);
 8003480:	4b2e      	ldr	r3, [pc, #184]	; (800353c <ParseJson+0x1fc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fb2b 	bl	8006ae2 <atoi>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <ParseJson+0x204>)
 8003492:	601a      	str	r2, [r3, #0]
				if(ON==1)
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <ParseJson+0x204>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <ParseJson+0x162>
				{
					printf("r\r\n");
 800349c:	482a      	ldr	r0, [pc, #168]	; (8003548 <ParseJson+0x208>)
 800349e:	f004 f937 	bl	8007710 <puts>
				}
			}

			if(strstr(str_ON->valuestring,"0") != NULL)
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <ParseJson+0x1fc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2130      	movs	r1, #48	; 0x30
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 fa34 	bl	8007918 <strchr>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d015      	beq.n	80034e2 <ParseJson+0x1a2>
			{

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80034b6:	2201      	movs	r2, #1
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	4821      	ldr	r0, [pc, #132]	; (8003540 <ParseJson+0x200>)
 80034bc:	f001 fd9e 	bl	8004ffc <HAL_GPIO_WritePin>
				ON = atoi(str_ON->valuestring);
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <ParseJson+0x1fc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fb0b 	bl	8006ae2 <atoi>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <ParseJson+0x204>)
 80034d2:	601a      	str	r2, [r3, #0]
				if(ON==0)
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <ParseJson+0x204>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <ParseJson+0x1a2>
				{
					printf("e\r\n");
 80034dc:	481b      	ldr	r0, [pc, #108]	; (800354c <ParseJson+0x20c>)
 80034de:	f004 f917 	bl	8007710 <puts>
				}
			}
		}

			cJSON_Delete(str_json);
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <ParseJson+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd ff32 	bl	8001350 <cJSON_Delete>
 80034ec:	e000      	b.n	80034f0 <ParseJson+0x1b0>
		return;
 80034ee:	bf00      	nop
	}
}
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000318 	.word	0x20000318
 80034fc:	0800b4d4 	.word	0x0800b4d4
 8003500:	20000320 	.word	0x20000320
 8003504:	0800b4dc 	.word	0x0800b4dc
 8003508:	0800b4e4 	.word	0x0800b4e4
 800350c:	20000328 	.word	0x20000328
 8003510:	0800b4ec 	.word	0x0800b4ec
 8003514:	0800b4f4 	.word	0x0800b4f4
 8003518:	20000324 	.word	0x20000324
 800351c:	20000350 	.word	0x20000350
 8003520:	0800b4fc 	.word	0x0800b4fc
 8003524:	2000032c 	.word	0x2000032c
 8003528:	20000354 	.word	0x20000354
 800352c:	0800b504 	.word	0x0800b504
 8003530:	20000330 	.word	0x20000330
 8003534:	0800b50c 	.word	0x0800b50c
 8003538:	0800b514 	.word	0x0800b514
 800353c:	2000031c 	.word	0x2000031c
 8003540:	40021000 	.word	0x40021000
 8003544:	2000078c 	.word	0x2000078c
 8003548:	0800b518 	.word	0x0800b518
 800354c:	0800b51c 	.word	0x0800b51c

08003550 <clearbuffer_UART_ESP>:


void clearbuffer_UART_ESP(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 500 ; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e007      	b.n	800356c <clearbuffer_UART_ESP+0x1c>
	{
		rx_buffer1[i] = 0;
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <clearbuffer_UART_ESP+0x34>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 500 ; i++)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3301      	adds	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003572:	dbf3      	blt.n	800355c <clearbuffer_UART_ESP+0xc>
	}
	rx_index1 = 0;
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <clearbuffer_UART_ESP+0x38>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	2000035c 	.word	0x2000035c
 8003588:	20000358 	.word	0x20000358

0800358c <clearResponse>:


void clearResponse(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 500; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e007      	b.n	80035a8 <clearResponse+0x1c>
	{
		ResponseRX[i] = 0;
 8003598:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <clearResponse+0x34>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 500; i++)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3301      	adds	r3, #1
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035ae:	dbf3      	blt.n	8003598 <clearResponse+0xc>
	}
	rx_indexResponse = 0;
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <clearResponse+0x38>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000550 	.word	0x20000550
 80035c4:	2000077c 	.word	0x2000077c

080035c8 <Send_AT_Commands_Setting>:


void Send_AT_Commands_Setting(char *AT_Commands, char *DataResponse, uint32_t timesend , uint32_t setting)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b092      	sub	sp, #72	; 0x48
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	last = HAL_GetTick();
 80035d6:	f000 fe11 	bl	80041fc <HAL_GetTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <Send_AT_Commands_Setting+0xcc>)
 80035e0:	601a      	str	r2, [r3, #0]
	ConfigAT = setting;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <Send_AT_Commands_Setting+0xd0>)
 80035e6:	6013      	str	r3, [r2, #0]
	char DataSendAT[50];
	for(int i = 0 ; i < 50; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	e008      	b.n	8003600 <Send_AT_Commands_Setting+0x38>
	{
		DataSendAT[i] = 0;
 80035ee:	f107 0210 	add.w	r2, r7, #16
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	4413      	add	r3, r2
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 50; i++)
 80035fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fc:	3301      	adds	r3, #1
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	2b31      	cmp	r3, #49	; 0x31
 8003604:	ddf3      	ble.n	80035ee <Send_AT_Commands_Setting+0x26>
	}

	snprintf(DataSendAT, sizeof(DataSendAT),"%s\r\n", AT_Commands);
 8003606:	f107 0010 	add.w	r0, r7, #16
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <Send_AT_Commands_Setting+0xd4>)
 800360e:	2132      	movs	r1, #50	; 0x32
 8003610:	f004 f8dc 	bl	80077cc <sniprintf>

	// GUI DU LIEU TU ESP8266 QUA CONG COM 1 UART1

	HAL_UART_Transmit(&huart1,(uint8_t *)&DataSendAT,strlen(DataSendAT),1000);
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc fddf 	bl	80001dc <strlen>
 800361e:	4603      	mov	r3, r0
 8003620:	b29a      	uxth	r2, r3
 8003622:	f107 0110 	add.w	r1, r7, #16
 8003626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800362a:	481d      	ldr	r0, [pc, #116]	; (80036a0 <Send_AT_Commands_Setting+0xd8>)
 800362c:	f002 fb92 	bl	8005d54 <HAL_UART_Transmit>

	//printf("Send AT-Commands Setting: %s\r\n", DataSendAT);

	// DUNG DOI PHAN HOI, DOI LAU QUA THI HOI TIEP(THONG QUA HAM NGAT UART)

	last = HAL_GetTick();
 8003630:	f000 fde4 	bl	80041fc <HAL_GetTick>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <Send_AT_Commands_Setting+0xcc>)
 800363a:	601a      	str	r2, [r3, #0]
	while(1)
	{

		// QUA 5S THI GUI LAI LENH CU, OK THI THOI

		if(HAL_GetTick() - last >= timesend)
 800363c:	f000 fdde 	bl	80041fc <HAL_GetTick>
 8003640:	4603      	mov	r3, r0
 8003642:	4a14      	ldr	r2, [pc, #80]	; (8003694 <Send_AT_Commands_Setting+0xcc>)
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d813      	bhi.n	8003676 <Send_AT_Commands_Setting+0xae>
		{
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataSendAT,strlen(DataSendAT),1000);
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc fdc2 	bl	80001dc <strlen>
 8003658:	4603      	mov	r3, r0
 800365a:	b29a      	uxth	r2, r3
 800365c:	f107 0110 	add.w	r1, r7, #16
 8003660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <Send_AT_Commands_Setting+0xd8>)
 8003666:	f002 fb75 	bl	8005d54 <HAL_UART_Transmit>

			//printf("Send AT-Commands Setting TimeSend: %s\r\n", DataSendAT);
			last = HAL_GetTick();
 800366a:	f000 fdc7 	bl	80041fc <HAL_GetTick>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <Send_AT_Commands_Setting+0xcc>)
 8003674:	601a      	str	r2, [r3, #0]
		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	480a      	ldr	r0, [pc, #40]	; (80036a4 <Send_AT_Commands_Setting+0xdc>)
 800367a:	f004 f96e 	bl	800795a <strstr>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0db      	beq.n	800363c <Send_AT_Commands_Setting+0x74>
		{

			//printf("Reponse Setting: %s\r\n",DataResponse);

			clearbuffer_UART_ESP();
 8003684:	f7ff ff64 	bl	8003550 <clearbuffer_UART_ESP>
			break;
 8003688:	bf00      	nop
		}
	}
}
 800368a:	bf00      	nop
 800368c:	3748      	adds	r7, #72	; 0x48
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000788 	.word	0x20000788
 8003698:	20000784 	.word	0x20000784
 800369c:	0800b520 	.word	0x0800b520
 80036a0:	20000288 	.word	0x20000288
 80036a4:	2000035c 	.word	0x2000035c

080036a8 <SettingESP>:


// HAM SETTING DATA

void SettingESP(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0

	// RESET ESP8266

	Send_AT_Commands_Setting("AT+RST\r\n", "OK", 10000 , 0);
 80036ac:	2300      	movs	r3, #0
 80036ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80036b2:	4922      	ldr	r1, [pc, #136]	; (800373c <SettingESP+0x94>)
 80036b4:	4822      	ldr	r0, [pc, #136]	; (8003740 <SettingESP+0x98>)
 80036b6:	f7ff ff87 	bl	80035c8 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 80036ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80036be:	f000 fda7 	bl	8004210 <HAL_Delay>
	//Send_AT_Commands_Setting("AT+CWQAP\r\n", "WIFI DISCONNECT\r\n\r\nOK" , 2000, 0);
	//HAL_Delay(3000);

	// ESP CO HOAT DONG KHONG

	Send_AT_Commands_Setting("AT\r\n", "OK", 300, 0);
 80036c2:	2300      	movs	r3, #0
 80036c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036c8:	491c      	ldr	r1, [pc, #112]	; (800373c <SettingESP+0x94>)
 80036ca:	481e      	ldr	r0, [pc, #120]	; (8003744 <SettingESP+0x9c>)
 80036cc:	f7ff ff7c 	bl	80035c8 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 80036d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80036d4:	f000 fd9c 	bl	8004210 <HAL_Delay>

	// TAT KH CAN PHAN HOI

	Send_AT_Commands_Setting("ATE0\r\n", "OK" , 2000, 0);
 80036d8:	2300      	movs	r3, #0
 80036da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80036de:	4917      	ldr	r1, [pc, #92]	; (800373c <SettingESP+0x94>)
 80036e0:	4819      	ldr	r0, [pc, #100]	; (8003748 <SettingESP+0xa0>)
 80036e2:	f7ff ff71 	bl	80035c8 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 80036e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80036ea:	f000 fd91 	bl	8004210 <HAL_Delay>

	// CAI DAT CHE DO HOAT DONG 1,1

	Send_AT_Commands_Setting("AT+CWMODE=1,1\r\n", "OK", 2000, 0);
 80036ee:	2300      	movs	r3, #0
 80036f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80036f4:	4911      	ldr	r1, [pc, #68]	; (800373c <SettingESP+0x94>)
 80036f6:	4815      	ldr	r0, [pc, #84]	; (800374c <SettingESP+0xa4>)
 80036f8:	f7ff ff66 	bl	80035c8 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 80036fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003700:	f000 fd86 	bl	8004210 <HAL_Delay>

	// WIFI CAN KET NOI

	Send_AT_Commands_Setting("AT+CWJAP=\"HOPELESS\",\"nhatnguyeniot\"\r\n", "WIFI CONNECTED", 10000, 0);
 8003704:	2300      	movs	r3, #0
 8003706:	f242 7210 	movw	r2, #10000	; 0x2710
 800370a:	4911      	ldr	r1, [pc, #68]	; (8003750 <SettingESP+0xa8>)
 800370c:	4811      	ldr	r0, [pc, #68]	; (8003754 <SettingESP+0xac>)
 800370e:	f7ff ff5b 	bl	80035c8 <Send_AT_Commands_Setting>

	// \"user name\",\"pass"   ( \"HOPELESS\",\"nhatnguyeniot\")

	HAL_Delay(3000);
 8003712:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003716:	f000 fd7b 	bl	8004210 <HAL_Delay>
	Send_AT_Commands_Setting("AT+CIPMUX=0\r\n", "OK", 2000 , 0);
 800371a:	2300      	movs	r3, #0
 800371c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003720:	4906      	ldr	r1, [pc, #24]	; (800373c <SettingESP+0x94>)
 8003722:	480d      	ldr	r0, [pc, #52]	; (8003758 <SettingESP+0xb0>)
 8003724:	f7ff ff50 	bl	80035c8 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8003728:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800372c:	f000 fd70 	bl	8004210 <HAL_Delay>
	ErrorCode = 0;
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <SettingESP+0xb4>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0800b480 	.word	0x0800b480
 8003740:	0800b528 	.word	0x0800b528
 8003744:	0800b534 	.word	0x0800b534
 8003748:	0800b53c 	.word	0x0800b53c
 800374c:	0800b544 	.word	0x0800b544
 8003750:	0800b554 	.word	0x0800b554
 8003754:	0800b564 	.word	0x0800b564
 8003758:	0800b58c 	.word	0x0800b58c
 800375c:	20000780 	.word	0x20000780

08003760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8003766:	f000 fce5 	bl	8004134 <HAL_Init>
	SystemClock_Config();
 800376a:	f000 f893 	bl	8003894 <SystemClock_Config>
	MX_GPIO_Init();
 800376e:	f000 f98b 	bl	8003a88 <MX_GPIO_Init>
	MX_UART4_Init();
 8003772:	f000 f90b 	bl	800398c <MX_UART4_Init>
	MX_USART1_UART_Init();
 8003776:	f000 f933 	bl	80039e0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800377a:	f000 f95b 	bl	8003a34 <MX_USART2_UART_Init>
	MX_DAC_Init();
 800377e:	f000 f8d1 	bl	8003924 <MX_DAC_Init>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8003782:	2100      	movs	r1, #0
 8003784:	4833      	ldr	r0, [pc, #204]	; (8003854 <main+0xf4>)
 8003786:	f000 fed3 	bl	8004530 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800378a:	2110      	movs	r1, #16
 800378c:	4831      	ldr	r0, [pc, #196]	; (8003854 <main+0xf4>)
 800378e:	f000 fecf 	bl	8004530 <HAL_DAC_Start>
	HAL_Delay(1200);
 8003792:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003796:	f000 fd3b 	bl	8004210 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, &rx_data1, 1);
 800379a:	2201      	movs	r2, #1
 800379c:	492e      	ldr	r1, [pc, #184]	; (8003858 <main+0xf8>)
 800379e:	482f      	ldr	r0, [pc, #188]	; (800385c <main+0xfc>)
 80037a0:	f002 fb5b 	bl	8005e5a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_data2, 1);
 80037a4:	2201      	movs	r2, #1
 80037a6:	492e      	ldr	r1, [pc, #184]	; (8003860 <main+0x100>)
 80037a8:	482e      	ldr	r0, [pc, #184]	; (8003864 <main+0x104>)
 80037aa:	f002 fb56 	bl	8005e5a <HAL_UART_Receive_IT>
	HAL_Delay(3000);
 80037ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037b2:	f000 fd2d 	bl	8004210 <HAL_Delay>
	SettingESP();
 80037b6:	f7ff ff77 	bl	80036a8 <SettingESP>
	HAL_Delay(3000);
 80037ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037be:	f000 fd27 	bl	8004210 <HAL_Delay>
	ConnectMQTT(mqtt_server , mqtt_port , mqtt_user , mqtt_pass, mqtt_sub , mqtt_pub);
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <main+0x108>)
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <main+0x10c>)
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	4b29      	ldr	r3, [pc, #164]	; (8003870 <main+0x110>)
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <main+0x114>)
 80037d0:	681d      	ldr	r5, [r3, #0]
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <main+0x118>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <main+0x11c>)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462b      	mov	r3, r5
 80037e0:	4622      	mov	r2, r4
 80037e2:	f7ff f88b 	bl	80028fc <ConnectMQTT>
	last = HAL_GetTick();
 80037e6:	f000 fd09 	bl	80041fc <HAL_GetTick>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <main+0x120>)
 80037f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  SendMQTT();
 80037f2:	f7fe fdcf 	bl	8002394 <SendMQTT>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, airA*4095/500);
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <main+0x124>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4923      	ldr	r1, [pc, #140]	; (8003888 <main+0x128>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd f9f9 	bl	8000bf4 <__aeabi_fmul>
 8003802:	4603      	mov	r3, r0
 8003804:	4921      	ldr	r1, [pc, #132]	; (800388c <main+0x12c>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd faa8 	bl	8000d5c <__aeabi_fdiv>
 800380c:	4603      	mov	r3, r0
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fb40 	bl	8000e94 <__aeabi_f2uiz>
 8003814:	4603      	mov	r3, r0
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <main+0xf4>)
 800381c:	f000 ff40 	bl	80046a0 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, airB*4095/500);
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <main+0x130>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4918      	ldr	r1, [pc, #96]	; (8003888 <main+0x128>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd f9e4 	bl	8000bf4 <__aeabi_fmul>
 800382c:	4603      	mov	r3, r0
 800382e:	4917      	ldr	r1, [pc, #92]	; (800388c <main+0x12c>)
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fa93 	bl	8000d5c <__aeabi_fdiv>
 8003836:	4603      	mov	r3, r0
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fb2b 	bl	8000e94 <__aeabi_f2uiz>
 800383e:	4603      	mov	r3, r0
 8003840:	2200      	movs	r2, #0
 8003842:	2110      	movs	r1, #16
 8003844:	4803      	ldr	r0, [pc, #12]	; (8003854 <main+0xf4>)
 8003846:	f000 ff2b 	bl	80046a0 <HAL_DAC_SetValue>
    /* USER CODE BEGIN 3 */
	  HAL_Delay(300);
 800384a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800384e:	f000 fcdf 	bl	8004210 <HAL_Delay>
	  SendMQTT();
 8003852:	e7ce      	b.n	80037f2 <main+0x92>
 8003854:	2000022c 	.word	0x2000022c
 8003858:	20000359 	.word	0x20000359
 800385c:	20000288 	.word	0x20000288
 8003860:	20000778 	.word	0x20000778
 8003864:	200002d0 	.word	0x200002d0
 8003868:	20000010 	.word	0x20000010
 800386c:	20000014 	.word	0x20000014
 8003870:	20000018 	.word	0x20000018
 8003874:	2000001c 	.word	0x2000001c
 8003878:	20000020 	.word	0x20000020
 800387c:	20000024 	.word	0x20000024
 8003880:	20000788 	.word	0x20000788
 8003884:	20000350 	.word	0x20000350
 8003888:	457ff000 	.word	0x457ff000
 800388c:	43fa0000 	.word	0x43fa0000
 8003890:	20000354 	.word	0x20000354

08003894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b092      	sub	sp, #72	; 0x48
 8003898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800389a:	f107 0318 	add.w	r3, r7, #24
 800389e:	2230      	movs	r2, #48	; 0x30
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 f96a 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038b6:	2302      	movs	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038be:	2310      	movs	r3, #16
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c2:	2302      	movs	r3, #2
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038c6:	2300      	movs	r3, #0
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80038ca:	230d      	movs	r3, #13
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80038ce:	23c3      	movs	r3, #195	; 0xc3
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d2:	2302      	movs	r3, #2
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038d6:	2304      	movs	r3, #4
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038da:	f107 0318 	add.w	r3, r7, #24
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fbbe 	bl	8005060 <HAL_RCC_OscConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80038ea:	f000 f999 	bl	8003c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ee:	230f      	movs	r3, #15
 80038f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f2:	2302      	movs	r3, #2
 80038f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003906:	1d3b      	adds	r3, r7, #4
 8003908:	2103      	movs	r1, #3
 800390a:	4618      	mov	r0, r3
 800390c:	f001 feaa 	bl	8005664 <HAL_RCC_ClockConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003916:	f000 f983 	bl	8003c20 <Error_Handler>
  }
}
 800391a:	bf00      	nop
 800391c:	3748      	adds	r7, #72	; 0x48
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800392a:	463b      	mov	r3, r7
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <MX_DAC_Init+0x60>)
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <MX_DAC_Init+0x64>)
 8003936:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003938:	4812      	ldr	r0, [pc, #72]	; (8003984 <MX_DAC_Init+0x60>)
 800393a:	f000 fdc9 	bl	80044d0 <HAL_DAC_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003944:	f000 f96c 	bl	8003c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003950:	463b      	mov	r3, r7
 8003952:	2200      	movs	r2, #0
 8003954:	4619      	mov	r1, r3
 8003956:	480b      	ldr	r0, [pc, #44]	; (8003984 <MX_DAC_Init+0x60>)
 8003958:	f000 fefa 	bl	8004750 <HAL_DAC_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003962:	f000 f95d 	bl	8003c20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	2210      	movs	r2, #16
 800396a:	4619      	mov	r1, r3
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <MX_DAC_Init+0x60>)
 800396e:	f000 feef 	bl	8004750 <HAL_DAC_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003978:	f000 f952 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000022c 	.word	0x2000022c
 8003988:	40007400 	.word	0x40007400

0800398c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_UART4_Init+0x4c>)
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <MX_UART4_Init+0x50>)
 8003994:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <MX_UART4_Init+0x4c>)
 8003998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800399c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039b2:	220c      	movs	r2, #12
 80039b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <MX_UART4_Init+0x4c>)
 80039c4:	f002 f8f2 	bl	8005bac <HAL_UART_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80039ce:	f000 f927 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000240 	.word	0x20000240
 80039dc:	40004c00 	.word	0x40004c00

080039e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 80039e6:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <MX_USART1_UART_Init+0x50>)
 80039e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 80039ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 8003a06:	220c      	movs	r2, #12
 8003a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <MX_USART1_UART_Init+0x4c>)
 8003a18:	f002 f8c8 	bl	8005bac <HAL_UART_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a22:	f000 f8fd 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000288 	.word	0x20000288
 8003a30:	40011000 	.word	0x40011000

08003a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <MX_USART2_UART_Init+0x50>)
 8003a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_USART2_UART_Init+0x4c>)
 8003a6c:	f002 f89e 	bl	8005bac <HAL_UART_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a76:	f000 f8d3 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200002d0 	.word	0x200002d0
 8003a84:	40004400 	.word	0x40004400

08003a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003ac4:	f043 0304 	orr.w	r3, r3, #4
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	4b4b      	ldr	r3, [pc, #300]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a4a      	ldr	r2, [pc, #296]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b44      	ldr	r3, [pc, #272]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a43      	ldr	r2, [pc, #268]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b41      	ldr	r3, [pc, #260]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a3c      	ldr	r2, [pc, #240]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a35      	ldr	r2, [pc, #212]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b34:	f043 0308 	orr.w	r3, r3, #8
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <MX_GPIO_Init+0x180>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8003b46:	2201      	movs	r2, #1
 8003b48:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8003b4c:	482f      	ldr	r0, [pc, #188]	; (8003c0c <MX_GPIO_Init+0x184>)
 8003b4e:	f001 fa55 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b58:	482c      	ldr	r0, [pc, #176]	; (8003c0c <MX_GPIO_Init+0x184>)
 8003b5a:	f001 fa4f 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003b5e:	f24f 037f 	movw	r3, #61567	; 0xf07f
 8003b62:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b64:	2303      	movs	r3, #3
 8003b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4826      	ldr	r0, [pc, #152]	; (8003c0c <MX_GPIO_Init+0x184>)
 8003b74:	f000 ff20 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003b78:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003b7c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4820      	ldr	r0, [pc, #128]	; (8003c10 <MX_GPIO_Init+0x188>)
 8003b8e:	f000 ff13 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8003b92:	f649 13c0 	movw	r3, #39360	; 0x99c0
 8003b96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	481b      	ldr	r0, [pc, #108]	; (8003c14 <MX_GPIO_Init+0x18c>)
 8003ba8:	f000 ff06 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4815      	ldr	r0, [pc, #84]	; (8003c18 <MX_GPIO_Init+0x190>)
 8003bc2:	f000 fef9 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003bc6:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8003bca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480b      	ldr	r0, [pc, #44]	; (8003c0c <MX_GPIO_Init+0x184>)
 8003be0:	f000 feea 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bea:	2303      	movs	r3, #3
 8003bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <MX_GPIO_Init+0x194>)
 8003bfa:	f000 fedd 	bl	80049b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bfe:	bf00      	nop
 8003c00:	3730      	adds	r7, #48	; 0x30
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40020800 	.word	0x40020800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020c00 	.word	0x40020c00

08003c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c24:	b672      	cpsid	i
}
 8003c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c28:	e7fe      	b.n	8003c28 <Error_Handler+0x8>

08003c2a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_MspInit+0x48>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <HAL_MspInit+0x48>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	; 0x44
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_MspInit+0x48>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_MspInit+0x48>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_MspInit+0x48>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_MspInit+0x48>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	40023800 	.word	0x40023800

08003c8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_DAC_MspInit+0x8c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12f      	bne.n	8003d0e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_DAC_MspInit+0x90>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ce6:	2330      	movs	r3, #48	; 0x30
 8003ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cea:	2303      	movs	r3, #3
 8003cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4809      	ldr	r0, [pc, #36]	; (8003d20 <HAL_DAC_MspInit+0x94>)
 8003cfa:	f000 fe5d 	bl	80049b8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	2036      	movs	r0, #54	; 0x36
 8003d04:	f000 fb94 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d08:	2036      	movs	r0, #54	; 0x36
 8003d0a:	f000 fbbd 	bl	8004488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003d0e:	bf00      	nop
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40007400 	.word	0x40007400
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020000 	.word	0x40020000

08003d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	; 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <HAL_UART_MspInit+0x17c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d134      	bne.n	8003db0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a55      	ldr	r2, [pc, #340]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d86:	2301      	movs	r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d96:	4619      	mov	r1, r3
 8003d98:	4843      	ldr	r0, [pc, #268]	; (8003ea8 <HAL_UART_MspInit+0x184>)
 8003d9a:	f000 fe0d 	bl	80049b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	2034      	movs	r0, #52	; 0x34
 8003da4:	f000 fb44 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003da8:	2034      	movs	r0, #52	; 0x34
 8003daa:	f000 fb6d 	bl	8004488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003dae:	e073      	b.n	8003e98 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3d      	ldr	r2, [pc, #244]	; (8003eac <HAL_UART_MspInit+0x188>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d135      	bne.n	8003e26 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003df2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e00:	2303      	movs	r3, #3
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e04:	2307      	movs	r3, #7
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4826      	ldr	r0, [pc, #152]	; (8003ea8 <HAL_UART_MspInit+0x184>)
 8003e10:	f000 fdd2 	bl	80049b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	2025      	movs	r0, #37	; 0x25
 8003e1a:	f000 fb09 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e1e:	2025      	movs	r0, #37	; 0x25
 8003e20:	f000 fb32 	bl	8004488 <HAL_NVIC_EnableIRQ>
}
 8003e24:	e038      	b.n	8003e98 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_UART_MspInit+0x18c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d133      	bne.n	8003e98 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_UART_MspInit+0x180>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e68:	230c      	movs	r3, #12
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e78:	2307      	movs	r3, #7
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e80:	4619      	mov	r1, r3
 8003e82:	4809      	ldr	r0, [pc, #36]	; (8003ea8 <HAL_UART_MspInit+0x184>)
 8003e84:	f000 fd98 	bl	80049b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2026      	movs	r0, #38	; 0x26
 8003e8e:	f000 facf 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e92:	2026      	movs	r0, #38	; 0x26
 8003e94:	f000 faf8 	bl	8004488 <HAL_NVIC_EnableIRQ>
}
 8003e98:	bf00      	nop
 8003e9a:	3738      	adds	r7, #56	; 0x38
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40004c00 	.word	0x40004c00
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40011000 	.word	0x40011000
 8003eb0:	40004400 	.word	0x40004400

08003eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <NMI_Handler+0x4>

08003eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <HardFault_Handler+0x4>

08003ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <MemManage_Handler+0x4>

08003ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eca:	e7fe      	b.n	8003eca <BusFault_Handler+0x4>

08003ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <UsageFault_Handler+0x4>

08003ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efa:	f000 f96d 	bl	80041d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <USART1_IRQHandler+0x10>)
 8003f0a:	f001 ffcb 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000288 	.word	0x20000288

08003f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <USART2_IRQHandler+0x10>)
 8003f1e:	f001 ffc1 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200002d0 	.word	0x200002d0

08003f2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <UART4_IRQHandler+0x10>)
 8003f32:	f001 ffb7 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000240 	.word	0x20000240

08003f40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <TIM6_DAC_IRQHandler+0x10>)
 8003f46:	f000 fb55 	bl	80045f4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000022c 	.word	0x2000022c

08003f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	return 1;
 8003f58:	2301      	movs	r3, #1
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <_kill>:

int _kill(int pid, int sig)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f6c:	f002 fdbe 	bl	8006aec <__errno>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2216      	movs	r2, #22
 8003f74:	601a      	str	r2, [r3, #0]
	return -1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_exit>:

void _exit (int status)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffe7 	bl	8003f62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f94:	e7fe      	b.n	8003f94 <_exit+0x12>

08003f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e00a      	b.n	8003fbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fa8:	f3af 8000 	nop.w
 8003fac:	4601      	mov	r1, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	60ba      	str	r2, [r7, #8]
 8003fb4:	b2ca      	uxtb	r2, r1
 8003fb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dbf0      	blt.n	8003fa8 <_read+0x12>
	}

return len;
 8003fc6:	687b      	ldr	r3, [r7, #4]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e009      	b.n	8003ff6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	60ba      	str	r2, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f9c0 	bl	8002370 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbf1      	blt.n	8003fe2 <_write+0x12>
	}
	return len;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_close>:

int _close(int file)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	return -1;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800402e:	605a      	str	r2, [r3, #4]
	return 0;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <_isatty>:

int _isatty(int file)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	return 1;
 8004044:	2301      	movs	r3, #1
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
	return 0;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <_sbrk+0x5c>)
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <_sbrk+0x60>)
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <_sbrk+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <_sbrk+0x64>)
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <_sbrk+0x68>)
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <_sbrk+0x64>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d207      	bcs.n	80040a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004098:	f002 fd28 	bl	8006aec <__errno>
 800409c:	4603      	mov	r3, r0
 800409e:	220c      	movs	r2, #12
 80040a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	e009      	b.n	80040bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	4a05      	ldr	r2, [pc, #20]	; (80040cc <_sbrk+0x64>)
 80040b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20014000 	.word	0x20014000
 80040c8:	00000400 	.word	0x00000400
 80040cc:	20000790 	.word	0x20000790
 80040d0:	200007a8 	.word	0x200007a8

080040d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80040e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004118 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80040e4:	f7ff fff6 	bl	80040d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040ea:	490d      	ldr	r1, [pc, #52]	; (8004120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040f0:	e002      	b.n	80040f8 <LoopCopyDataInit>

080040f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040f6:	3304      	adds	r3, #4

080040f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040fc:	d3f9      	bcc.n	80040f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004100:	4c0a      	ldr	r4, [pc, #40]	; (800412c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004104:	e001      	b.n	800410a <LoopFillZerobss>

08004106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004108:	3204      	adds	r2, #4

0800410a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800410a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800410c:	d3fb      	bcc.n	8004106 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800410e:	f002 fcf3 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004112:	f7ff fb25 	bl	8003760 <main>
  bx  lr    
 8004116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004118:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 800411c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004120:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004124:	0800bc48 	.word	0x0800bc48
  ldr r2, =_sbss
 8004128:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800412c:	200007a8 	.word	0x200007a8

08004130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004130:	e7fe      	b.n	8004130 <ADC_IRQHandler>
	...

08004134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_Init+0x40>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <HAL_Init+0x40>)
 800413e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_Init+0x40>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_Init+0x40>)
 800414a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800414e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_Init+0x40>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_Init+0x40>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800415c:	2003      	movs	r0, #3
 800415e:	f000 f947 	bl	80043f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004162:	2000      	movs	r0, #0
 8004164:	f000 f808 	bl	8004178 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004168:	f7ff fd6a 	bl	8003c40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023c00 	.word	0x40023c00

08004178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_InitTick+0x54>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_InitTick+0x58>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	4619      	mov	r1, r3
 800418a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f98e 	bl	80044b8 <HAL_SYSTICK_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e00e      	b.n	80041c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d80a      	bhi.n	80041c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ac:	2200      	movs	r2, #0
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	f000 f93c 	bl	8004430 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <HAL_InitTick+0x5c>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000028 	.word	0x20000028
 80041d0:	20000030 	.word	0x20000030
 80041d4:	2000002c 	.word	0x2000002c

080041d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_IncTick+0x1c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_IncTick+0x20>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <HAL_IncTick+0x20>)
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	20000030 	.word	0x20000030
 80041f8:	20000794 	.word	0x20000794

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <HAL_GetTick+0x10>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	20000794 	.word	0x20000794

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff fff0 	bl	80041fc <HAL_GetTick>
 800421c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004236:	bf00      	nop
 8004238:	f7ff ffe0 	bl	80041fc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000030 	.word	0x20000030

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4906      	ldr	r1, [pc, #24]	; (80042f0 <__NVIC_EnableIRQ+0x34>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100

080042f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	6039      	str	r1, [r7, #0]
 80042fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004304:	2b00      	cmp	r3, #0
 8004306:	db0a      	blt.n	800431e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	490c      	ldr	r1, [pc, #48]	; (8004340 <__NVIC_SetPriority+0x4c>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	440b      	add	r3, r1
 8004318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800431c:	e00a      	b.n	8004334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4908      	ldr	r1, [pc, #32]	; (8004344 <__NVIC_SetPriority+0x50>)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	3b04      	subs	r3, #4
 800432c:	0112      	lsls	r2, r2, #4
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	440b      	add	r3, r1
 8004332:	761a      	strb	r2, [r3, #24]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e100 	.word	0xe000e100
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004348:	b480      	push	{r7}
 800434a:	b089      	sub	sp, #36	; 0x24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f1c3 0307 	rsb	r3, r3, #7
 8004362:	2b04      	cmp	r3, #4
 8004364:	bf28      	it	cs
 8004366:	2304      	movcs	r3, #4
 8004368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3304      	adds	r3, #4
 800436e:	2b06      	cmp	r3, #6
 8004370:	d902      	bls.n	8004378 <NVIC_EncodePriority+0x30>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3b03      	subs	r3, #3
 8004376:	e000      	b.n	800437a <NVIC_EncodePriority+0x32>
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004390:	f04f 31ff 	mov.w	r1, #4294967295
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43d9      	mvns	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	4313      	orrs	r3, r2
         );
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043bc:	d301      	bcc.n	80043c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043be:	2301      	movs	r3, #1
 80043c0:	e00f      	b.n	80043e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <SysTick_Config+0x40>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ca:	210f      	movs	r1, #15
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	f7ff ff90 	bl	80042f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <SysTick_Config+0x40>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <SysTick_Config+0x40>)
 80043dc:	2207      	movs	r2, #7
 80043de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	e000e010 	.word	0xe000e010

080043f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	d00f      	beq.n	800441e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b06      	cmp	r3, #6
 8004402:	d00c      	beq.n	800441e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d009      	beq.n	800441e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d006      	beq.n	800441e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d003      	beq.n	800441e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004416:	2191      	movs	r1, #145	; 0x91
 8004418:	4804      	ldr	r0, [pc, #16]	; (800442c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800441a:	f7ff fc06 	bl	8003c2a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff1a 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	0800b59c 	.word	0x0800b59c

08004430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d903      	bls.n	8004450 <HAL_NVIC_SetPriority+0x20>
 8004448:	21a9      	movs	r1, #169	; 0xa9
 800444a:	480e      	ldr	r0, [pc, #56]	; (8004484 <HAL_NVIC_SetPriority+0x54>)
 800444c:	f7ff fbed 	bl	8003c2a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d903      	bls.n	800445e <HAL_NVIC_SetPriority+0x2e>
 8004456:	21aa      	movs	r1, #170	; 0xaa
 8004458:	480a      	ldr	r0, [pc, #40]	; (8004484 <HAL_NVIC_SetPriority+0x54>)
 800445a:	f7ff fbe6 	bl	8003c2a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800445e:	f7ff ff1f 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004462:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7ff ff6d 	bl	8004348 <NVIC_EncodePriority>
 800446e:	4602      	mov	r2, r0
 8004470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff3c 	bl	80042f4 <__NVIC_SetPriority>
}
 800447c:	bf00      	nop
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0800b59c 	.word	0x0800b59c

08004488 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da03      	bge.n	80044a2 <HAL_NVIC_EnableIRQ+0x1a>
 800449a:	21bd      	movs	r1, #189	; 0xbd
 800449c:	4805      	ldr	r0, [pc, #20]	; (80044b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800449e:	f7ff fbc4 	bl	8003c2a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ff08 	bl	80042bc <__NVIC_EnableIRQ>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	0800b59c 	.word	0x0800b59c

080044b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff73 	bl	80043ac <SysTick_Config>
 80044c6:	4603      	mov	r3, r0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e01e      	b.n	8004520 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <HAL_DAC_Init+0x58>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DAC_Init+0x26>
 80044ec:	f44f 7192 	mov.w	r1, #292	; 0x124
 80044f0:	480e      	ldr	r0, [pc, #56]	; (800452c <HAL_DAC_Init+0x5c>)
 80044f2:	f7ff fb9a 	bl	8003c2a <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	791b      	ldrb	r3, [r3, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fbc0 	bl	8003c8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40007400 	.word	0x40007400
 800452c:	0800b5d8 	.word	0x0800b5d8

08004530 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e051      	b.n	80045e8 <HAL_DAC_Start+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_DAC_Start+0x2a>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b10      	cmp	r3, #16
 800454e:	d004      	beq.n	800455a <HAL_DAC_Start+0x2a>
 8004550:	f240 11c9 	movw	r1, #457	; 0x1c9
 8004554:	4826      	ldr	r0, [pc, #152]	; (80045f0 <HAL_DAC_Start+0xc0>)
 8004556:	f7ff fb68 	bl	8003c2a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	795b      	ldrb	r3, [r3, #5]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_DAC_Start+0x36>
 8004562:	2302      	movs	r3, #2
 8004564:	e040      	b.n	80045e8 <HAL_DAC_Start+0xb8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2201      	movs	r2, #1
 8004580:	409a      	lsls	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10f      	bne.n	80045b0 <HAL_DAC_Start+0x80>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800459a:	2b3c      	cmp	r3, #60	; 0x3c
 800459c:	d11d      	bne.n	80045da <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	e014      	b.n	80045da <HAL_DAC_Start+0xaa>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	213c      	movs	r1, #60	; 0x3c
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d107      	bne.n	80045da <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0202 	orr.w	r2, r2, #2
 80045d8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	0800b5d8 	.word	0x0800b5d8

080045f4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01d      	beq.n	8004652 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d018      	beq.n	8004652 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2204      	movs	r2, #4
 8004624:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800464a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f875 	bl	800473c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01d      	beq.n	8004698 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d018      	beq.n	8004698 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004680:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8f6 	bl	8004884 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e038      	b.n	800472e <HAL_DAC_SetValue+0x8e>
  }

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_DAC_SetValue+0x32>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d004      	beq.n	80046d2 <HAL_DAC_SetValue+0x32>
 80046c8:	f44f 714d 	mov.w	r1, #820	; 0x334
 80046cc:	481a      	ldr	r0, [pc, #104]	; (8004738 <HAL_DAC_SetValue+0x98>)
 80046ce:	f7ff faac 	bl	8003c2a <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_DAC_SetValue+0x4e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d007      	beq.n	80046ee <HAL_DAC_SetValue+0x4e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d004      	beq.n	80046ee <HAL_DAC_SetValue+0x4e>
 80046e4:	f240 3135 	movw	r1, #821	; 0x335
 80046e8:	4813      	ldr	r0, [pc, #76]	; (8004738 <HAL_DAC_SetValue+0x98>)
 80046ea:	f7ff fa9e 	bl	8003c2a <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d904      	bls.n	8004702 <HAL_DAC_SetValue+0x62>
 80046f8:	f240 3136 	movw	r1, #822	; 0x336
 80046fc:	480e      	ldr	r0, [pc, #56]	; (8004738 <HAL_DAC_SetValue+0x98>)
 80046fe:	f7ff fa94 	bl	8003c2a <assert_failed>

  tmp = (uint32_t)hdac->Instance;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <HAL_DAC_SetValue+0x7a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3308      	adds	r3, #8
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e004      	b.n	8004724 <HAL_DAC_SetValue+0x84>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	3314      	adds	r3, #20
 8004722:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	461a      	mov	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	0800b5d8 	.word	0x0800b5d8

0800473c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_DAC_ConfigChannel+0x1c>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e083      	b.n	8004878 <HAL_DAC_ConfigChannel+0x128>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d024      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b24      	cmp	r3, #36	; 0x24
 800477e:	d020      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d01c      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b14      	cmp	r3, #20
 800478e:	d018      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b1c      	cmp	r3, #28
 8004796:	d014      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d010      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b2c      	cmp	r3, #44	; 0x2c
 80047a6:	d00c      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b34      	cmp	r3, #52	; 0x34
 80047ae:	d008      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b3c      	cmp	r3, #60	; 0x3c
 80047b6:	d004      	beq.n	80047c2 <HAL_DAC_ConfigChannel+0x72>
 80047b8:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80047bc:	4830      	ldr	r0, [pc, #192]	; (8004880 <HAL_DAC_ConfigChannel+0x130>)
 80047be:	f7ff fa34 	bl	8003c2a <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_DAC_ConfigChannel+0x8c>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d004      	beq.n	80047dc <HAL_DAC_ConfigChannel+0x8c>
 80047d2:	f240 31dd 	movw	r1, #989	; 0x3dd
 80047d6:	482a      	ldr	r0, [pc, #168]	; (8004880 <HAL_DAC_ConfigChannel+0x130>)
 80047d8:	f7ff fa27 	bl	8003c2a <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DAC_ConfigChannel+0xa2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d004      	beq.n	80047f2 <HAL_DAC_ConfigChannel+0xa2>
 80047e8:	f240 31de 	movw	r1, #990	; 0x3de
 80047ec:	4824      	ldr	r0, [pc, #144]	; (8004880 <HAL_DAC_ConfigChannel+0x130>)
 80047ee:	f7ff fa1c 	bl	8003c2a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	795b      	ldrb	r3, [r3, #5]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_DAC_ConfigChannel+0xae>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e03c      	b.n	8004878 <HAL_DAC_ConfigChannel+0x128>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	f640 72fe 	movw	r2, #4094	; 0xffe
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	22c0      	movs	r2, #192	; 0xc0
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43da      	mvns	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	400a      	ands	r2, r1
 8004868:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004876:	7ffb      	ldrb	r3, [r7, #31]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0800b5d8 	.word	0x0800b5d8

08004884 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7ff fcaa 	bl	80041fc <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d008      	beq.n	80048c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2280      	movs	r2, #128	; 0x80
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e052      	b.n	800496e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0216 	bic.w	r2, r2, #22
 80048d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <HAL_DMA_Abort+0x62>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0208 	bic.w	r2, r2, #8
 8004906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004918:	e013      	b.n	8004942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800491a:	f7ff fc6f 	bl	80041fc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b05      	cmp	r3, #5
 8004926:	d90c      	bls.n	8004942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2203      	movs	r2, #3
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e015      	b.n	800496e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e4      	bne.n	800491a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	223f      	movs	r2, #63	; 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d004      	beq.n	8004994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2280      	movs	r2, #128	; 0x80
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e00c      	b.n	80049ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2205      	movs	r2, #5
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a3e      	ldr	r2, [pc, #248]	; (8004ac4 <HAL_GPIO_Init+0x10c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d023      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a3d      	ldr	r2, [pc, #244]	; (8004ac8 <HAL_GPIO_Init+0x110>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01f      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a3c      	ldr	r2, [pc, #240]	; (8004acc <HAL_GPIO_Init+0x114>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01b      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a3b      	ldr	r2, [pc, #236]	; (8004ad0 <HAL_GPIO_Init+0x118>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d017      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a3a      	ldr	r2, [pc, #232]	; (8004ad4 <HAL_GPIO_Init+0x11c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <HAL_GPIO_Init+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <HAL_GPIO_Init+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a37      	ldr	r2, [pc, #220]	; (8004ae0 <HAL_GPIO_Init+0x128>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a36      	ldr	r2, [pc, #216]	; (8004ae4 <HAL_GPIO_Init+0x12c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x5e>
 8004a0e:	21b0      	movs	r1, #176	; 0xb0
 8004a10:	4835      	ldr	r0, [pc, #212]	; (8004ae8 <HAL_GPIO_Init+0x130>)
 8004a12:	f7ff f90a 	bl	8003c2a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_GPIO_Init+0x74>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x7c>
 8004a2c:	21b1      	movs	r1, #177	; 0xb1
 8004a2e:	482e      	ldr	r0, [pc, #184]	; (8004ae8 <HAL_GPIO_Init+0x130>)
 8004a30:	f7ff f8fb 	bl	8003c2a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 82b8 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f000 82b3 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b11      	cmp	r3, #17
 8004a4e:	f000 82ae 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	f000 82a9 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b12      	cmp	r3, #18
 8004a62:	f000 82a4 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004a6e:	f000 829e 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004a7a:	f000 8298 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004a86:	f000 8292 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004a92:	f000 828c 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004a9e:	f000 8286 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004aaa:	f000 8280 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	f000 827b 	beq.w	8004fae <HAL_GPIO_Init+0x5f6>
 8004ab8:	21b2      	movs	r1, #178	; 0xb2
 8004aba:	480b      	ldr	r0, [pc, #44]	; (8004ae8 <HAL_GPIO_Init+0x130>)
 8004abc:	f7ff f8b5 	bl	8003c2a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac0:	e275      	b.n	8004fae <HAL_GPIO_Init+0x5f6>
 8004ac2:	bf00      	nop
 8004ac4:	40020000 	.word	0x40020000
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020c00 	.word	0x40020c00
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40021400 	.word	0x40021400
 8004adc:	40021800 	.word	0x40021800
 8004ae0:	40021c00 	.word	0x40021c00
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	0800b610 	.word	0x0800b610
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2101      	movs	r1, #1
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8252 	beq.w	8004fa8 <HAL_GPIO_Init+0x5f0>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d005      	beq.n	8004b1c <HAL_GPIO_Init+0x164>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d144      	bne.n	8004ba6 <HAL_GPIO_Init+0x1ee>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00f      	beq.n	8004b44 <HAL_GPIO_Init+0x18c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d00b      	beq.n	8004b44 <HAL_GPIO_Init+0x18c>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d007      	beq.n	8004b44 <HAL_GPIO_Init+0x18c>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x18c>
 8004b3c:	21c0      	movs	r1, #192	; 0xc0
 8004b3e:	4849      	ldr	r0, [pc, #292]	; (8004c64 <HAL_GPIO_Init+0x2ac>)
 8004b40:	f7ff f873 	bl	8003c2a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0201 	and.w	r2, r3, #1
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d027      	beq.n	8004c02 <HAL_GPIO_Init+0x24a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_GPIO_Init+0x21a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d007      	beq.n	8004bd2 <HAL_GPIO_Init+0x21a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x21a>
 8004bca:	21d0      	movs	r1, #208	; 0xd0
 8004bcc:	4825      	ldr	r0, [pc, #148]	; (8004c64 <HAL_GPIO_Init+0x2ac>)
 8004bce:	f7ff f82c 	bl	8003c2a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	f040 80f0 	bne.w	8004df0 <HAL_GPIO_Init+0x438>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <HAL_GPIO_Init+0x2b0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d039      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <HAL_GPIO_Init+0x2b4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d035      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <HAL_GPIO_Init+0x2b8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d031      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <HAL_GPIO_Init+0x2bc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02d      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <HAL_GPIO_Init+0x2c0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d029      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <HAL_GPIO_Init+0x2c4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d025      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <HAL_GPIO_Init+0x2c8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d021      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <HAL_GPIO_Init+0x2cc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d01d      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a0d      	ldr	r2, [pc, #52]	; (8004c88 <HAL_GPIO_Init+0x2d0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d019      	beq.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c58:	21de      	movs	r1, #222	; 0xde
 8004c5a:	4802      	ldr	r0, [pc, #8]	; (8004c64 <HAL_GPIO_Init+0x2ac>)
 8004c5c:	f7fe ffe5 	bl	8003c2a <assert_failed>
 8004c60:	e014      	b.n	8004c8c <HAL_GPIO_Init+0x2d4>
 8004c62:	bf00      	nop
 8004c64:	0800b610 	.word	0x0800b610
 8004c68:	40020000 	.word	0x40020000
 8004c6c:	40020400 	.word	0x40020400
 8004c70:	40020800 	.word	0x40020800
 8004c74:	40020c00 	.word	0x40020c00
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40021400 	.word	0x40021400
 8004c80:	40021800 	.word	0x40021800
 8004c84:	40021c00 	.word	0x40021c00
 8004c88:	40022000 	.word	0x40022000
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8089 	beq.w	8004da8 <HAL_GPIO_Init+0x3f0>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	f000 8084 	beq.w	8004da8 <HAL_GPIO_Init+0x3f0>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d07f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d07b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d077      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d073      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d06f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d06b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d067      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d063      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d05f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d05b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d057      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d053      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d04f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d04b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d047      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d043      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b06      	cmp	r3, #6
 8004d26:	d03f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	d03b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b07      	cmp	r3, #7
 8004d36:	d037      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	d033      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b07      	cmp	r3, #7
 8004d46:	d02f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d02b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d027      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d023      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d01f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d01b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b0a      	cmp	r3, #10
 8004d76:	d017      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b0a      	cmp	r3, #10
 8004d7e:	d013      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d00f      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d00b      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x3f0>
 8004da0:	21df      	movs	r1, #223	; 0xdf
 8004da2:	4889      	ldr	r0, [pc, #548]	; (8004fc8 <HAL_GPIO_Init+0x610>)
 8004da4:	f7fe ff41 	bl	8003c2a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220f      	movs	r2, #15
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	08da      	lsrs	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3208      	adds	r2, #8
 8004dea:	6939      	ldr	r1, [r7, #16]
 8004dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80bb 	beq.w	8004fa8 <HAL_GPIO_Init+0x5f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <HAL_GPIO_Init+0x614>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	4a64      	ldr	r2, [pc, #400]	; (8004fcc <HAL_GPIO_Init+0x614>)
 8004e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e40:	6453      	str	r3, [r2, #68]	; 0x44
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_GPIO_Init+0x614>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e4e:	4a60      	ldr	r2, [pc, #384]	; (8004fd0 <HAL_GPIO_Init+0x618>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <HAL_GPIO_Init+0x61c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_GPIO_Init+0x526>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a56      	ldr	r2, [pc, #344]	; (8004fd8 <HAL_GPIO_Init+0x620>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02b      	beq.n	8004eda <HAL_GPIO_Init+0x522>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a55      	ldr	r2, [pc, #340]	; (8004fdc <HAL_GPIO_Init+0x624>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d025      	beq.n	8004ed6 <HAL_GPIO_Init+0x51e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a54      	ldr	r2, [pc, #336]	; (8004fe0 <HAL_GPIO_Init+0x628>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01f      	beq.n	8004ed2 <HAL_GPIO_Init+0x51a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a53      	ldr	r2, [pc, #332]	; (8004fe4 <HAL_GPIO_Init+0x62c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d019      	beq.n	8004ece <HAL_GPIO_Init+0x516>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a52      	ldr	r2, [pc, #328]	; (8004fe8 <HAL_GPIO_Init+0x630>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_GPIO_Init+0x512>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a51      	ldr	r2, [pc, #324]	; (8004fec <HAL_GPIO_Init+0x634>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_GPIO_Init+0x50e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a50      	ldr	r2, [pc, #320]	; (8004ff0 <HAL_GPIO_Init+0x638>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <HAL_GPIO_Init+0x50a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <HAL_GPIO_Init+0x63c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_GPIO_Init+0x506>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e010      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	e00e      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ec2:	2307      	movs	r3, #7
 8004ec4:	e00c      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	e00a      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004eca:	2305      	movs	r3, #5
 8004ecc:	e008      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ece:	2304      	movs	r3, #4
 8004ed0:	e006      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e004      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e002      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_GPIO_Init+0x528>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	f002 0203 	and.w	r2, r2, #3
 8004ee6:	0092      	lsls	r2, r2, #2
 8004ee8:	4093      	lsls	r3, r2
 8004eea:	461a      	mov	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ef2:	4937      	ldr	r1, [pc, #220]	; (8004fd0 <HAL_GPIO_Init+0x618>)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	3302      	adds	r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f00:	4b3d      	ldr	r3, [pc, #244]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x56c>
        {
          temp |= iocurrent;
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f24:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f2a:	4b33      	ldr	r3, [pc, #204]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x596>
        {
          temp |= iocurrent;
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x5c0>
        {
          temp |= iocurrent;
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f78:	4a1f      	ldr	r2, [pc, #124]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x5ea>
        {
          temp |= iocurrent;
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_GPIO_Init+0x640>)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f ad97 	bne.w	8004aec <HAL_GPIO_Init+0x134>
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	0800b610 	.word	0x0800b610
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020c00 	.word	0x40020c00
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40021400 	.word	0x40021400
 8004fec:	40021800 	.word	0x40021800
 8004ff0:	40021c00 	.word	0x40021c00
 8004ff4:	40022000 	.word	0x40022000
 8004ff8:	40013c00 	.word	0x40013c00

08004ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
 8005008:	4613      	mov	r3, r2
 800500a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_GPIO_WritePin+0x20>
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_GPIO_WritePin+0x2a>
 800501c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8005020:	480e      	ldr	r0, [pc, #56]	; (800505c <HAL_GPIO_WritePin+0x60>)
 8005022:	f7fe fe02 	bl	8003c2a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005026:	787b      	ldrb	r3, [r7, #1]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_GPIO_WritePin+0x40>
 800502c:	787b      	ldrb	r3, [r7, #1]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d004      	beq.n	800503c <HAL_GPIO_WritePin+0x40>
 8005032:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005036:	4809      	ldr	r0, [pc, #36]	; (800505c <HAL_GPIO_WritePin+0x60>)
 8005038:	f7fe fdf7 	bl	8003c2a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800503c:	787b      	ldrb	r3, [r7, #1]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005048:	e003      	b.n	8005052 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	0800b610 	.word	0x0800b610

08005060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e2f0      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d904      	bls.n	8005084 <HAL_RCC_OscConfig+0x24>
 800507a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800507e:	489a      	ldr	r0, [pc, #616]	; (80052e8 <HAL_RCC_OscConfig+0x288>)
 8005080:	f7fe fdd3 	bl	8003c2a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d061      	beq.n	8005154 <HAL_RCC_OscConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_RCC_OscConfig+0x52>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d008      	beq.n	80050b2 <HAL_RCC_OscConfig+0x52>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	d004      	beq.n	80050b2 <HAL_RCC_OscConfig+0x52>
 80050a8:	f240 1167 	movw	r1, #359	; 0x167
 80050ac:	488e      	ldr	r0, [pc, #568]	; (80052e8 <HAL_RCC_OscConfig+0x288>)
 80050ae:	f7fe fdbc 	bl	8003c2a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b2:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d00c      	beq.n	80050d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050be:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d112      	bne.n	80050f0 <HAL_RCC_OscConfig+0x90>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCC_OscConfig+0x90>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	4b84      	ldr	r3, [pc, #528]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d036      	beq.n	8005152 <HAL_RCC_OscConfig+0xf2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d132      	bne.n	8005152 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e2b1      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	4b7e      	ldr	r3, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x290>)
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d013      	beq.n	800512a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7ff f87b 	bl	80041fc <HAL_GetTick>
 8005106:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0xbc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800510a:	f7ff f877 	bl	80041fc <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b64      	cmp	r3, #100	; 0x64
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e29b      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511c:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0xaa>
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0xf4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7ff f867 	bl	80041fc <HAL_GetTick>
 800512e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005132:	f7ff f863 	bl	80041fc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b64      	cmp	r3, #100	; 0x64
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e287      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005144:	4b69      	ldr	r3, [pc, #420]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <HAL_RCC_OscConfig+0xd2>
 8005150:	e000      	b.n	8005154 <HAL_RCC_OscConfig+0xf4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005152:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 808e 	beq.w	800527e <HAL_RCC_OscConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_RCC_OscConfig+0x11c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d004      	beq.n	800517c <HAL_RCC_OscConfig+0x11c>
 8005172:	f240 1199 	movw	r1, #409	; 0x199
 8005176:	485c      	ldr	r0, [pc, #368]	; (80052e8 <HAL_RCC_OscConfig+0x288>)
 8005178:	f7fe fd57 	bl	8003c2a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b1f      	cmp	r3, #31
 8005182:	d904      	bls.n	800518e <HAL_RCC_OscConfig+0x12e>
 8005184:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8005188:	4857      	ldr	r0, [pc, #348]	; (80052e8 <HAL_RCC_OscConfig+0x288>)
 800518a:	f7fe fd4e 	bl	8003c2a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518e:	4b57      	ldr	r3, [pc, #348]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b54      	ldr	r3, [pc, #336]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d126      	bne.n	80051f4 <HAL_RCC_OscConfig+0x194>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d120      	bne.n	80051f4 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x16a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x16a>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e244      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b48      	ldr	r3, [pc, #288]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	21f8      	movs	r1, #248	; 0xf8
 80051d8:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	fa91 f1a1 	rbit	r1, r1
 80051e0:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	fab1 f181 	clz	r1, r1
 80051e8:	b2c9      	uxtb	r1, r1
 80051ea:	408b      	lsls	r3, r1
 80051ec:	493f      	ldr	r1, [pc, #252]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e044      	b.n	800527e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02a      	beq.n	8005252 <HAL_RCC_OscConfig+0x1f2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_RCC_OscConfig+0x294>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fe fffb 	bl	80041fc <HAL_GetTick>
 8005206:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fe fff7 	bl	80041fc <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e21b      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b33      	ldr	r3, [pc, #204]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x1aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	21f8      	movs	r1, #248	; 0xf8
 8005236:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	6939      	ldr	r1, [r7, #16]
 800523a:	fa91 f1a1 	rbit	r1, r1
 800523e:	60f9      	str	r1, [r7, #12]
  return result;
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	fab1 f181 	clz	r1, r1
 8005246:	b2c9      	uxtb	r1, r1
 8005248:	408b      	lsls	r3, r1
 800524a:	4928      	ldr	r1, [pc, #160]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]
 8005250:	e015      	b.n	800527e <HAL_RCC_OscConfig+0x21e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005252:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <HAL_RCC_OscConfig+0x294>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005258:	f7fe ffd0 	bl	80041fc <HAL_GetTick>
 800525c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005260:	f7fe ffcc 	bl	80041fc <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x212>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e1f0      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x200>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d047      	beq.n	800531a <HAL_RCC_OscConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_RCC_OscConfig+0x244>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d004      	beq.n	80052a4 <HAL_RCC_OscConfig+0x244>
 800529a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800529e:	4812      	ldr	r0, [pc, #72]	; (80052e8 <HAL_RCC_OscConfig+0x288>)
 80052a0:	f7fe fcc3 	bl	8003c2a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d016      	beq.n	80052da <HAL_RCC_OscConfig+0x27a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <HAL_RCC_OscConfig+0x298>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fe ffa3 	bl	80041fc <HAL_GetTick>
 80052b6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x26c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fe ff9f 	bl	80041fc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x26c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e1c3      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_RCC_OscConfig+0x28c>)
 80052ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x25a>
 80052d8:	e01f      	b.n	800531a <HAL_RCC_OscConfig+0x2ba>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <HAL_RCC_OscConfig+0x298>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e0:	f7fe ff8c 	bl	80041fc <HAL_GetTick>
 80052e4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e6:	e012      	b.n	800530e <HAL_RCC_OscConfig+0x2ae>
 80052e8:	0800b64c 	.word	0x0800b64c
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40023802 	.word	0x40023802
 80052f4:	42470000 	.word	0x42470000
 80052f8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fc:	f7fe ff7e 	bl	80041fc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x2ae>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e1a2      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530e:	4b9d      	ldr	r3, [pc, #628]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x29c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 808e 	beq.w	8005444 <HAL_RCC_OscConfig+0x3e4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_RCC_OscConfig+0x2f0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d008      	beq.n	8005350 <HAL_RCC_OscConfig+0x2f0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d004      	beq.n	8005350 <HAL_RCC_OscConfig+0x2f0>
 8005346:	f240 2106 	movw	r1, #518	; 0x206
 800534a:	488f      	ldr	r0, [pc, #572]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 800534c:	f7fe fc6d 	bl	8003c2a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005350:	4b8c      	ldr	r3, [pc, #560]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <HAL_RCC_OscConfig+0x31e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	2300      	movs	r3, #0
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	4b88      	ldr	r3, [pc, #544]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	4a87      	ldr	r2, [pc, #540]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536a:	6413      	str	r3, [r2, #64]	; 0x40
 800536c:	4b85      	ldr	r3, [pc, #532]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800537e:	4b83      	ldr	r3, [pc, #524]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a82      	ldr	r2, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005388:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b80      	ldr	r3, [pc, #512]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d118      	bne.n	80053c8 <HAL_RCC_OscConfig+0x368>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005396:	4b7d      	ldr	r3, [pc, #500]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7c      	ldr	r2, [pc, #496]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a2:	f7fe ff2b 	bl	80041fc <HAL_GetTick>
 80053a6:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x35c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053aa:	f7fe ff27 	bl	80041fc <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e14b      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b73      	ldr	r3, [pc, #460]	; (800558c <HAL_RCC_OscConfig+0x52c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b70      	ldr	r3, [pc, #448]	; (8005590 <HAL_RCC_OscConfig+0x530>)
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fe ff0f 	bl	80041fc <HAL_GetTick>
 80053de:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fe ff0b 	bl	80041fc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e12d      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	4b62      	ldr	r3, [pc, #392]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ee      	beq.n	80053e2 <HAL_RCC_OscConfig+0x382>
 8005404:	e014      	b.n	8005430 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005406:	f7fe fef9 	bl	80041fc <HAL_GetTick>
 800540a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fe fef5 	bl	80041fc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	; 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e117      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ee      	bne.n	800540e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <HAL_RCC_OscConfig+0x3e4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005438:	4b52      	ldr	r3, [pc, #328]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_RCC_OscConfig+0x406>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d008      	beq.n	8005466 <HAL_RCC_OscConfig+0x406>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d004      	beq.n	8005466 <HAL_RCC_OscConfig+0x406>
 800545c:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8005460:	4849      	ldr	r0, [pc, #292]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 8005462:	f7fe fbe2 	bl	8003c2a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80f1 	beq.w	8005652 <HAL_RCC_OscConfig+0x5f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005470:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	f000 80b6 	beq.w	80055ea <HAL_RCC_OscConfig+0x58a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 809a 	bne.w	80055bc <HAL_RCC_OscConfig+0x55c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_RCC_OscConfig+0x444>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005498:	d004      	beq.n	80054a4 <HAL_RCC_OscConfig+0x444>
 800549a:	f240 2155 	movw	r1, #597	; 0x255
 800549e:	483a      	ldr	r0, [pc, #232]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 80054a0:	f7fe fbc3 	bl	8003c2a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	2b3f      	cmp	r3, #63	; 0x3f
 80054aa:	d904      	bls.n	80054b6 <HAL_RCC_OscConfig+0x456>
 80054ac:	f240 2156 	movw	r1, #598	; 0x256
 80054b0:	4835      	ldr	r0, [pc, #212]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 80054b2:	f7fe fbba 	bl	8003c2a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2bbf      	cmp	r3, #191	; 0xbf
 80054bc:	d904      	bls.n	80054c8 <HAL_RCC_OscConfig+0x468>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80054c6:	d904      	bls.n	80054d2 <HAL_RCC_OscConfig+0x472>
 80054c8:	f240 2157 	movw	r1, #599	; 0x257
 80054cc:	482e      	ldr	r0, [pc, #184]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 80054ce:	f7fe fbac 	bl	8003c2a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_OscConfig+0x49c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00c      	beq.n	80054fc <HAL_RCC_OscConfig+0x49c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d008      	beq.n	80054fc <HAL_RCC_OscConfig+0x49c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d004      	beq.n	80054fc <HAL_RCC_OscConfig+0x49c>
 80054f2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054f6:	4824      	ldr	r0, [pc, #144]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 80054f8:	f7fe fb97 	bl	8003c2a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d903      	bls.n	800550c <HAL_RCC_OscConfig+0x4ac>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d904      	bls.n	8005516 <HAL_RCC_OscConfig+0x4b6>
 800550c:	f240 2159 	movw	r1, #601	; 0x259
 8005510:	481d      	ldr	r0, [pc, #116]	; (8005588 <HAL_RCC_OscConfig+0x528>)
 8005512:	f7fe fb8a 	bl	8003c2a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_RCC_OscConfig+0x534>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fe fe6e 	bl	80041fc <HAL_GetTick>
 8005520:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005524:	f7fe fe6a 	bl	80041fc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x4d6>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e08e      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x4c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <HAL_RCC_OscConfig+0x538>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69d1      	ldr	r1, [r2, #28]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a12      	ldr	r2, [r2, #32]
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005558:	0192      	lsls	r2, r2, #6
 800555a:	4311      	orrs	r1, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005560:	0612      	lsls	r2, r2, #24
 8005562:	4311      	orrs	r1, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005568:	0852      	lsrs	r2, r2, #1
 800556a:	3a01      	subs	r2, #1
 800556c:	0412      	lsls	r2, r2, #16
 800556e:	430a      	orrs	r2, r1
 8005570:	4904      	ldr	r1, [pc, #16]	; (8005584 <HAL_RCC_OscConfig+0x524>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <HAL_RCC_OscConfig+0x534>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fe fe3e 	bl	80041fc <HAL_GetTick>
 8005580:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x54e>
 8005584:	40023800 	.word	0x40023800
 8005588:	0800b64c 	.word	0x0800b64c
 800558c:	40007000 	.word	0x40007000
 8005590:	40023870 	.word	0x40023870
 8005594:	42470060 	.word	0x42470060
 8005598:	f0bc8000 	.word	0xf0bc8000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559c:	f7fe fe2e 	bl	80041fc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e052      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <HAL_RCC_OscConfig+0x5fc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x53c>
 80055ba:	e04a      	b.n	8005652 <HAL_RCC_OscConfig+0x5f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055bc:	4b28      	ldr	r3, [pc, #160]	; (8005660 <HAL_RCC_OscConfig+0x600>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c2:	f7fe fe1b 	bl	80041fc <HAL_GetTick>
 80055c6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x57c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fe fe17 	bl	80041fc <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b64      	cmp	r3, #100	; 0x64
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e03b      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055dc:	4b1f      	ldr	r3, [pc, #124]	; (800565c <HAL_RCC_OscConfig+0x5fc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCC_OscConfig+0x56a>
 80055e8:	e033      	b.n	8005652 <HAL_RCC_OscConfig+0x5f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x596>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e02e      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80055f6:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_RCC_OscConfig+0x5fc>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	429a      	cmp	r2, r3
 8005608:	d121      	bne.n	800564e <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d11a      	bne.n	800564e <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005624:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005626:	4293      	cmp	r3, r2
 8005628:	d111      	bne.n	800564e <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d107      	bne.n	800564e <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x5f2>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_RCC_OscConfig+0x5f4>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	42470060 	.word	0x42470060

08005664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e176      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_RCC_ClockConfig+0x24>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b0f      	cmp	r3, #15
 8005686:	d904      	bls.n	8005692 <HAL_RCC_ClockConfig+0x2e>
 8005688:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800568c:	4877      	ldr	r0, [pc, #476]	; (800586c <HAL_RCC_ClockConfig+0x208>)
 800568e:	f7fe facc 	bl	8003c2a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d019      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d016      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d013      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d010      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d00d      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d00a      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d007      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b07      	cmp	r3, #7
 80056c0:	d004      	beq.n	80056cc <HAL_RCC_ClockConfig+0x68>
 80056c2:	f240 21d1 	movw	r1, #721	; 0x2d1
 80056c6:	4869      	ldr	r0, [pc, #420]	; (800586c <HAL_RCC_ClockConfig+0x208>)
 80056c8:	f7fe faaf 	bl	8003c2a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056cc:	4b68      	ldr	r3, [pc, #416]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d90c      	bls.n	80056f4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b65      	ldr	r3, [pc, #404]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b63      	ldr	r3, [pc, #396]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e138      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d049      	beq.n	8005794 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800570c:	4b59      	ldr	r3, [pc, #356]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4a58      	ldr	r2, [pc, #352]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4a52      	ldr	r2, [pc, #328]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 800572a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800572e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d024      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d020      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b90      	cmp	r3, #144	; 0x90
 8005746:	d01c      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2ba0      	cmp	r3, #160	; 0xa0
 800574e:	d018      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2bb0      	cmp	r3, #176	; 0xb0
 8005756:	d014      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2bc0      	cmp	r3, #192	; 0xc0
 800575e:	d010      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2bd0      	cmp	r3, #208	; 0xd0
 8005766:	d00c      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2be0      	cmp	r3, #224	; 0xe0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2bf0      	cmp	r3, #240	; 0xf0
 8005776:	d004      	beq.n	8005782 <HAL_RCC_ClockConfig+0x11e>
 8005778:	f240 21f5 	movw	r1, #757	; 0x2f5
 800577c:	483b      	ldr	r0, [pc, #236]	; (800586c <HAL_RCC_ClockConfig+0x208>)
 800577e:	f7fe fa54 	bl	8003c2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005782:	4b3c      	ldr	r3, [pc, #240]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4939      	ldr	r1, [pc, #228]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d051      	beq.n	8005844 <HAL_RCC_ClockConfig+0x1e0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x15e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d008      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x15e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d004      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x15e>
 80057b8:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80057bc:	482b      	ldr	r0, [pc, #172]	; (800586c <HAL_RCC_ClockConfig+0x208>)
 80057be:	f7fe fa34 	bl	8003c2a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d107      	bne.n	80057da <HAL_RCC_ClockConfig+0x176>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d115      	bne.n	8005802 <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0c5      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d107      	bne.n	80057f2 <HAL_RCC_ClockConfig+0x18e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e0b9      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0b1      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f023 0203 	bic.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4919      	ldr	r1, [pc, #100]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005810:	4313      	orrs	r3, r2
 8005812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005814:	f7fe fcf2 	bl	80041fc <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581a:	e00a      	b.n	8005832 <HAL_RCC_ClockConfig+0x1ce>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fe fcee 	bl	80041fc <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x1ce>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e099      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_RCC_ClockConfig+0x210>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 020c 	and.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	429a      	cmp	r2, r3
 8005842:	d1eb      	bne.n	800581c <HAL_RCC_ClockConfig+0x1b8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d212      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x214>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCC_ClockConfig+0x20c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d007      	beq.n	8005878 <HAL_RCC_ClockConfig+0x214>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e07c      	b.n	8005966 <HAL_RCC_ClockConfig+0x302>
 800586c:	0800b64c 	.word	0x0800b64c
 8005870:	40023c00 	.word	0x40023c00
 8005874:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d025      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x26c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d018      	beq.n	80058be <HAL_RCC_ClockConfig+0x25a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d013      	beq.n	80058be <HAL_RCC_ClockConfig+0x25a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800589e:	d00e      	beq.n	80058be <HAL_RCC_ClockConfig+0x25a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80058a8:	d009      	beq.n	80058be <HAL_RCC_ClockConfig+0x25a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80058b2:	d004      	beq.n	80058be <HAL_RCC_ClockConfig+0x25a>
 80058b4:	f240 3139 	movw	r1, #825	; 0x339
 80058b8:	482d      	ldr	r0, [pc, #180]	; (8005970 <HAL_RCC_ClockConfig+0x30c>)
 80058ba:	f7fe f9b6 	bl	8003c2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058be:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <HAL_RCC_ClockConfig+0x310>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	492a      	ldr	r1, [pc, #168]	; (8005974 <HAL_RCC_ClockConfig+0x310>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d026      	beq.n	800592a <HAL_RCC_ClockConfig+0x2c6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2b2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d013      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2b2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058f6:	d00e      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2b2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005900:	d009      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2b2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800590a:	d004      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2b2>
 800590c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8005910:	4817      	ldr	r0, [pc, #92]	; (8005970 <HAL_RCC_ClockConfig+0x30c>)
 8005912:	f7fe f98a 	bl	8003c2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005916:	4b17      	ldr	r3, [pc, #92]	; (8005974 <HAL_RCC_ClockConfig+0x310>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4913      	ldr	r1, [pc, #76]	; (8005974 <HAL_RCC_ClockConfig+0x310>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800592a:	f000 f82b 	bl	8005984 <HAL_RCC_GetSysClockFreq>
 800592e:	4601      	mov	r1, r0
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <HAL_RCC_ClockConfig+0x310>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005938:	22f0      	movs	r2, #240	; 0xf0
 800593a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	fa92 f2a2 	rbit	r2, r2
 8005942:	60fa      	str	r2, [r7, #12]
  return result;
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	fab2 f282 	clz	r2, r2
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	40d3      	lsrs	r3, r2
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <HAL_RCC_ClockConfig+0x314>)
 8005950:	5cd3      	ldrb	r3, [r2, r3]
 8005952:	fa21 f303 	lsr.w	r3, r1, r3
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <HAL_RCC_ClockConfig+0x318>)
 8005958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_RCC_ClockConfig+0x31c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fc0a 	bl	8004178 <HAL_InitTick>

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	0800b64c 	.word	0x0800b64c
 8005974:	40023800 	.word	0x40023800
 8005978:	0800b6c0 	.word	0x0800b6c0
 800597c:	20000028 	.word	0x20000028
 8005980:	2000002c 	.word	0x2000002c

08005984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b090      	sub	sp, #64	; 0x40
 800598a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
 8005990:	2300      	movs	r3, #0
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005994:	2300      	movs	r3, #0
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 030c 	and.w	r3, r3, #12
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d00d      	beq.n	80059c4 <HAL_RCC_GetSysClockFreq+0x40>
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	f200 80a2 	bhi.w	8005af2 <HAL_RCC_GetSysClockFreq+0x16e>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x34>
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d003      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x3a>
 80059b6:	e09c      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80059bc:	e09c      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059be:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059c2:	e099      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c4:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ce:	4b4d      	ldr	r3, [pc, #308]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d027      	beq.n	8005a2a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b4a      	ldr	r3, [pc, #296]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	2200      	movs	r2, #0
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	627a      	str	r2, [r7, #36]	; 0x24
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059ec:	2100      	movs	r1, #0
 80059ee:	4b47      	ldr	r3, [pc, #284]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059f0:	fb03 f201 	mul.w	r2, r3, r1
 80059f4:	2300      	movs	r3, #0
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	4a43      	ldr	r2, [pc, #268]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80059fe:	fba0 2102 	umull	r2, r1, r0, r2
 8005a02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a04:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a08:	4413      	add	r3, r2
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0e:	2200      	movs	r2, #0
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	61fa      	str	r2, [r7, #28]
 8005a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a1c:	f7fb fa5a 	bl	8000ed4 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a28:	e055      	b.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2a:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	2200      	movs	r2, #0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	617a      	str	r2, [r7, #20]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a3c:	f04f 0b00 	mov.w	fp, #0
 8005a40:	4652      	mov	r2, sl
 8005a42:	465b      	mov	r3, fp
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a52:	0150      	lsls	r0, r2, #5
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	ebb2 080a 	subs.w	r8, r2, sl
 8005a5c:	eb63 090b 	sbc.w	r9, r3, fp
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a6c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a70:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a74:	ebb2 0408 	subs.w	r4, r2, r8
 8005a78:	eb63 0509 	sbc.w	r5, r3, r9
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	00eb      	lsls	r3, r5, #3
 8005a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a8a:	00e2      	lsls	r2, r4, #3
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	461d      	mov	r5, r3
 8005a90:	eb14 030a 	adds.w	r3, r4, sl
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	eb45 030b 	adc.w	r3, r5, fp
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	028b      	lsls	r3, r1, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	028a      	lsls	r2, r1, #10
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	60fa      	str	r2, [r7, #12]
 8005ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aca:	f7fb fa03 	bl	8000ed4 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af0:	e002      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x184>)
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3740      	adds	r7, #64	; 0x40
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	017d7840 	.word	0x017d7840

08005b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b14:	4b02      	ldr	r3, [pc, #8]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	20000028 	.word	0x20000028

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005b2a:	f7ff fff1 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b2e:	4601      	mov	r1, r0
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005b38:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005b3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	fa92 f2a2 	rbit	r2, r2
 8005b44:	603a      	str	r2, [r7, #0]
  return result;
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	fab2 f282 	clz	r2, r2
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	40d3      	lsrs	r3, r2
 8005b50:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b52:	5cd3      	ldrb	r3, [r2, r3]
 8005b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800b6d0 	.word	0x0800b6d0

08005b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005b6e:	f7ff ffcf 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b72:	4601      	mov	r1, r0
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b7c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005b80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	603a      	str	r2, [r7, #0]
  return result;
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	40d3      	lsrs	r3, r2
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	0800b6d0 	.word	0x0800b6d0

08005bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0b7      	b.n	8005d2e <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d031      	beq.n	8005c2a <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_UART_Init+0x18c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_UART_Init+0x4c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a59      	ldr	r2, [pc, #356]	; (8005d3c <HAL_UART_Init+0x190>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_UART_Init+0x4c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a58      	ldr	r2, [pc, #352]	; (8005d40 <HAL_UART_Init+0x194>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_UART_Init+0x4c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a56      	ldr	r2, [pc, #344]	; (8005d44 <HAL_UART_Init+0x198>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_UART_Init+0x4c>
 8005bee:	f240 116d 	movw	r1, #365	; 0x16d
 8005bf2:	4855      	ldr	r0, [pc, #340]	; (8005d48 <HAL_UART_Init+0x19c>)
 8005bf4:	f7fe f819 	bl	8003c2a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d037      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c08:	d032      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c12:	d02d      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c1c:	d028      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c1e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8005c22:	4849      	ldr	r0, [pc, #292]	; (8005d48 <HAL_UART_Init+0x19c>)
 8005c24:	f7fe f801 	bl	8003c2a <assert_failed>
 8005c28:	e022      	b.n	8005c70 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a42      	ldr	r2, [pc, #264]	; (8005d38 <HAL_UART_Init+0x18c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a40      	ldr	r2, [pc, #256]	; (8005d3c <HAL_UART_Init+0x190>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <HAL_UART_Init+0x194>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3f      	ldr	r2, [pc, #252]	; (8005d4c <HAL_UART_Init+0x1a0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	; (8005d50 <HAL_UART_Init+0x1a4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <HAL_UART_Init+0x198>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_UART_Init+0xc4>
 8005c66:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005c6a:	4837      	ldr	r0, [pc, #220]	; (8005d48 <HAL_UART_Init+0x19c>)
 8005c6c:	f7fd ffdd 	bl	8003c2a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_UART_Init+0xe0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d004      	beq.n	8005c8c <HAL_UART_Init+0xe0>
 8005c82:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005c86:	4830      	ldr	r0, [pc, #192]	; (8005d48 <HAL_UART_Init+0x19c>)
 8005c88:	f7fd ffcf 	bl	8003c2a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_UART_Init+0xfc>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9c:	d004      	beq.n	8005ca8 <HAL_UART_Init+0xfc>
 8005c9e:	f240 1175 	movw	r1, #373	; 0x175
 8005ca2:	4829      	ldr	r0, [pc, #164]	; (8005d48 <HAL_UART_Init+0x19c>)
 8005ca4:	f7fd ffc1 	bl	8003c2a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fe f831 	bl	8003d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2224      	movs	r2, #36	; 0x24
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fdd4 	bl	8006888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	40004400 	.word	0x40004400
 8005d40:	40004800 	.word	0x40004800
 8005d44:	40011400 	.word	0x40011400
 8005d48:	0800b684 	.word	0x0800b684
 8005d4c:	40004c00 	.word	0x40004c00
 8005d50:	40005000 	.word	0x40005000

08005d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d16d      	bne.n	8005e50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_UART_Transmit+0x2c>
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e066      	b.n	8005e52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2221      	movs	r2, #33	; 0x21
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d92:	f7fe fa33 	bl	80041fc <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d108      	bne.n	8005dc0 <HAL_UART_Transmit+0x6c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e003      	b.n	8005dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc8:	e02a      	b.n	8005e20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fb14 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e036      	b.n	8005e52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e007      	b.n	8005e12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	781a      	ldrb	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1cf      	bne.n	8005dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2140      	movs	r1, #64	; 0x40
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fae4 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e006      	b.n	8005e52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e000      	b.n	8005e52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e50:	2302      	movs	r3, #2
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d112      	bne.n	8005e9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_UART_Receive_IT+0x26>
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e00b      	b.n	8005e9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fb24 	bl	80064de <UART_Start_Receive_IT>
 8005e96:	4603      	mov	r3, r0
 8005e98:	e000      	b.n	8005e9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b0ba      	sub	sp, #232	; 0xe8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10f      	bne.n	8005f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_UART_IRQHandler+0x66>
 8005ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fc01 	bl	800670a <UART_Receive_IT>
      return;
 8005f08:	e25b      	b.n	80063c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80de 	beq.w	80060d0 <HAL_UART_IRQHandler+0x22c>
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80d1 	beq.w	80060d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_UART_IRQHandler+0xae>
 8005f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <HAL_UART_IRQHandler+0xd2>
 8005f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f043 0202 	orr.w	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_UART_IRQHandler+0xf6>
 8005f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d011      	beq.n	8005fca <HAL_UART_IRQHandler+0x126>
 8005fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 81f2 	beq.w	80063b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x14e>
 8005fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb8c 	bl	800670a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <HAL_UART_IRQHandler+0x17a>
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d04f      	beq.n	80060be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa96 	bl	8006550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d141      	bne.n	80060b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800605e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800606a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1d9      	bne.n	8006032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d013      	beq.n	80060ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	4a7e      	ldr	r2, [pc, #504]	; (8006284 <HAL_UART_IRQHandler+0x3e0>)
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fc6f 	bl	8004976 <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e00e      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f993 	bl	80063da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e00a      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f98f 	bl	80063da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e006      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f98b 	bl	80063da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80060ca:	e175      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	bf00      	nop
    return;
 80060ce:	e173      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 814f 	bne.w	8006378 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8148 	beq.w	8006378 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8141 	beq.w	8006378 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	f040 80b6 	bne.w	8006288 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8145 	beq.w	80063bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613a:	429a      	cmp	r2, r3
 800613c:	f080 813e 	bcs.w	80063bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006146:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006152:	f000 8088 	beq.w	8006266 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800616c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800618e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800619a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d9      	bne.n	8006156 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e1      	bne.n	80061a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3314      	adds	r3, #20
 80061fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e3      	bne.n	80061de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	f023 0310 	bic.w	r3, r3, #16
 800623a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006248:	65ba      	str	r2, [r7, #88]	; 0x58
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800624e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e3      	bne.n	8006224 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fb18 	bl	8004896 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006274:	b29b      	uxth	r3, r3
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	b29b      	uxth	r3, r3
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8b5 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006282:	e09b      	b.n	80063bc <HAL_UART_IRQHandler+0x518>
 8006284:	08006615 	.word	0x08006615
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006290:	b29b      	uxth	r3, r3
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 808e 	beq.w	80063c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8089 	beq.w	80063c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062d2:	647a      	str	r2, [r7, #68]	; 0x44
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e3      	bne.n	80062ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3314      	adds	r3, #20
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	623b      	str	r3, [r7, #32]
   return(result);
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800630a:	633a      	str	r2, [r7, #48]	; 0x30
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e3      	bne.n	80062e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	60fb      	str	r3, [r7, #12]
   return(result);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006350:	61fa      	str	r2, [r7, #28]
 8006352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	617b      	str	r3, [r7, #20]
   return(result);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e3      	bne.n	800632c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800636a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f83b 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006376:	e023      	b.n	80063c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <HAL_UART_IRQHandler+0x4f4>
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f953 	bl	800663c <UART_Transmit_IT>
    return;
 8006396:	e014      	b.n	80063c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <HAL_UART_IRQHandler+0x51e>
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f992 	bl	80066da <UART_EndTransmit_IT>
    return;
 80063b6:	e004      	b.n	80063c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80063c0:	bf00      	nop
  }
}
 80063c2:	37e8      	adds	r7, #232	; 0xe8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b090      	sub	sp, #64	; 0x40
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006412:	e050      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d04c      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800641c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0x30>
 8006422:	f7fd feeb 	bl	80041fc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642e:	429a      	cmp	r2, r3
 8006430:	d241      	bcs.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	330c      	adds	r3, #12
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006452:	637a      	str	r2, [r7, #52]	; 0x34
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e5      	bne.n	8006432 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	613b      	str	r3, [r7, #16]
   return(result);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3314      	adds	r3, #20
 8006484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006486:	623a      	str	r2, [r7, #32]
 8006488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	69f9      	ldr	r1, [r7, #28]
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	61bb      	str	r3, [r7, #24]
   return(result);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e5      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e00f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d09f      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3740      	adds	r7, #64	; 0x40
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2222      	movs	r2, #34	; 0x22
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006522:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0220 	orr.w	r2, r2, #32
 8006542:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr

08006550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b095      	sub	sp, #84	; 0x54
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006578:	643a      	str	r2, [r7, #64]	; 0x40
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800657e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	61fb      	str	r3, [r7, #28]
   return(result);
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e5      	bne.n	800658c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d119      	bne.n	80065fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 0310 	bic.w	r3, r3, #16
 80065de:	647b      	str	r3, [r7, #68]	; 0x44
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	330c      	adds	r3, #12
 80065e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e8:	61ba      	str	r2, [r7, #24]
 80065ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	613b      	str	r3, [r7, #16]
   return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e5      	bne.n	80065c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800660a:	bf00      	nop
 800660c:	3754      	adds	r7, #84	; 0x54
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fed3 	bl	80063da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b21      	cmp	r3, #33	; 0x21
 800664e:	d13e      	bne.n	80066ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006658:	d114      	bne.n	8006684 <UART_Transmit_IT+0x48>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d110      	bne.n	8006684 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006676:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]
 8006682:	e008      	b.n	8006696 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6211      	str	r1, [r2, #32]
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29b      	uxth	r3, r3
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4619      	mov	r1, r3
 80066a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e000      	b.n	80066d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
  }
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff fe64 	bl	80063c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b08c      	sub	sp, #48	; 0x30
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b22      	cmp	r3, #34	; 0x22
 800671c:	f040 80ae 	bne.w	800687c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d117      	bne.n	800675a <UART_Receive_IT+0x50>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d113      	bne.n	800675a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	b29a      	uxth	r2, r3
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
 8006758:	e026      	b.n	80067a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676c:	d007      	beq.n	800677e <UART_Receive_IT+0x74>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <UART_Receive_IT+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e008      	b.n	800679e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d15d      	bne.n	8006878 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0220 	bic.w	r2, r2, #32
 80067ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d135      	bne.n	800686e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	623a      	str	r2, [r7, #32]
 800682a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	61bb      	str	r3, [r7, #24]
   return(result);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b10      	cmp	r3, #16
 8006848:	d10a      	bne.n	8006860 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fdc0 	bl	80063ec <HAL_UARTEx_RxEventCallback>
 800686c:	e002      	b.n	8006874 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fb7e 	bl	8002f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e002      	b.n	800687e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3730      	adds	r7, #48	; 0x30
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4a8c      	ldr	r2, [pc, #560]	; (8006ac8 <UART_SetConfig+0x240>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d904      	bls.n	80068a4 <UART_SetConfig+0x1c>
 800689a:	f640 615d 	movw	r1, #3677	; 0xe5d
 800689e:	488b      	ldr	r0, [pc, #556]	; (8006acc <UART_SetConfig+0x244>)
 80068a0:	f7fd f9c3 	bl	8003c2a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <UART_SetConfig+0x38>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b4:	d004      	beq.n	80068c0 <UART_SetConfig+0x38>
 80068b6:	f640 615e 	movw	r1, #3678	; 0xe5e
 80068ba:	4884      	ldr	r0, [pc, #528]	; (8006acc <UART_SetConfig+0x244>)
 80068bc:	f7fd f9b5 	bl	8003c2a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <UART_SetConfig+0x5e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d0:	d009      	beq.n	80068e6 <UART_SetConfig+0x5e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068da:	d004      	beq.n	80068e6 <UART_SetConfig+0x5e>
 80068dc:	f640 615f 	movw	r1, #3679	; 0xe5f
 80068e0:	487a      	ldr	r0, [pc, #488]	; (8006acc <UART_SetConfig+0x244>)
 80068e2:	f7fd f9a2 	bl	8003c2a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <UART_SetConfig+0x74>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <UART_SetConfig+0x7e>
 80068fc:	f44f 6166 	mov.w	r1, #3680	; 0xe60
 8006900:	4872      	ldr	r0, [pc, #456]	; (8006acc <UART_SetConfig+0x244>)
 8006902:	f7fd f992 	bl	8003c2a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	4313      	orrs	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800693e:	f023 030c 	bic.w	r3, r3, #12
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	430b      	orrs	r3, r1
 800694a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a5a      	ldr	r2, [pc, #360]	; (8006ad0 <UART_SetConfig+0x248>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <UART_SetConfig+0xee>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a58      	ldr	r2, [pc, #352]	; (8006ad4 <UART_SetConfig+0x24c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d103      	bne.n	800697e <UART_SetConfig+0xf6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006976:	f7ff f8f7 	bl	8005b68 <HAL_RCC_GetPCLK2Freq>
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	e002      	b.n	8006984 <UART_SetConfig+0xfc>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800697e:	f7ff f8d1 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8006982:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698c:	d14c      	bne.n	8006a28 <UART_SetConfig+0x1a0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009a      	lsls	r2, r3, #2
 8006998:	441a      	add	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	4a4c      	ldr	r2, [pc, #304]	; (8006ad8 <UART_SetConfig+0x250>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	0119      	lsls	r1, r3, #4
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009a      	lsls	r2, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80069c4:	4b44      	ldr	r3, [pc, #272]	; (8006ad8 <UART_SetConfig+0x250>)
 80069c6:	fba3 0302 	umull	r0, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2064      	movs	r0, #100	; 0x64
 80069ce:	fb00 f303 	mul.w	r3, r0, r3
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	3332      	adds	r3, #50	; 0x32
 80069d8:	4a3f      	ldr	r2, [pc, #252]	; (8006ad8 <UART_SetConfig+0x250>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e6:	4419      	add	r1, r3
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009a      	lsls	r2, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fe:	4b36      	ldr	r3, [pc, #216]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a00:	fba3 0302 	umull	r0, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	2064      	movs	r0, #100	; 0x64
 8006a08:	fb00 f303 	mul.w	r3, r0, r3
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	3332      	adds	r3, #50	; 0x32
 8006a12:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	f003 0207 	and.w	r2, r3, #7
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	440a      	add	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a26:	e04a      	b.n	8006abe <UART_SetConfig+0x236>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009a      	lsls	r2, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	0119      	lsls	r1, r3, #4
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009a      	lsls	r2, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a60:	fba3 0302 	umull	r0, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2064      	movs	r0, #100	; 0x64
 8006a68:	fb00 f303 	mul.w	r3, r0, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a19      	ldr	r2, [pc, #100]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a7e:	4419      	add	r1, r3
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009a      	lsls	r2, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <UART_SetConfig+0x250>)
 8006a98:	fba3 0302 	umull	r0, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	2064      	movs	r0, #100	; 0x64
 8006aa0:	fb00 f303 	mul.w	r3, r0, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	3332      	adds	r3, #50	; 0x32
 8006aaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ad8 <UART_SetConfig+0x250>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	440a      	add	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	00a037a0 	.word	0x00a037a0
 8006acc:	0800b684 	.word	0x0800b684
 8006ad0:	40011000 	.word	0x40011000
 8006ad4:	40011400 	.word	0x40011400
 8006ad8:	51eb851f 	.word	0x51eb851f

08006adc <atof>:
 8006adc:	2100      	movs	r1, #0
 8006ade:	f001 bd5b 	b.w	8008598 <strtod>

08006ae2 <atoi>:
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	f001 be3b 	b.w	8008760 <strtol>
	...

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	; (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000034 	.word	0x20000034

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	2600      	movs	r6, #0
 8006afc:	4d0c      	ldr	r5, [pc, #48]	; (8006b30 <__libc_init_array+0x38>)
 8006afe:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006b00:	1b64      	subs	r4, r4, r5
 8006b02:	10a4      	asrs	r4, r4, #2
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	f004 fbea 	bl	800b2e0 <_init>
 8006b0c:	2600      	movs	r6, #0
 8006b0e:	4d0a      	ldr	r5, [pc, #40]	; (8006b38 <__libc_init_array+0x40>)
 8006b10:	4c0a      	ldr	r4, [pc, #40]	; (8006b3c <__libc_init_array+0x44>)
 8006b12:	1b64      	subs	r4, r4, r5
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	0800bc40 	.word	0x0800bc40
 8006b34:	0800bc40 	.word	0x0800bc40
 8006b38:	0800bc40 	.word	0x0800bc40
 8006b3c:	0800bc44 	.word	0x0800bc44

08006b40 <malloc>:
 8006b40:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <malloc+0xc>)
 8006b42:	4601      	mov	r1, r0
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f000 b889 	b.w	8006c5c <_malloc_r>
 8006b4a:	bf00      	nop
 8006b4c:	20000034 	.word	0x20000034

08006b50 <free>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <free+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f000 b819 	b.w	8006b8c <_free_r>
 8006b5a:	bf00      	nop
 8006b5c:	20000034 	.word	0x20000034

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <memset>:
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4402      	add	r2, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <_free_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4605      	mov	r5, r0
 8006b90:	2900      	cmp	r1, #0
 8006b92:	d040      	beq.n	8006c16 <_free_r+0x8a>
 8006b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b98:	1f0c      	subs	r4, r1, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfb8      	it	lt
 8006b9e:	18e4      	addlt	r4, r4, r3
 8006ba0:	f003 fb30 	bl	800a204 <__malloc_lock>
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <_free_r+0x8c>)
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	b933      	cbnz	r3, 8006bb8 <_free_r+0x2c>
 8006baa:	6063      	str	r3, [r4, #4]
 8006bac:	6014      	str	r4, [r2, #0]
 8006bae:	4628      	mov	r0, r5
 8006bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb4:	f003 bb2c 	b.w	800a210 <__malloc_unlock>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d908      	bls.n	8006bce <_free_r+0x42>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	1821      	adds	r1, r4, r0
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf01      	itttt	eq
 8006bc4:	6819      	ldreq	r1, [r3, #0]
 8006bc6:	685b      	ldreq	r3, [r3, #4]
 8006bc8:	1809      	addeq	r1, r1, r0
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	e7ed      	b.n	8006baa <_free_r+0x1e>
 8006bce:	461a      	mov	r2, r3
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	b10b      	cbz	r3, 8006bd8 <_free_r+0x4c>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d9fa      	bls.n	8006bce <_free_r+0x42>
 8006bd8:	6811      	ldr	r1, [r2, #0]
 8006bda:	1850      	adds	r0, r2, r1
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d10b      	bne.n	8006bf8 <_free_r+0x6c>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	4401      	add	r1, r0
 8006be4:	1850      	adds	r0, r2, r1
 8006be6:	4283      	cmp	r3, r0
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	d1e0      	bne.n	8006bae <_free_r+0x22>
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4401      	add	r1, r0
 8006bf2:	6011      	str	r1, [r2, #0]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	e7da      	b.n	8006bae <_free_r+0x22>
 8006bf8:	d902      	bls.n	8006c00 <_free_r+0x74>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	e7d6      	b.n	8006bae <_free_r+0x22>
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	1821      	adds	r1, r4, r0
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf01      	itttt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	1809      	addeq	r1, r1, r0
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	6054      	str	r4, [r2, #4]
 8006c14:	e7cb      	b.n	8006bae <_free_r+0x22>
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000798 	.word	0x20000798

08006c1c <sbrk_aligned>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	4e0e      	ldr	r6, [pc, #56]	; (8006c58 <sbrk_aligned+0x3c>)
 8006c20:	460c      	mov	r4, r1
 8006c22:	6831      	ldr	r1, [r6, #0]
 8006c24:	4605      	mov	r5, r0
 8006c26:	b911      	cbnz	r1, 8006c2e <sbrk_aligned+0x12>
 8006c28:	f000 fdc0 	bl	80077ac <_sbrk_r>
 8006c2c:	6030      	str	r0, [r6, #0]
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 fdbb 	bl	80077ac <_sbrk_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d00a      	beq.n	8006c50 <sbrk_aligned+0x34>
 8006c3a:	1cc4      	adds	r4, r0, #3
 8006c3c:	f024 0403 	bic.w	r4, r4, #3
 8006c40:	42a0      	cmp	r0, r4
 8006c42:	d007      	beq.n	8006c54 <sbrk_aligned+0x38>
 8006c44:	1a21      	subs	r1, r4, r0
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fdb0 	bl	80077ac <_sbrk_r>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d101      	bne.n	8006c54 <sbrk_aligned+0x38>
 8006c50:	f04f 34ff 	mov.w	r4, #4294967295
 8006c54:	4620      	mov	r0, r4
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	2000079c 	.word	0x2000079c

08006c5c <_malloc_r>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	1ccd      	adds	r5, r1, #3
 8006c62:	f025 0503 	bic.w	r5, r5, #3
 8006c66:	3508      	adds	r5, #8
 8006c68:	2d0c      	cmp	r5, #12
 8006c6a:	bf38      	it	cc
 8006c6c:	250c      	movcc	r5, #12
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	4607      	mov	r7, r0
 8006c72:	db01      	blt.n	8006c78 <_malloc_r+0x1c>
 8006c74:	42a9      	cmp	r1, r5
 8006c76:	d905      	bls.n	8006c84 <_malloc_r+0x28>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4630      	mov	r0, r6
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	4e2e      	ldr	r6, [pc, #184]	; (8006d40 <_malloc_r+0xe4>)
 8006c86:	f003 fabd 	bl	800a204 <__malloc_lock>
 8006c8a:	6833      	ldr	r3, [r6, #0]
 8006c8c:	461c      	mov	r4, r3
 8006c8e:	bb34      	cbnz	r4, 8006cde <_malloc_r+0x82>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ffc2 	bl	8006c1c <sbrk_aligned>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	d14d      	bne.n	8006d3a <_malloc_r+0xde>
 8006c9e:	6834      	ldr	r4, [r6, #0]
 8006ca0:	4626      	mov	r6, r4
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	d140      	bne.n	8006d28 <_malloc_r+0xcc>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4638      	mov	r0, r7
 8006cac:	eb04 0803 	add.w	r8, r4, r3
 8006cb0:	f000 fd7c 	bl	80077ac <_sbrk_r>
 8006cb4:	4580      	cmp	r8, r0
 8006cb6:	d13a      	bne.n	8006d2e <_malloc_r+0xd2>
 8006cb8:	6821      	ldr	r1, [r4, #0]
 8006cba:	3503      	adds	r5, #3
 8006cbc:	1a6d      	subs	r5, r5, r1
 8006cbe:	f025 0503 	bic.w	r5, r5, #3
 8006cc2:	3508      	adds	r5, #8
 8006cc4:	2d0c      	cmp	r5, #12
 8006cc6:	bf38      	it	cc
 8006cc8:	250c      	movcc	r5, #12
 8006cca:	4638      	mov	r0, r7
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7ff ffa5 	bl	8006c1c <sbrk_aligned>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d02b      	beq.n	8006d2e <_malloc_r+0xd2>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	442b      	add	r3, r5
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	e00e      	b.n	8006cfc <_malloc_r+0xa0>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	1b52      	subs	r2, r2, r5
 8006ce2:	d41e      	bmi.n	8006d22 <_malloc_r+0xc6>
 8006ce4:	2a0b      	cmp	r2, #11
 8006ce6:	d916      	bls.n	8006d16 <_malloc_r+0xba>
 8006ce8:	1961      	adds	r1, r4, r5
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	6025      	str	r5, [r4, #0]
 8006cee:	bf18      	it	ne
 8006cf0:	6059      	strne	r1, [r3, #4]
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	bf08      	it	eq
 8006cf6:	6031      	streq	r1, [r6, #0]
 8006cf8:	5162      	str	r2, [r4, r5]
 8006cfa:	604b      	str	r3, [r1, #4]
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	f104 060b 	add.w	r6, r4, #11
 8006d02:	f003 fa85 	bl	800a210 <__malloc_unlock>
 8006d06:	f026 0607 	bic.w	r6, r6, #7
 8006d0a:	1d23      	adds	r3, r4, #4
 8006d0c:	1af2      	subs	r2, r6, r3
 8006d0e:	d0b6      	beq.n	8006c7e <_malloc_r+0x22>
 8006d10:	1b9b      	subs	r3, r3, r6
 8006d12:	50a3      	str	r3, [r4, r2]
 8006d14:	e7b3      	b.n	8006c7e <_malloc_r+0x22>
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	bf0c      	ite	eq
 8006d1c:	6032      	streq	r2, [r6, #0]
 8006d1e:	605a      	strne	r2, [r3, #4]
 8006d20:	e7ec      	b.n	8006cfc <_malloc_r+0xa0>
 8006d22:	4623      	mov	r3, r4
 8006d24:	6864      	ldr	r4, [r4, #4]
 8006d26:	e7b2      	b.n	8006c8e <_malloc_r+0x32>
 8006d28:	4634      	mov	r4, r6
 8006d2a:	6876      	ldr	r6, [r6, #4]
 8006d2c:	e7b9      	b.n	8006ca2 <_malloc_r+0x46>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	4638      	mov	r0, r7
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	f003 fa6c 	bl	800a210 <__malloc_unlock>
 8006d38:	e7a1      	b.n	8006c7e <_malloc_r+0x22>
 8006d3a:	6025      	str	r5, [r4, #0]
 8006d3c:	e7de      	b.n	8006cfc <_malloc_r+0xa0>
 8006d3e:	bf00      	nop
 8006d40:	20000798 	.word	0x20000798

08006d44 <__cvt>:
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	bfbb      	ittet	lt
 8006d4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d52:	461f      	movlt	r7, r3
 8006d54:	2300      	movge	r3, #0
 8006d56:	232d      	movlt	r3, #45	; 0x2d
 8006d58:	b088      	sub	sp, #32
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d60:	7013      	strb	r3, [r2, #0]
 8006d62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d68:	f023 0820 	bic.w	r8, r3, #32
 8006d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d70:	d005      	beq.n	8006d7e <__cvt+0x3a>
 8006d72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d76:	d100      	bne.n	8006d7a <__cvt+0x36>
 8006d78:	3501      	adds	r5, #1
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e000      	b.n	8006d80 <__cvt+0x3c>
 8006d7e:	2303      	movs	r3, #3
 8006d80:	aa07      	add	r2, sp, #28
 8006d82:	9204      	str	r2, [sp, #16]
 8006d84:	aa06      	add	r2, sp, #24
 8006d86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d8a:	e9cd 3500 	strd	r3, r5, [sp]
 8006d8e:	4622      	mov	r2, r4
 8006d90:	463b      	mov	r3, r7
 8006d92:	f001 fe7d 	bl	8008a90 <_dtoa_r>
 8006d96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	d102      	bne.n	8006da4 <__cvt+0x60>
 8006d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006da0:	07db      	lsls	r3, r3, #31
 8006da2:	d522      	bpl.n	8006dea <__cvt+0xa6>
 8006da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006da8:	eb06 0905 	add.w	r9, r6, r5
 8006dac:	d110      	bne.n	8006dd0 <__cvt+0x8c>
 8006dae:	7833      	ldrb	r3, [r6, #0]
 8006db0:	2b30      	cmp	r3, #48	; 0x30
 8006db2:	d10a      	bne.n	8006dca <__cvt+0x86>
 8006db4:	2200      	movs	r2, #0
 8006db6:	2300      	movs	r3, #0
 8006db8:	4620      	mov	r0, r4
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fe3a 	bl	8000a34 <__aeabi_dcmpeq>
 8006dc0:	b918      	cbnz	r0, 8006dca <__cvt+0x86>
 8006dc2:	f1c5 0501 	rsb	r5, r5, #1
 8006dc6:	f8ca 5000 	str.w	r5, [sl]
 8006dca:	f8da 3000 	ldr.w	r3, [sl]
 8006dce:	4499      	add	r9, r3
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe2c 	bl	8000a34 <__aeabi_dcmpeq>
 8006ddc:	b108      	cbz	r0, 8006de2 <__cvt+0x9e>
 8006dde:	f8cd 901c 	str.w	r9, [sp, #28]
 8006de2:	2230      	movs	r2, #48	; 0x30
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	454b      	cmp	r3, r9
 8006de8:	d307      	bcc.n	8006dfa <__cvt+0xb6>
 8006dea:	4630      	mov	r0, r6
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006df0:	1b9b      	subs	r3, r3, r6
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	b008      	add	sp, #32
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	1c59      	adds	r1, r3, #1
 8006dfc:	9107      	str	r1, [sp, #28]
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e7f0      	b.n	8006de4 <__cvt+0xa0>

08006e02 <__exponent>:
 8006e02:	4603      	mov	r3, r0
 8006e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e06:	2900      	cmp	r1, #0
 8006e08:	f803 2b02 	strb.w	r2, [r3], #2
 8006e0c:	bfb6      	itet	lt
 8006e0e:	222d      	movlt	r2, #45	; 0x2d
 8006e10:	222b      	movge	r2, #43	; 0x2b
 8006e12:	4249      	neglt	r1, r1
 8006e14:	2909      	cmp	r1, #9
 8006e16:	7042      	strb	r2, [r0, #1]
 8006e18:	dd2b      	ble.n	8006e72 <__exponent+0x70>
 8006e1a:	f10d 0407 	add.w	r4, sp, #7
 8006e1e:	46a4      	mov	ip, r4
 8006e20:	270a      	movs	r7, #10
 8006e22:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e26:	460a      	mov	r2, r1
 8006e28:	46a6      	mov	lr, r4
 8006e2a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e2e:	2a63      	cmp	r2, #99	; 0x63
 8006e30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e34:	4631      	mov	r1, r6
 8006e36:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e3e:	dcf0      	bgt.n	8006e22 <__exponent+0x20>
 8006e40:	3130      	adds	r1, #48	; 0x30
 8006e42:	f1ae 0502 	sub.w	r5, lr, #2
 8006e46:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	1c44      	adds	r4, r0, #1
 8006e4e:	4561      	cmp	r1, ip
 8006e50:	d30a      	bcc.n	8006e68 <__exponent+0x66>
 8006e52:	f10d 0209 	add.w	r2, sp, #9
 8006e56:	eba2 020e 	sub.w	r2, r2, lr
 8006e5a:	4565      	cmp	r5, ip
 8006e5c:	bf88      	it	hi
 8006e5e:	2200      	movhi	r2, #0
 8006e60:	4413      	add	r3, r2
 8006e62:	1a18      	subs	r0, r3, r0
 8006e64:	b003      	add	sp, #12
 8006e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e70:	e7ed      	b.n	8006e4e <__exponent+0x4c>
 8006e72:	2330      	movs	r3, #48	; 0x30
 8006e74:	3130      	adds	r1, #48	; 0x30
 8006e76:	7083      	strb	r3, [r0, #2]
 8006e78:	70c1      	strb	r1, [r0, #3]
 8006e7a:	1d03      	adds	r3, r0, #4
 8006e7c:	e7f1      	b.n	8006e62 <__exponent+0x60>
	...

08006e80 <_printf_float>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	b091      	sub	sp, #68	; 0x44
 8006e86:	460c      	mov	r4, r1
 8006e88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e8c:	4616      	mov	r6, r2
 8006e8e:	461f      	mov	r7, r3
 8006e90:	4605      	mov	r5, r0
 8006e92:	f003 f917 	bl	800a0c4 <_localeconv_r>
 8006e96:	6803      	ldr	r3, [r0, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9c:	f7f9 f99e 	bl	80001dc <strlen>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea8:	900a      	str	r0, [sp, #40]	; 0x28
 8006eaa:	3307      	adds	r3, #7
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	f103 0208 	add.w	r2, r3, #8
 8006eb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8006ebc:	f8c8 2000 	str.w	r2, [r8]
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ec8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ecc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4b9c      	ldr	r3, [pc, #624]	; (800714c <_printf_float+0x2cc>)
 8006eda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006edc:	f7f9 fddc 	bl	8000a98 <__aeabi_dcmpun>
 8006ee0:	bb70      	cbnz	r0, 8006f40 <_printf_float+0xc0>
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4b98      	ldr	r3, [pc, #608]	; (800714c <_printf_float+0x2cc>)
 8006eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eec:	f7f9 fdb6 	bl	8000a5c <__aeabi_dcmple>
 8006ef0:	bb30      	cbnz	r0, 8006f40 <_printf_float+0xc0>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4651      	mov	r1, sl
 8006efa:	f7f9 fda5 	bl	8000a48 <__aeabi_dcmplt>
 8006efe:	b110      	cbz	r0, 8006f06 <_printf_float+0x86>
 8006f00:	232d      	movs	r3, #45	; 0x2d
 8006f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f06:	4b92      	ldr	r3, [pc, #584]	; (8007150 <_printf_float+0x2d0>)
 8006f08:	4892      	ldr	r0, [pc, #584]	; (8007154 <_printf_float+0x2d4>)
 8006f0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f0e:	bf94      	ite	ls
 8006f10:	4698      	movls	r8, r3
 8006f12:	4680      	movhi	r8, r0
 8006f14:	2303      	movs	r3, #3
 8006f16:	f04f 0a00 	mov.w	sl, #0
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	f02b 0304 	bic.w	r3, fp, #4
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	4633      	mov	r3, r6
 8006f24:	4621      	mov	r1, r4
 8006f26:	4628      	mov	r0, r5
 8006f28:	9700      	str	r7, [sp, #0]
 8006f2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f2c:	f000 f9d4 	bl	80072d8 <_printf_common>
 8006f30:	3001      	adds	r0, #1
 8006f32:	f040 8090 	bne.w	8007056 <_printf_float+0x1d6>
 8006f36:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3a:	b011      	add	sp, #68	; 0x44
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	4642      	mov	r2, r8
 8006f42:	4653      	mov	r3, sl
 8006f44:	4640      	mov	r0, r8
 8006f46:	4651      	mov	r1, sl
 8006f48:	f7f9 fda6 	bl	8000a98 <__aeabi_dcmpun>
 8006f4c:	b148      	cbz	r0, 8006f62 <_printf_float+0xe2>
 8006f4e:	f1ba 0f00 	cmp.w	sl, #0
 8006f52:	bfb8      	it	lt
 8006f54:	232d      	movlt	r3, #45	; 0x2d
 8006f56:	4880      	ldr	r0, [pc, #512]	; (8007158 <_printf_float+0x2d8>)
 8006f58:	bfb8      	it	lt
 8006f5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f5e:	4b7f      	ldr	r3, [pc, #508]	; (800715c <_printf_float+0x2dc>)
 8006f60:	e7d3      	b.n	8006f0a <_printf_float+0x8a>
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	d142      	bne.n	8006ff2 <_printf_float+0x172>
 8006f6c:	2306      	movs	r3, #6
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	9206      	str	r2, [sp, #24]
 8006f74:	aa0e      	add	r2, sp, #56	; 0x38
 8006f76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f7a:	aa0d      	add	r2, sp, #52	; 0x34
 8006f7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f80:	9203      	str	r2, [sp, #12]
 8006f82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	4642      	mov	r2, r8
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4628      	mov	r0, r5
 8006f94:	4653      	mov	r3, sl
 8006f96:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f98:	f7ff fed4 	bl	8006d44 <__cvt>
 8006f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	2947      	cmp	r1, #71	; 0x47
 8006fa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fa4:	d108      	bne.n	8006fb8 <_printf_float+0x138>
 8006fa6:	1cc8      	adds	r0, r1, #3
 8006fa8:	db02      	blt.n	8006fb0 <_printf_float+0x130>
 8006faa:	6863      	ldr	r3, [r4, #4]
 8006fac:	4299      	cmp	r1, r3
 8006fae:	dd40      	ble.n	8007032 <_printf_float+0x1b2>
 8006fb0:	f1a9 0902 	sub.w	r9, r9, #2
 8006fb4:	fa5f f989 	uxtb.w	r9, r9
 8006fb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fbc:	d81f      	bhi.n	8006ffe <_printf_float+0x17e>
 8006fbe:	464a      	mov	r2, r9
 8006fc0:	3901      	subs	r1, #1
 8006fc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fc6:	910d      	str	r1, [sp, #52]	; 0x34
 8006fc8:	f7ff ff1b 	bl	8006e02 <__exponent>
 8006fcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fce:	4682      	mov	sl, r0
 8006fd0:	1813      	adds	r3, r2, r0
 8006fd2:	2a01      	cmp	r2, #1
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	dc02      	bgt.n	8006fde <_printf_float+0x15e>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	07d2      	lsls	r2, r2, #31
 8006fdc:	d501      	bpl.n	8006fe2 <_printf_float+0x162>
 8006fde:	3301      	adds	r3, #1
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d09b      	beq.n	8006f22 <_printf_float+0xa2>
 8006fea:	232d      	movs	r3, #45	; 0x2d
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff0:	e797      	b.n	8006f22 <_printf_float+0xa2>
 8006ff2:	2947      	cmp	r1, #71	; 0x47
 8006ff4:	d1bc      	bne.n	8006f70 <_printf_float+0xf0>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ba      	bne.n	8006f70 <_printf_float+0xf0>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e7b7      	b.n	8006f6e <_printf_float+0xee>
 8006ffe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007002:	d118      	bne.n	8007036 <_printf_float+0x1b6>
 8007004:	2900      	cmp	r1, #0
 8007006:	6863      	ldr	r3, [r4, #4]
 8007008:	dd0b      	ble.n	8007022 <_printf_float+0x1a2>
 800700a:	6121      	str	r1, [r4, #16]
 800700c:	b913      	cbnz	r3, 8007014 <_printf_float+0x194>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	07d0      	lsls	r0, r2, #31
 8007012:	d502      	bpl.n	800701a <_printf_float+0x19a>
 8007014:	3301      	adds	r3, #1
 8007016:	440b      	add	r3, r1
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	f04f 0a00 	mov.w	sl, #0
 800701e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007020:	e7df      	b.n	8006fe2 <_printf_float+0x162>
 8007022:	b913      	cbnz	r3, 800702a <_printf_float+0x1aa>
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	07d2      	lsls	r2, r2, #31
 8007028:	d501      	bpl.n	800702e <_printf_float+0x1ae>
 800702a:	3302      	adds	r3, #2
 800702c:	e7f4      	b.n	8007018 <_printf_float+0x198>
 800702e:	2301      	movs	r3, #1
 8007030:	e7f2      	b.n	8007018 <_printf_float+0x198>
 8007032:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007038:	4299      	cmp	r1, r3
 800703a:	db05      	blt.n	8007048 <_printf_float+0x1c8>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	6121      	str	r1, [r4, #16]
 8007040:	07d8      	lsls	r0, r3, #31
 8007042:	d5ea      	bpl.n	800701a <_printf_float+0x19a>
 8007044:	1c4b      	adds	r3, r1, #1
 8007046:	e7e7      	b.n	8007018 <_printf_float+0x198>
 8007048:	2900      	cmp	r1, #0
 800704a:	bfcc      	ite	gt
 800704c:	2201      	movgt	r2, #1
 800704e:	f1c1 0202 	rsble	r2, r1, #2
 8007052:	4413      	add	r3, r2
 8007054:	e7e0      	b.n	8007018 <_printf_float+0x198>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	055a      	lsls	r2, r3, #21
 800705a:	d407      	bmi.n	800706c <_printf_float+0x1ec>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	4642      	mov	r2, r8
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	d12b      	bne.n	80070c2 <_printf_float+0x242>
 800706a:	e764      	b.n	8006f36 <_printf_float+0xb6>
 800706c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007070:	f240 80dd 	bls.w	800722e <_printf_float+0x3ae>
 8007074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007078:	2200      	movs	r2, #0
 800707a:	2300      	movs	r3, #0
 800707c:	f7f9 fcda 	bl	8000a34 <__aeabi_dcmpeq>
 8007080:	2800      	cmp	r0, #0
 8007082:	d033      	beq.n	80070ec <_printf_float+0x26c>
 8007084:	2301      	movs	r3, #1
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	4a35      	ldr	r2, [pc, #212]	; (8007160 <_printf_float+0x2e0>)
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af51 	beq.w	8006f36 <_printf_float+0xb6>
 8007094:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007098:	429a      	cmp	r2, r3
 800709a:	db02      	blt.n	80070a2 <_printf_float+0x222>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	07d8      	lsls	r0, r3, #31
 80070a0:	d50f      	bpl.n	80070c2 <_printf_float+0x242>
 80070a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f af42 	beq.w	8006f36 <_printf_float+0xb6>
 80070b2:	f04f 0800 	mov.w	r8, #0
 80070b6:	f104 091a 	add.w	r9, r4, #26
 80070ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070bc:	3b01      	subs	r3, #1
 80070be:	4543      	cmp	r3, r8
 80070c0:	dc09      	bgt.n	80070d6 <_printf_float+0x256>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	079b      	lsls	r3, r3, #30
 80070c6:	f100 8102 	bmi.w	80072ce <_printf_float+0x44e>
 80070ca:	68e0      	ldr	r0, [r4, #12]
 80070cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ce:	4298      	cmp	r0, r3
 80070d0:	bfb8      	it	lt
 80070d2:	4618      	movlt	r0, r3
 80070d4:	e731      	b.n	8006f3a <_printf_float+0xba>
 80070d6:	2301      	movs	r3, #1
 80070d8:	464a      	mov	r2, r9
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	f43f af28 	beq.w	8006f36 <_printf_float+0xb6>
 80070e6:	f108 0801 	add.w	r8, r8, #1
 80070ea:	e7e6      	b.n	80070ba <_printf_float+0x23a>
 80070ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dc38      	bgt.n	8007164 <_printf_float+0x2e4>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	4a19      	ldr	r2, [pc, #100]	; (8007160 <_printf_float+0x2e0>)
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f af1a 	beq.w	8006f36 <_printf_float+0xb6>
 8007102:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007106:	4313      	orrs	r3, r2
 8007108:	d102      	bne.n	8007110 <_printf_float+0x290>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	07d9      	lsls	r1, r3, #31
 800710e:	d5d8      	bpl.n	80070c2 <_printf_float+0x242>
 8007110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af0b 	beq.w	8006f36 <_printf_float+0xb6>
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	f104 0a1a 	add.w	sl, r4, #26
 8007128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712a:	425b      	negs	r3, r3
 800712c:	454b      	cmp	r3, r9
 800712e:	dc01      	bgt.n	8007134 <_printf_float+0x2b4>
 8007130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007132:	e794      	b.n	800705e <_printf_float+0x1de>
 8007134:	2301      	movs	r3, #1
 8007136:	4652      	mov	r2, sl
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f aef9 	beq.w	8006f36 <_printf_float+0xb6>
 8007144:	f109 0901 	add.w	r9, r9, #1
 8007148:	e7ee      	b.n	8007128 <_printf_float+0x2a8>
 800714a:	bf00      	nop
 800714c:	7fefffff 	.word	0x7fefffff
 8007150:	0800b7e0 	.word	0x0800b7e0
 8007154:	0800b7e4 	.word	0x0800b7e4
 8007158:	0800b7ec 	.word	0x0800b7ec
 800715c:	0800b7e8 	.word	0x0800b7e8
 8007160:	0800b7f0 	.word	0x0800b7f0
 8007164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007168:	429a      	cmp	r2, r3
 800716a:	bfa8      	it	ge
 800716c:	461a      	movge	r2, r3
 800716e:	2a00      	cmp	r2, #0
 8007170:	4691      	mov	r9, r2
 8007172:	dc37      	bgt.n	80071e4 <_printf_float+0x364>
 8007174:	f04f 0b00 	mov.w	fp, #0
 8007178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717c:	f104 021a 	add.w	r2, r4, #26
 8007180:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007184:	ebaa 0309 	sub.w	r3, sl, r9
 8007188:	455b      	cmp	r3, fp
 800718a:	dc33      	bgt.n	80071f4 <_printf_float+0x374>
 800718c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007190:	429a      	cmp	r2, r3
 8007192:	db3b      	blt.n	800720c <_printf_float+0x38c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d438      	bmi.n	800720c <_printf_float+0x38c>
 800719a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800719e:	eba3 020a 	sub.w	r2, r3, sl
 80071a2:	eba3 0901 	sub.w	r9, r3, r1
 80071a6:	4591      	cmp	r9, r2
 80071a8:	bfa8      	it	ge
 80071aa:	4691      	movge	r9, r2
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dc34      	bgt.n	800721c <_printf_float+0x39c>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ba:	f104 0a1a 	add.w	sl, r4, #26
 80071be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	eba3 0309 	sub.w	r3, r3, r9
 80071c8:	4543      	cmp	r3, r8
 80071ca:	f77f af7a 	ble.w	80070c2 <_printf_float+0x242>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4652      	mov	r2, sl
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	f43f aeac 	beq.w	8006f36 <_printf_float+0xb6>
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	e7ec      	b.n	80071be <_printf_float+0x33e>
 80071e4:	4613      	mov	r3, r2
 80071e6:	4631      	mov	r1, r6
 80071e8:	4642      	mov	r2, r8
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	d1c0      	bne.n	8007174 <_printf_float+0x2f4>
 80071f2:	e6a0      	b.n	8006f36 <_printf_float+0xb6>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f43f ae99 	beq.w	8006f36 <_printf_float+0xb6>
 8007204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007206:	f10b 0b01 	add.w	fp, fp, #1
 800720a:	e7b9      	b.n	8007180 <_printf_float+0x300>
 800720c:	4631      	mov	r1, r6
 800720e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d1bf      	bne.n	800719a <_printf_float+0x31a>
 800721a:	e68c      	b.n	8006f36 <_printf_float+0xb6>
 800721c:	464b      	mov	r3, r9
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	eb08 020a 	add.w	r2, r8, sl
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	d1c2      	bne.n	80071b2 <_printf_float+0x332>
 800722c:	e683      	b.n	8006f36 <_printf_float+0xb6>
 800722e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007230:	2a01      	cmp	r2, #1
 8007232:	dc01      	bgt.n	8007238 <_printf_float+0x3b8>
 8007234:	07db      	lsls	r3, r3, #31
 8007236:	d537      	bpl.n	80072a8 <_printf_float+0x428>
 8007238:	2301      	movs	r3, #1
 800723a:	4642      	mov	r2, r8
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f ae77 	beq.w	8006f36 <_printf_float+0xb6>
 8007248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f ae6f 	beq.w	8006f36 <_printf_float+0xb6>
 8007258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	f7f9 fbe8 	bl	8000a34 <__aeabi_dcmpeq>
 8007264:	b9d8      	cbnz	r0, 800729e <_printf_float+0x41e>
 8007266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007268:	f108 0201 	add.w	r2, r8, #1
 800726c:	3b01      	subs	r3, #1
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d10e      	bne.n	8007296 <_printf_float+0x416>
 8007278:	e65d      	b.n	8006f36 <_printf_float+0xb6>
 800727a:	2301      	movs	r3, #1
 800727c:	464a      	mov	r2, r9
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f ae56 	beq.w	8006f36 <_printf_float+0xb6>
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007290:	3b01      	subs	r3, #1
 8007292:	4543      	cmp	r3, r8
 8007294:	dcf1      	bgt.n	800727a <_printf_float+0x3fa>
 8007296:	4653      	mov	r3, sl
 8007298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800729c:	e6e0      	b.n	8007060 <_printf_float+0x1e0>
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	f104 091a 	add.w	r9, r4, #26
 80072a6:	e7f2      	b.n	800728e <_printf_float+0x40e>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4642      	mov	r2, r8
 80072ac:	e7df      	b.n	800726e <_printf_float+0x3ee>
 80072ae:	2301      	movs	r3, #1
 80072b0:	464a      	mov	r2, r9
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae3c 	beq.w	8006f36 <_printf_float+0xb6>
 80072be:	f108 0801 	add.w	r8, r8, #1
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	4543      	cmp	r3, r8
 80072ca:	dcf0      	bgt.n	80072ae <_printf_float+0x42e>
 80072cc:	e6fd      	b.n	80070ca <_printf_float+0x24a>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0919 	add.w	r9, r4, #25
 80072d6:	e7f4      	b.n	80072c2 <_printf_float+0x442>

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	4607      	mov	r7, r0
 80072e6:	4293      	cmp	r3, r2
 80072e8:	bfb8      	it	lt
 80072ea:	4613      	movlt	r3, r2
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f2:	460c      	mov	r4, r1
 80072f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc28      	bgt.n	8007372 <_printf_common+0x9a>
 8007320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007324:	1e13      	subs	r3, r2, #0
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42d      	bmi.n	800738c <_printf_common+0xb4>
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d020      	beq.n	8007380 <_printf_common+0xa8>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	68e5      	ldr	r5, [r4, #12]
 8007342:	f003 0306 	and.w	r3, r3, #6
 8007346:	2b04      	cmp	r3, #4
 8007348:	bf18      	it	ne
 800734a:	2500      	movne	r5, #0
 800734c:	6832      	ldr	r2, [r6, #0]
 800734e:	f04f 0600 	mov.w	r6, #0
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	bf08      	it	eq
 8007356:	1aad      	subeq	r5, r5, r2
 8007358:	6922      	ldr	r2, [r4, #16]
 800735a:	bf08      	it	eq
 800735c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007360:	4293      	cmp	r3, r2
 8007362:	bfc4      	itt	gt
 8007364:	1a9b      	subgt	r3, r3, r2
 8007366:	18ed      	addgt	r5, r5, r3
 8007368:	341a      	adds	r4, #26
 800736a:	42b5      	cmp	r5, r6
 800736c:	d11a      	bne.n	80073a4 <_printf_common+0xcc>
 800736e:	2000      	movs	r0, #0
 8007370:	e008      	b.n	8007384 <_printf_common+0xac>
 8007372:	2301      	movs	r3, #1
 8007374:	4652      	mov	r2, sl
 8007376:	4649      	mov	r1, r9
 8007378:	4638      	mov	r0, r7
 800737a:	47c0      	blx	r8
 800737c:	3001      	adds	r0, #1
 800737e:	d103      	bne.n	8007388 <_printf_common+0xb0>
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	3501      	adds	r5, #1
 800738a:	e7c4      	b.n	8007316 <_printf_common+0x3e>
 800738c:	2030      	movs	r0, #48	; 0x30
 800738e:	18e1      	adds	r1, r4, r3
 8007390:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800739a:	4422      	add	r2, r4
 800739c:	3302      	adds	r3, #2
 800739e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a2:	e7c5      	b.n	8007330 <_printf_common+0x58>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4622      	mov	r2, r4
 80073a8:	4649      	mov	r1, r9
 80073aa:	4638      	mov	r0, r7
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d0e6      	beq.n	8007380 <_printf_common+0xa8>
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7d9      	b.n	800736a <_printf_common+0x92>
	...

080073b8 <_printf_i>:
 80073b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	7e0f      	ldrb	r7, [r1, #24]
 80073be:	4691      	mov	r9, r2
 80073c0:	2f78      	cmp	r7, #120	; 0x78
 80073c2:	4680      	mov	r8, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	469a      	mov	sl, r3
 80073c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ce:	d807      	bhi.n	80073e0 <_printf_i+0x28>
 80073d0:	2f62      	cmp	r7, #98	; 0x62
 80073d2:	d80a      	bhi.n	80073ea <_printf_i+0x32>
 80073d4:	2f00      	cmp	r7, #0
 80073d6:	f000 80d9 	beq.w	800758c <_printf_i+0x1d4>
 80073da:	2f58      	cmp	r7, #88	; 0x58
 80073dc:	f000 80a4 	beq.w	8007528 <_printf_i+0x170>
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e8:	e03a      	b.n	8007460 <_printf_i+0xa8>
 80073ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ee:	2b15      	cmp	r3, #21
 80073f0:	d8f6      	bhi.n	80073e0 <_printf_i+0x28>
 80073f2:	a101      	add	r1, pc, #4	; (adr r1, 80073f8 <_printf_i+0x40>)
 80073f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007465 	.word	0x08007465
 8007400:	080073e1 	.word	0x080073e1
 8007404:	080073e1 	.word	0x080073e1
 8007408:	080073e1 	.word	0x080073e1
 800740c:	080073e1 	.word	0x080073e1
 8007410:	08007465 	.word	0x08007465
 8007414:	080073e1 	.word	0x080073e1
 8007418:	080073e1 	.word	0x080073e1
 800741c:	080073e1 	.word	0x080073e1
 8007420:	080073e1 	.word	0x080073e1
 8007424:	08007573 	.word	0x08007573
 8007428:	08007495 	.word	0x08007495
 800742c:	08007555 	.word	0x08007555
 8007430:	080073e1 	.word	0x080073e1
 8007434:	080073e1 	.word	0x080073e1
 8007438:	08007595 	.word	0x08007595
 800743c:	080073e1 	.word	0x080073e1
 8007440:	08007495 	.word	0x08007495
 8007444:	080073e1 	.word	0x080073e1
 8007448:	080073e1 	.word	0x080073e1
 800744c:	0800755d 	.word	0x0800755d
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	1d1a      	adds	r2, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	602a      	str	r2, [r5, #0]
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007460:	2301      	movs	r3, #1
 8007462:	e0a4      	b.n	80075ae <_printf_i+0x1f6>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	6829      	ldr	r1, [r5, #0]
 8007468:	0606      	lsls	r6, r0, #24
 800746a:	f101 0304 	add.w	r3, r1, #4
 800746e:	d50a      	bpl.n	8007486 <_printf_i+0xce>
 8007470:	680e      	ldr	r6, [r1, #0]
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	2e00      	cmp	r6, #0
 8007476:	da03      	bge.n	8007480 <_printf_i+0xc8>
 8007478:	232d      	movs	r3, #45	; 0x2d
 800747a:	4276      	negs	r6, r6
 800747c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007480:	230a      	movs	r3, #10
 8007482:	485e      	ldr	r0, [pc, #376]	; (80075fc <_printf_i+0x244>)
 8007484:	e019      	b.n	80074ba <_printf_i+0x102>
 8007486:	680e      	ldr	r6, [r1, #0]
 8007488:	f010 0f40 	tst.w	r0, #64	; 0x40
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	bf18      	it	ne
 8007490:	b236      	sxthne	r6, r6
 8007492:	e7ef      	b.n	8007474 <_printf_i+0xbc>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	6820      	ldr	r0, [r4, #0]
 8007498:	1d19      	adds	r1, r3, #4
 800749a:	6029      	str	r1, [r5, #0]
 800749c:	0601      	lsls	r1, r0, #24
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0xec>
 80074a0:	681e      	ldr	r6, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0xf2>
 80074a4:	0646      	lsls	r6, r0, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0xe8>
 80074a8:	881e      	ldrh	r6, [r3, #0]
 80074aa:	2f6f      	cmp	r7, #111	; 0x6f
 80074ac:	bf0c      	ite	eq
 80074ae:	2308      	moveq	r3, #8
 80074b0:	230a      	movne	r3, #10
 80074b2:	4852      	ldr	r0, [pc, #328]	; (80075fc <_printf_i+0x244>)
 80074b4:	2100      	movs	r1, #0
 80074b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ba:	6865      	ldr	r5, [r4, #4]
 80074bc:	2d00      	cmp	r5, #0
 80074be:	bfa8      	it	ge
 80074c0:	6821      	ldrge	r1, [r4, #0]
 80074c2:	60a5      	str	r5, [r4, #8]
 80074c4:	bfa4      	itt	ge
 80074c6:	f021 0104 	bicge.w	r1, r1, #4
 80074ca:	6021      	strge	r1, [r4, #0]
 80074cc:	b90e      	cbnz	r6, 80074d2 <_printf_i+0x11a>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	d04d      	beq.n	800756e <_printf_i+0x1b6>
 80074d2:	4615      	mov	r5, r2
 80074d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d8:	fb03 6711 	mls	r7, r3, r1, r6
 80074dc:	5dc7      	ldrb	r7, [r0, r7]
 80074de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074e2:	4637      	mov	r7, r6
 80074e4:	42bb      	cmp	r3, r7
 80074e6:	460e      	mov	r6, r1
 80074e8:	d9f4      	bls.n	80074d4 <_printf_i+0x11c>
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d10b      	bne.n	8007506 <_printf_i+0x14e>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	07de      	lsls	r6, r3, #31
 80074f2:	d508      	bpl.n	8007506 <_printf_i+0x14e>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	6861      	ldr	r1, [r4, #4]
 80074f8:	4299      	cmp	r1, r3
 80074fa:	bfde      	ittt	le
 80074fc:	2330      	movle	r3, #48	; 0x30
 80074fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007502:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007506:	1b52      	subs	r2, r2, r5
 8007508:	6122      	str	r2, [r4, #16]
 800750a:	464b      	mov	r3, r9
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f8cd a000 	str.w	sl, [sp]
 8007514:	aa03      	add	r2, sp, #12
 8007516:	f7ff fedf 	bl	80072d8 <_printf_common>
 800751a:	3001      	adds	r0, #1
 800751c:	d14c      	bne.n	80075b8 <_printf_i+0x200>
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	b004      	add	sp, #16
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	4834      	ldr	r0, [pc, #208]	; (80075fc <_printf_i+0x244>)
 800752a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800752e:	6829      	ldr	r1, [r5, #0]
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	f851 6b04 	ldr.w	r6, [r1], #4
 8007536:	6029      	str	r1, [r5, #0]
 8007538:	061d      	lsls	r5, r3, #24
 800753a:	d514      	bpl.n	8007566 <_printf_i+0x1ae>
 800753c:	07df      	lsls	r7, r3, #31
 800753e:	bf44      	itt	mi
 8007540:	f043 0320 	orrmi.w	r3, r3, #32
 8007544:	6023      	strmi	r3, [r4, #0]
 8007546:	b91e      	cbnz	r6, 8007550 <_printf_i+0x198>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	f023 0320 	bic.w	r3, r3, #32
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	2310      	movs	r3, #16
 8007552:	e7af      	b.n	80074b4 <_printf_i+0xfc>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f043 0320 	orr.w	r3, r3, #32
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	2378      	movs	r3, #120	; 0x78
 800755e:	4828      	ldr	r0, [pc, #160]	; (8007600 <_printf_i+0x248>)
 8007560:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007564:	e7e3      	b.n	800752e <_printf_i+0x176>
 8007566:	0659      	lsls	r1, r3, #25
 8007568:	bf48      	it	mi
 800756a:	b2b6      	uxthmi	r6, r6
 800756c:	e7e6      	b.n	800753c <_printf_i+0x184>
 800756e:	4615      	mov	r5, r2
 8007570:	e7bb      	b.n	80074ea <_printf_i+0x132>
 8007572:	682b      	ldr	r3, [r5, #0]
 8007574:	6826      	ldr	r6, [r4, #0]
 8007576:	1d18      	adds	r0, r3, #4
 8007578:	6961      	ldr	r1, [r4, #20]
 800757a:	6028      	str	r0, [r5, #0]
 800757c:	0635      	lsls	r5, r6, #24
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	d501      	bpl.n	8007586 <_printf_i+0x1ce>
 8007582:	6019      	str	r1, [r3, #0]
 8007584:	e002      	b.n	800758c <_printf_i+0x1d4>
 8007586:	0670      	lsls	r0, r6, #25
 8007588:	d5fb      	bpl.n	8007582 <_printf_i+0x1ca>
 800758a:	8019      	strh	r1, [r3, #0]
 800758c:	2300      	movs	r3, #0
 800758e:	4615      	mov	r5, r2
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	e7ba      	b.n	800750a <_printf_i+0x152>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	2100      	movs	r1, #0
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	4628      	mov	r0, r5
 80075a2:	f002 fe21 	bl	800a1e8 <memchr>
 80075a6:	b108      	cbz	r0, 80075ac <_printf_i+0x1f4>
 80075a8:	1b40      	subs	r0, r0, r5
 80075aa:	6060      	str	r0, [r4, #4]
 80075ac:	6863      	ldr	r3, [r4, #4]
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	2300      	movs	r3, #0
 80075b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b6:	e7a8      	b.n	800750a <_printf_i+0x152>
 80075b8:	462a      	mov	r2, r5
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	47d0      	blx	sl
 80075c2:	3001      	adds	r0, #1
 80075c4:	d0ab      	beq.n	800751e <_printf_i+0x166>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	079b      	lsls	r3, r3, #30
 80075ca:	d413      	bmi.n	80075f4 <_printf_i+0x23c>
 80075cc:	68e0      	ldr	r0, [r4, #12]
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	4298      	cmp	r0, r3
 80075d2:	bfb8      	it	lt
 80075d4:	4618      	movlt	r0, r3
 80075d6:	e7a4      	b.n	8007522 <_printf_i+0x16a>
 80075d8:	2301      	movs	r3, #1
 80075da:	4632      	mov	r2, r6
 80075dc:	4649      	mov	r1, r9
 80075de:	4640      	mov	r0, r8
 80075e0:	47d0      	blx	sl
 80075e2:	3001      	adds	r0, #1
 80075e4:	d09b      	beq.n	800751e <_printf_i+0x166>
 80075e6:	3501      	adds	r5, #1
 80075e8:	68e3      	ldr	r3, [r4, #12]
 80075ea:	9903      	ldr	r1, [sp, #12]
 80075ec:	1a5b      	subs	r3, r3, r1
 80075ee:	42ab      	cmp	r3, r5
 80075f0:	dcf2      	bgt.n	80075d8 <_printf_i+0x220>
 80075f2:	e7eb      	b.n	80075cc <_printf_i+0x214>
 80075f4:	2500      	movs	r5, #0
 80075f6:	f104 0619 	add.w	r6, r4, #25
 80075fa:	e7f5      	b.n	80075e8 <_printf_i+0x230>
 80075fc:	0800b7f2 	.word	0x0800b7f2
 8007600:	0800b803 	.word	0x0800b803

08007604 <iprintf>:
 8007604:	b40f      	push	{r0, r1, r2, r3}
 8007606:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <iprintf+0x2c>)
 8007608:	b513      	push	{r0, r1, r4, lr}
 800760a:	681c      	ldr	r4, [r3, #0]
 800760c:	b124      	cbz	r4, 8007618 <iprintf+0x14>
 800760e:	69a3      	ldr	r3, [r4, #24]
 8007610:	b913      	cbnz	r3, 8007618 <iprintf+0x14>
 8007612:	4620      	mov	r0, r4
 8007614:	f002 f940 	bl	8009898 <__sinit>
 8007618:	ab05      	add	r3, sp, #20
 800761a:	4620      	mov	r0, r4
 800761c:	9a04      	ldr	r2, [sp, #16]
 800761e:	68a1      	ldr	r1, [r4, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f003 fc79 	bl	800af18 <_vfiprintf_r>
 8007626:	b002      	add	sp, #8
 8007628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr
 8007630:	20000034 	.word	0x20000034

08007634 <_puts_r>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	460e      	mov	r6, r1
 8007638:	4605      	mov	r5, r0
 800763a:	b118      	cbz	r0, 8007644 <_puts_r+0x10>
 800763c:	6983      	ldr	r3, [r0, #24]
 800763e:	b90b      	cbnz	r3, 8007644 <_puts_r+0x10>
 8007640:	f002 f92a 	bl	8009898 <__sinit>
 8007644:	69ab      	ldr	r3, [r5, #24]
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	b913      	cbnz	r3, 8007650 <_puts_r+0x1c>
 800764a:	4628      	mov	r0, r5
 800764c:	f002 f924 	bl	8009898 <__sinit>
 8007650:	4b2c      	ldr	r3, [pc, #176]	; (8007704 <_puts_r+0xd0>)
 8007652:	429c      	cmp	r4, r3
 8007654:	d120      	bne.n	8007698 <_puts_r+0x64>
 8007656:	686c      	ldr	r4, [r5, #4]
 8007658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765a:	07db      	lsls	r3, r3, #31
 800765c:	d405      	bmi.n	800766a <_puts_r+0x36>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	0598      	lsls	r0, r3, #22
 8007662:	d402      	bmi.n	800766a <_puts_r+0x36>
 8007664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007666:	f002 fd32 	bl	800a0ce <__retarget_lock_acquire_recursive>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	0719      	lsls	r1, r3, #28
 800766e:	d51d      	bpl.n	80076ac <_puts_r+0x78>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	b1db      	cbz	r3, 80076ac <_puts_r+0x78>
 8007674:	3e01      	subs	r6, #1
 8007676:	68a3      	ldr	r3, [r4, #8]
 8007678:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800767c:	3b01      	subs	r3, #1
 800767e:	60a3      	str	r3, [r4, #8]
 8007680:	bb39      	cbnz	r1, 80076d2 <_puts_r+0x9e>
 8007682:	2b00      	cmp	r3, #0
 8007684:	da38      	bge.n	80076f8 <_puts_r+0xc4>
 8007686:	4622      	mov	r2, r4
 8007688:	210a      	movs	r1, #10
 800768a:	4628      	mov	r0, r5
 800768c:	f001 f872 	bl	8008774 <__swbuf_r>
 8007690:	3001      	adds	r0, #1
 8007692:	d011      	beq.n	80076b8 <_puts_r+0x84>
 8007694:	250a      	movs	r5, #10
 8007696:	e011      	b.n	80076bc <_puts_r+0x88>
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <_puts_r+0xd4>)
 800769a:	429c      	cmp	r4, r3
 800769c:	d101      	bne.n	80076a2 <_puts_r+0x6e>
 800769e:	68ac      	ldr	r4, [r5, #8]
 80076a0:	e7da      	b.n	8007658 <_puts_r+0x24>
 80076a2:	4b1a      	ldr	r3, [pc, #104]	; (800770c <_puts_r+0xd8>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	bf08      	it	eq
 80076a8:	68ec      	ldreq	r4, [r5, #12]
 80076aa:	e7d5      	b.n	8007658 <_puts_r+0x24>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4628      	mov	r0, r5
 80076b0:	f001 f8c4 	bl	800883c <__swsetup_r>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d0dd      	beq.n	8007674 <_puts_r+0x40>
 80076b8:	f04f 35ff 	mov.w	r5, #4294967295
 80076bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076be:	07da      	lsls	r2, r3, #31
 80076c0:	d405      	bmi.n	80076ce <_puts_r+0x9a>
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	059b      	lsls	r3, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_puts_r+0x9a>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f002 fd01 	bl	800a0d0 <__retarget_lock_release_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da04      	bge.n	80076e0 <_puts_r+0xac>
 80076d6:	69a2      	ldr	r2, [r4, #24]
 80076d8:	429a      	cmp	r2, r3
 80076da:	dc06      	bgt.n	80076ea <_puts_r+0xb6>
 80076dc:	290a      	cmp	r1, #10
 80076de:	d004      	beq.n	80076ea <_puts_r+0xb6>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	6022      	str	r2, [r4, #0]
 80076e6:	7019      	strb	r1, [r3, #0]
 80076e8:	e7c5      	b.n	8007676 <_puts_r+0x42>
 80076ea:	4622      	mov	r2, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f001 f841 	bl	8008774 <__swbuf_r>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d1bf      	bne.n	8007676 <_puts_r+0x42>
 80076f6:	e7df      	b.n	80076b8 <_puts_r+0x84>
 80076f8:	250a      	movs	r5, #10
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	701d      	strb	r5, [r3, #0]
 8007702:	e7db      	b.n	80076bc <_puts_r+0x88>
 8007704:	0800ba0c 	.word	0x0800ba0c
 8007708:	0800ba2c 	.word	0x0800ba2c
 800770c:	0800b9ec 	.word	0x0800b9ec

08007710 <puts>:
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <puts+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f7ff bf8d 	b.w	8007634 <_puts_r>
 800771a:	bf00      	nop
 800771c:	20000034 	.word	0x20000034

08007720 <rand>:
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <rand+0x5c>)
 8007722:	b510      	push	{r4, lr}
 8007724:	681c      	ldr	r4, [r3, #0]
 8007726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007728:	b9b3      	cbnz	r3, 8007758 <rand+0x38>
 800772a:	2018      	movs	r0, #24
 800772c:	f7ff fa08 	bl	8006b40 <malloc>
 8007730:	4602      	mov	r2, r0
 8007732:	63a0      	str	r0, [r4, #56]	; 0x38
 8007734:	b920      	cbnz	r0, 8007740 <rand+0x20>
 8007736:	214e      	movs	r1, #78	; 0x4e
 8007738:	4b11      	ldr	r3, [pc, #68]	; (8007780 <rand+0x60>)
 800773a:	4812      	ldr	r0, [pc, #72]	; (8007784 <rand+0x64>)
 800773c:	f001 f8ec 	bl	8008918 <__assert_func>
 8007740:	4911      	ldr	r1, [pc, #68]	; (8007788 <rand+0x68>)
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <rand+0x6c>)
 8007744:	e9c0 1300 	strd	r1, r3, [r0]
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <rand+0x70>)
 800774a:	2100      	movs	r1, #0
 800774c:	6083      	str	r3, [r0, #8]
 800774e:	230b      	movs	r3, #11
 8007750:	8183      	strh	r3, [r0, #12]
 8007752:	2001      	movs	r0, #1
 8007754:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007758:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800775a:	4a0e      	ldr	r2, [pc, #56]	; (8007794 <rand+0x74>)
 800775c:	6920      	ldr	r0, [r4, #16]
 800775e:	6963      	ldr	r3, [r4, #20]
 8007760:	4342      	muls	r2, r0
 8007762:	490d      	ldr	r1, [pc, #52]	; (8007798 <rand+0x78>)
 8007764:	fb01 2203 	mla	r2, r1, r3, r2
 8007768:	fba0 0101 	umull	r0, r1, r0, r1
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	eb42 0001 	adc.w	r0, r2, r1
 8007772:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007776:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800777a:	bd10      	pop	{r4, pc}
 800777c:	20000034 	.word	0x20000034
 8007780:	0800b814 	.word	0x0800b814
 8007784:	0800b82b 	.word	0x0800b82b
 8007788:	abcd330e 	.word	0xabcd330e
 800778c:	e66d1234 	.word	0xe66d1234
 8007790:	0005deec 	.word	0x0005deec
 8007794:	5851f42d 	.word	0x5851f42d
 8007798:	4c957f2d 	.word	0x4c957f2d

0800779c <realloc>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <realloc+0xc>)
 800779e:	460a      	mov	r2, r1
 80077a0:	4601      	mov	r1, r0
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	f003 ba06 	b.w	800abb4 <_realloc_r>
 80077a8:	20000034 	.word	0x20000034

080077ac <_sbrk_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d05      	ldr	r5, [pc, #20]	; (80077c8 <_sbrk_r+0x1c>)
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	f7fc fc56 	bl	8004068 <_sbrk>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_sbrk_r+0x1a>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_sbrk_r+0x1a>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	200007a4 	.word	0x200007a4

080077cc <sniprintf>:
 80077cc:	b40c      	push	{r2, r3}
 80077ce:	b530      	push	{r4, r5, lr}
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <sniprintf+0x64>)
 80077d2:	1e0c      	subs	r4, r1, #0
 80077d4:	681d      	ldr	r5, [r3, #0]
 80077d6:	b09d      	sub	sp, #116	; 0x74
 80077d8:	da08      	bge.n	80077ec <sniprintf+0x20>
 80077da:	238b      	movs	r3, #139	; 0x8b
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	b01d      	add	sp, #116	; 0x74
 80077e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077e8:	b002      	add	sp, #8
 80077ea:	4770      	bx	lr
 80077ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80077f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077f4:	bf0c      	ite	eq
 80077f6:	4623      	moveq	r3, r4
 80077f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007804:	9002      	str	r0, [sp, #8]
 8007806:	9006      	str	r0, [sp, #24]
 8007808:	f8ad 3016 	strh.w	r3, [sp, #22]
 800780c:	4628      	mov	r0, r5
 800780e:	ab21      	add	r3, sp, #132	; 0x84
 8007810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007812:	a902      	add	r1, sp, #8
 8007814:	9301      	str	r3, [sp, #4]
 8007816:	f003 fa57 	bl	800acc8 <_svfiprintf_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	bfbc      	itt	lt
 800781e:	238b      	movlt	r3, #139	; 0x8b
 8007820:	602b      	strlt	r3, [r5, #0]
 8007822:	2c00      	cmp	r4, #0
 8007824:	d0dd      	beq.n	80077e2 <sniprintf+0x16>
 8007826:	2200      	movs	r2, #0
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e7d9      	b.n	80077e2 <sniprintf+0x16>
 800782e:	bf00      	nop
 8007830:	20000034 	.word	0x20000034

08007834 <siprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800783a:	b500      	push	{lr}
 800783c:	b09c      	sub	sp, #112	; 0x70
 800783e:	ab1d      	add	r3, sp, #116	; 0x74
 8007840:	9002      	str	r0, [sp, #8]
 8007842:	9006      	str	r0, [sp, #24]
 8007844:	9107      	str	r1, [sp, #28]
 8007846:	9104      	str	r1, [sp, #16]
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <siprintf+0x38>)
 800784a:	4909      	ldr	r1, [pc, #36]	; (8007870 <siprintf+0x3c>)
 800784c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	a902      	add	r1, sp, #8
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	f003 fa36 	bl	800acc8 <_svfiprintf_r>
 800785c:	2200      	movs	r2, #0
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	b01c      	add	sp, #112	; 0x70
 8007864:	f85d eb04 	ldr.w	lr, [sp], #4
 8007868:	b003      	add	sp, #12
 800786a:	4770      	bx	lr
 800786c:	20000034 	.word	0x20000034
 8007870:	ffff0208 	.word	0xffff0208

08007874 <__sread>:
 8007874:	b510      	push	{r4, lr}
 8007876:	460c      	mov	r4, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	f003 fc7c 	bl	800b178 <_read_r>
 8007880:	2800      	cmp	r0, #0
 8007882:	bfab      	itete	ge
 8007884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007886:	89a3      	ldrhlt	r3, [r4, #12]
 8007888:	181b      	addge	r3, r3, r0
 800788a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800788e:	bfac      	ite	ge
 8007890:	6563      	strge	r3, [r4, #84]	; 0x54
 8007892:	81a3      	strhlt	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__swrite>:
 8007896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	461f      	mov	r7, r3
 800789c:	898b      	ldrh	r3, [r1, #12]
 800789e:	4605      	mov	r5, r0
 80078a0:	05db      	lsls	r3, r3, #23
 80078a2:	460c      	mov	r4, r1
 80078a4:	4616      	mov	r6, r2
 80078a6:	d505      	bpl.n	80078b4 <__swrite+0x1e>
 80078a8:	2302      	movs	r3, #2
 80078aa:	2200      	movs	r2, #0
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	f002 fc10 	bl	800a0d4 <_lseek_r>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	4632      	mov	r2, r6
 80078b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	4628      	mov	r0, r5
 80078c0:	463b      	mov	r3, r7
 80078c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	f000 bfa5 	b.w	8008818 <_write_r>

080078ce <__sseek>:
 80078ce:	b510      	push	{r4, lr}
 80078d0:	460c      	mov	r4, r1
 80078d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d6:	f002 fbfd 	bl	800a0d4 <_lseek_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	bf15      	itete	ne
 80078e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ea:	81a3      	strheq	r3, [r4, #12]
 80078ec:	bf18      	it	ne
 80078ee:	81a3      	strhne	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__sclose>:
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f001 b82d 	b.w	8008954 <_close_r>

080078fa <strcat>:
 80078fa:	4602      	mov	r2, r0
 80078fc:	b510      	push	{r4, lr}
 80078fe:	7814      	ldrb	r4, [r2, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	3201      	adds	r2, #1
 8007904:	2c00      	cmp	r4, #0
 8007906:	d1fa      	bne.n	80078fe <strcat+0x4>
 8007908:	3b01      	subs	r3, #1
 800790a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007912:	2a00      	cmp	r2, #0
 8007914:	d1f9      	bne.n	800790a <strcat+0x10>
 8007916:	bd10      	pop	{r4, pc}

08007918 <strchr>:
 8007918:	4603      	mov	r3, r0
 800791a:	b2c9      	uxtb	r1, r1
 800791c:	4618      	mov	r0, r3
 800791e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007922:	b112      	cbz	r2, 800792a <strchr+0x12>
 8007924:	428a      	cmp	r2, r1
 8007926:	d1f9      	bne.n	800791c <strchr+0x4>
 8007928:	4770      	bx	lr
 800792a:	2900      	cmp	r1, #0
 800792c:	bf18      	it	ne
 800792e:	2000      	movne	r0, #0
 8007930:	4770      	bx	lr

08007932 <strncmp>:
 8007932:	4603      	mov	r3, r0
 8007934:	b510      	push	{r4, lr}
 8007936:	b172      	cbz	r2, 8007956 <strncmp+0x24>
 8007938:	3901      	subs	r1, #1
 800793a:	1884      	adds	r4, r0, r2
 800793c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007940:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007944:	4290      	cmp	r0, r2
 8007946:	d101      	bne.n	800794c <strncmp+0x1a>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d101      	bne.n	8007950 <strncmp+0x1e>
 800794c:	1a80      	subs	r0, r0, r2
 800794e:	bd10      	pop	{r4, pc}
 8007950:	2800      	cmp	r0, #0
 8007952:	d1f3      	bne.n	800793c <strncmp+0xa>
 8007954:	e7fa      	b.n	800794c <strncmp+0x1a>
 8007956:	4610      	mov	r0, r2
 8007958:	e7f9      	b.n	800794e <strncmp+0x1c>

0800795a <strstr>:
 800795a:	780a      	ldrb	r2, [r1, #0]
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	b96a      	cbnz	r2, 800797c <strstr+0x22>
 8007960:	bd70      	pop	{r4, r5, r6, pc}
 8007962:	429a      	cmp	r2, r3
 8007964:	d109      	bne.n	800797a <strstr+0x20>
 8007966:	460c      	mov	r4, r1
 8007968:	4605      	mov	r5, r0
 800796a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f6      	beq.n	8007960 <strstr+0x6>
 8007972:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007976:	429e      	cmp	r6, r3
 8007978:	d0f7      	beq.n	800796a <strstr+0x10>
 800797a:	3001      	adds	r0, #1
 800797c:	7803      	ldrb	r3, [r0, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ef      	bne.n	8007962 <strstr+0x8>
 8007982:	4618      	mov	r0, r3
 8007984:	e7ec      	b.n	8007960 <strstr+0x6>

08007986 <sulp>:
 8007986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798a:	460f      	mov	r7, r1
 800798c:	4690      	mov	r8, r2
 800798e:	f002 ffb5 	bl	800a8fc <__ulp>
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	d011      	beq.n	80079c0 <sulp+0x3a>
 800799c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dd0b      	ble.n	80079c0 <sulp+0x3a>
 80079a8:	2400      	movs	r4, #0
 80079aa:	051b      	lsls	r3, r3, #20
 80079ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fdd4 	bl	8000564 <__aeabi_dmul>
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079c8 <_strtod_l>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	469b      	mov	fp, r3
 80079ce:	2300      	movs	r3, #0
 80079d0:	b09f      	sub	sp, #124	; 0x7c
 80079d2:	931a      	str	r3, [sp, #104]	; 0x68
 80079d4:	4b9e      	ldr	r3, [pc, #632]	; (8007c50 <_strtod_l+0x288>)
 80079d6:	4682      	mov	sl, r0
 80079d8:	681f      	ldr	r7, [r3, #0]
 80079da:	460e      	mov	r6, r1
 80079dc:	4638      	mov	r0, r7
 80079de:	9215      	str	r2, [sp, #84]	; 0x54
 80079e0:	f7f8 fbfc 	bl	80001dc <strlen>
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	4604      	mov	r4, r0
 80079ea:	f04f 0900 	mov.w	r9, #0
 80079ee:	9619      	str	r6, [sp, #100]	; 0x64
 80079f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	2a2b      	cmp	r2, #43	; 0x2b
 80079f6:	d04c      	beq.n	8007a92 <_strtod_l+0xca>
 80079f8:	d83a      	bhi.n	8007a70 <_strtod_l+0xa8>
 80079fa:	2a0d      	cmp	r2, #13
 80079fc:	d833      	bhi.n	8007a66 <_strtod_l+0x9e>
 80079fe:	2a08      	cmp	r2, #8
 8007a00:	d833      	bhi.n	8007a6a <_strtod_l+0xa2>
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d03d      	beq.n	8007a82 <_strtod_l+0xba>
 8007a06:	2300      	movs	r3, #0
 8007a08:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a0c:	782b      	ldrb	r3, [r5, #0]
 8007a0e:	2b30      	cmp	r3, #48	; 0x30
 8007a10:	f040 80aa 	bne.w	8007b68 <_strtod_l+0x1a0>
 8007a14:	786b      	ldrb	r3, [r5, #1]
 8007a16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a1a:	2b58      	cmp	r3, #88	; 0x58
 8007a1c:	d166      	bne.n	8007aec <_strtod_l+0x124>
 8007a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a20:	4650      	mov	r0, sl
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	ab1a      	add	r3, sp, #104	; 0x68
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4a8a      	ldr	r2, [pc, #552]	; (8007c54 <_strtod_l+0x28c>)
 8007a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a30:	a919      	add	r1, sp, #100	; 0x64
 8007a32:	f002 f849 	bl	8009ac8 <__gethex>
 8007a36:	f010 0607 	ands.w	r6, r0, #7
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	d005      	beq.n	8007a4a <_strtod_l+0x82>
 8007a3e:	2e06      	cmp	r6, #6
 8007a40:	d129      	bne.n	8007a96 <_strtod_l+0xce>
 8007a42:	2300      	movs	r3, #0
 8007a44:	3501      	adds	r5, #1
 8007a46:	9519      	str	r5, [sp, #100]	; 0x64
 8007a48:	930a      	str	r3, [sp, #40]	; 0x28
 8007a4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 858a 	bne.w	8008566 <_strtod_l+0xb9e>
 8007a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a54:	b1d3      	cbz	r3, 8007a8c <_strtod_l+0xc4>
 8007a56:	4642      	mov	r2, r8
 8007a58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	b01f      	add	sp, #124	; 0x7c
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	2a20      	cmp	r2, #32
 8007a68:	d1cd      	bne.n	8007a06 <_strtod_l+0x3e>
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	9319      	str	r3, [sp, #100]	; 0x64
 8007a6e:	e7bf      	b.n	80079f0 <_strtod_l+0x28>
 8007a70:	2a2d      	cmp	r2, #45	; 0x2d
 8007a72:	d1c8      	bne.n	8007a06 <_strtod_l+0x3e>
 8007a74:	2201      	movs	r2, #1
 8007a76:	920a      	str	r2, [sp, #40]	; 0x28
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	9219      	str	r2, [sp, #100]	; 0x64
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1c3      	bne.n	8007a0a <_strtod_l+0x42>
 8007a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a84:	9619      	str	r6, [sp, #100]	; 0x64
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 856b 	bne.w	8008562 <_strtod_l+0xb9a>
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	e7e4      	b.n	8007a5c <_strtod_l+0x94>
 8007a92:	2200      	movs	r2, #0
 8007a94:	e7ef      	b.n	8007a76 <_strtod_l+0xae>
 8007a96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a98:	b13a      	cbz	r2, 8007aaa <_strtod_l+0xe2>
 8007a9a:	2135      	movs	r1, #53	; 0x35
 8007a9c:	a81c      	add	r0, sp, #112	; 0x70
 8007a9e:	f003 f831 	bl	800ab04 <__copybits>
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007aa6:	f002 fbf9 	bl	800a29c <_Bfree>
 8007aaa:	3e01      	subs	r6, #1
 8007aac:	2e04      	cmp	r6, #4
 8007aae:	d806      	bhi.n	8007abe <_strtod_l+0xf6>
 8007ab0:	e8df f006 	tbb	[pc, r6]
 8007ab4:	1714030a 	.word	0x1714030a
 8007ab8:	0a          	.byte	0x0a
 8007ab9:	00          	.byte	0x00
 8007aba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007abe:	0721      	lsls	r1, r4, #28
 8007ac0:	d5c3      	bpl.n	8007a4a <_strtod_l+0x82>
 8007ac2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007ac6:	e7c0      	b.n	8007a4a <_strtod_l+0x82>
 8007ac8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007aca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007ace:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ad6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007ada:	e7f0      	b.n	8007abe <_strtod_l+0xf6>
 8007adc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c58 <_strtod_l+0x290>
 8007ae0:	e7ed      	b.n	8007abe <_strtod_l+0xf6>
 8007ae2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007ae6:	f04f 38ff 	mov.w	r8, #4294967295
 8007aea:	e7e8      	b.n	8007abe <_strtod_l+0xf6>
 8007aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	9219      	str	r2, [sp, #100]	; 0x64
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b30      	cmp	r3, #48	; 0x30
 8007af6:	d0f9      	beq.n	8007aec <_strtod_l+0x124>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0a6      	beq.n	8007a4a <_strtod_l+0x82>
 8007afc:	2301      	movs	r3, #1
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b02:	220a      	movs	r2, #10
 8007b04:	9308      	str	r3, [sp, #32]
 8007b06:	2300      	movs	r3, #0
 8007b08:	469b      	mov	fp, r3
 8007b0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b10:	7805      	ldrb	r5, [r0, #0]
 8007b12:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007b16:	b2d9      	uxtb	r1, r3
 8007b18:	2909      	cmp	r1, #9
 8007b1a:	d927      	bls.n	8007b6c <_strtod_l+0x1a4>
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7ff ff07 	bl	8007932 <strncmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d033      	beq.n	8007b90 <_strtod_l+0x1c8>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	465c      	mov	r4, fp
 8007b2e:	4603      	mov	r3, r0
 8007b30:	9004      	str	r0, [sp, #16]
 8007b32:	2a65      	cmp	r2, #101	; 0x65
 8007b34:	d001      	beq.n	8007b3a <_strtod_l+0x172>
 8007b36:	2a45      	cmp	r2, #69	; 0x45
 8007b38:	d114      	bne.n	8007b64 <_strtod_l+0x19c>
 8007b3a:	b91c      	cbnz	r4, 8007b44 <_strtod_l+0x17c>
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4302      	orrs	r2, r0
 8007b40:	d09f      	beq.n	8007a82 <_strtod_l+0xba>
 8007b42:	2400      	movs	r4, #0
 8007b44:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b46:	1c72      	adds	r2, r6, #1
 8007b48:	9219      	str	r2, [sp, #100]	; 0x64
 8007b4a:	7872      	ldrb	r2, [r6, #1]
 8007b4c:	2a2b      	cmp	r2, #43	; 0x2b
 8007b4e:	d079      	beq.n	8007c44 <_strtod_l+0x27c>
 8007b50:	2a2d      	cmp	r2, #45	; 0x2d
 8007b52:	f000 8083 	beq.w	8007c5c <_strtod_l+0x294>
 8007b56:	2700      	movs	r7, #0
 8007b58:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b5c:	2909      	cmp	r1, #9
 8007b5e:	f240 8083 	bls.w	8007c68 <_strtod_l+0x2a0>
 8007b62:	9619      	str	r6, [sp, #100]	; 0x64
 8007b64:	2500      	movs	r5, #0
 8007b66:	e09f      	b.n	8007ca8 <_strtod_l+0x2e0>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e7c8      	b.n	8007afe <_strtod_l+0x136>
 8007b6c:	f1bb 0f08 	cmp.w	fp, #8
 8007b70:	bfd5      	itete	le
 8007b72:	9906      	ldrle	r1, [sp, #24]
 8007b74:	9905      	ldrgt	r1, [sp, #20]
 8007b76:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b7a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007b7e:	f100 0001 	add.w	r0, r0, #1
 8007b82:	bfd4      	ite	le
 8007b84:	9306      	strle	r3, [sp, #24]
 8007b86:	9305      	strgt	r3, [sp, #20]
 8007b88:	f10b 0b01 	add.w	fp, fp, #1
 8007b8c:	9019      	str	r0, [sp, #100]	; 0x64
 8007b8e:	e7be      	b.n	8007b0e <_strtod_l+0x146>
 8007b90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b92:	191a      	adds	r2, r3, r4
 8007b94:	9219      	str	r2, [sp, #100]	; 0x64
 8007b96:	5d1a      	ldrb	r2, [r3, r4]
 8007b98:	f1bb 0f00 	cmp.w	fp, #0
 8007b9c:	d036      	beq.n	8007c0c <_strtod_l+0x244>
 8007b9e:	465c      	mov	r4, fp
 8007ba0:	9004      	str	r0, [sp, #16]
 8007ba2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d912      	bls.n	8007bd0 <_strtod_l+0x208>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e7c1      	b.n	8007b32 <_strtod_l+0x16a>
 8007bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	9219      	str	r2, [sp, #100]	; 0x64
 8007bb6:	785a      	ldrb	r2, [r3, #1]
 8007bb8:	2a30      	cmp	r2, #48	; 0x30
 8007bba:	d0f8      	beq.n	8007bae <_strtod_l+0x1e6>
 8007bbc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	f200 84d5 	bhi.w	8008570 <_strtod_l+0xba8>
 8007bc6:	9004      	str	r0, [sp, #16]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bce:	9308      	str	r3, [sp, #32]
 8007bd0:	3a30      	subs	r2, #48	; 0x30
 8007bd2:	f100 0301 	add.w	r3, r0, #1
 8007bd6:	d013      	beq.n	8007c00 <_strtod_l+0x238>
 8007bd8:	9904      	ldr	r1, [sp, #16]
 8007bda:	1905      	adds	r5, r0, r4
 8007bdc:	4419      	add	r1, r3
 8007bde:	9104      	str	r1, [sp, #16]
 8007be0:	4623      	mov	r3, r4
 8007be2:	210a      	movs	r1, #10
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	d113      	bne.n	8007c10 <_strtod_l+0x248>
 8007be8:	1823      	adds	r3, r4, r0
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	f104 0401 	add.w	r4, r4, #1
 8007bf0:	4404      	add	r4, r0
 8007bf2:	dc1b      	bgt.n	8007c2c <_strtod_l+0x264>
 8007bf4:	230a      	movs	r3, #10
 8007bf6:	9906      	ldr	r1, [sp, #24]
 8007bf8:	fb03 2301 	mla	r3, r3, r1, r2
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c02:	4618      	mov	r0, r3
 8007c04:	1c51      	adds	r1, r2, #1
 8007c06:	9119      	str	r1, [sp, #100]	; 0x64
 8007c08:	7852      	ldrb	r2, [r2, #1]
 8007c0a:	e7ca      	b.n	8007ba2 <_strtod_l+0x1da>
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	e7d3      	b.n	8007bb8 <_strtod_l+0x1f0>
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	dc04      	bgt.n	8007c1e <_strtod_l+0x256>
 8007c14:	9f06      	ldr	r7, [sp, #24]
 8007c16:	434f      	muls	r7, r1
 8007c18:	9706      	str	r7, [sp, #24]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	e7e2      	b.n	8007be4 <_strtod_l+0x21c>
 8007c1e:	1c5f      	adds	r7, r3, #1
 8007c20:	2f10      	cmp	r7, #16
 8007c22:	bfde      	ittt	le
 8007c24:	9f05      	ldrle	r7, [sp, #20]
 8007c26:	434f      	mulle	r7, r1
 8007c28:	9705      	strle	r7, [sp, #20]
 8007c2a:	e7f6      	b.n	8007c1a <_strtod_l+0x252>
 8007c2c:	2c10      	cmp	r4, #16
 8007c2e:	bfdf      	itttt	le
 8007c30:	230a      	movle	r3, #10
 8007c32:	9905      	ldrle	r1, [sp, #20]
 8007c34:	fb03 2301 	mlale	r3, r3, r1, r2
 8007c38:	9305      	strle	r3, [sp, #20]
 8007c3a:	e7e0      	b.n	8007bfe <_strtod_l+0x236>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	2301      	movs	r3, #1
 8007c42:	e77b      	b.n	8007b3c <_strtod_l+0x174>
 8007c44:	2700      	movs	r7, #0
 8007c46:	1cb2      	adds	r2, r6, #2
 8007c48:	9219      	str	r2, [sp, #100]	; 0x64
 8007c4a:	78b2      	ldrb	r2, [r6, #2]
 8007c4c:	e784      	b.n	8007b58 <_strtod_l+0x190>
 8007c4e:	bf00      	nop
 8007c50:	0800bab4 	.word	0x0800bab4
 8007c54:	0800b888 	.word	0x0800b888
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	2701      	movs	r7, #1
 8007c5e:	e7f2      	b.n	8007c46 <_strtod_l+0x27e>
 8007c60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c62:	1c51      	adds	r1, r2, #1
 8007c64:	9119      	str	r1, [sp, #100]	; 0x64
 8007c66:	7852      	ldrb	r2, [r2, #1]
 8007c68:	2a30      	cmp	r2, #48	; 0x30
 8007c6a:	d0f9      	beq.n	8007c60 <_strtod_l+0x298>
 8007c6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c70:	2908      	cmp	r1, #8
 8007c72:	f63f af77 	bhi.w	8007b64 <_strtod_l+0x19c>
 8007c76:	f04f 0e0a 	mov.w	lr, #10
 8007c7a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007c7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c80:	9209      	str	r2, [sp, #36]	; 0x24
 8007c82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c84:	1c51      	adds	r1, r2, #1
 8007c86:	9119      	str	r1, [sp, #100]	; 0x64
 8007c88:	7852      	ldrb	r2, [r2, #1]
 8007c8a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007c8e:	2d09      	cmp	r5, #9
 8007c90:	d935      	bls.n	8007cfe <_strtod_l+0x336>
 8007c92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c94:	1b49      	subs	r1, r1, r5
 8007c96:	2908      	cmp	r1, #8
 8007c98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007c9c:	dc02      	bgt.n	8007ca4 <_strtod_l+0x2dc>
 8007c9e:	4565      	cmp	r5, ip
 8007ca0:	bfa8      	it	ge
 8007ca2:	4665      	movge	r5, ip
 8007ca4:	b107      	cbz	r7, 8007ca8 <_strtod_l+0x2e0>
 8007ca6:	426d      	negs	r5, r5
 8007ca8:	2c00      	cmp	r4, #0
 8007caa:	d14c      	bne.n	8007d46 <_strtod_l+0x37e>
 8007cac:	9907      	ldr	r1, [sp, #28]
 8007cae:	4301      	orrs	r1, r0
 8007cb0:	f47f aecb 	bne.w	8007a4a <_strtod_l+0x82>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f47f aee4 	bne.w	8007a82 <_strtod_l+0xba>
 8007cba:	2a69      	cmp	r2, #105	; 0x69
 8007cbc:	d026      	beq.n	8007d0c <_strtod_l+0x344>
 8007cbe:	dc23      	bgt.n	8007d08 <_strtod_l+0x340>
 8007cc0:	2a49      	cmp	r2, #73	; 0x49
 8007cc2:	d023      	beq.n	8007d0c <_strtod_l+0x344>
 8007cc4:	2a4e      	cmp	r2, #78	; 0x4e
 8007cc6:	f47f aedc 	bne.w	8007a82 <_strtod_l+0xba>
 8007cca:	499d      	ldr	r1, [pc, #628]	; (8007f40 <_strtod_l+0x578>)
 8007ccc:	a819      	add	r0, sp, #100	; 0x64
 8007cce:	f002 f949 	bl	8009f64 <__match>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f43f aed5 	beq.w	8007a82 <_strtod_l+0xba>
 8007cd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b28      	cmp	r3, #40	; 0x28
 8007cde:	d12c      	bne.n	8007d3a <_strtod_l+0x372>
 8007ce0:	4998      	ldr	r1, [pc, #608]	; (8007f44 <_strtod_l+0x57c>)
 8007ce2:	aa1c      	add	r2, sp, #112	; 0x70
 8007ce4:	a819      	add	r0, sp, #100	; 0x64
 8007ce6:	f002 f951 	bl	8009f8c <__hexnan>
 8007cea:	2805      	cmp	r0, #5
 8007cec:	d125      	bne.n	8007d3a <_strtod_l+0x372>
 8007cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cf0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007cf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007cf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007cfc:	e6a5      	b.n	8007a4a <_strtod_l+0x82>
 8007cfe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007d02:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007d06:	e7bc      	b.n	8007c82 <_strtod_l+0x2ba>
 8007d08:	2a6e      	cmp	r2, #110	; 0x6e
 8007d0a:	e7dc      	b.n	8007cc6 <_strtod_l+0x2fe>
 8007d0c:	498e      	ldr	r1, [pc, #568]	; (8007f48 <_strtod_l+0x580>)
 8007d0e:	a819      	add	r0, sp, #100	; 0x64
 8007d10:	f002 f928 	bl	8009f64 <__match>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f43f aeb4 	beq.w	8007a82 <_strtod_l+0xba>
 8007d1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d1c:	498b      	ldr	r1, [pc, #556]	; (8007f4c <_strtod_l+0x584>)
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	a819      	add	r0, sp, #100	; 0x64
 8007d22:	9319      	str	r3, [sp, #100]	; 0x64
 8007d24:	f002 f91e 	bl	8009f64 <__match>
 8007d28:	b910      	cbnz	r0, 8007d30 <_strtod_l+0x368>
 8007d2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	9319      	str	r3, [sp, #100]	; 0x64
 8007d30:	f04f 0800 	mov.w	r8, #0
 8007d34:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007f50 <_strtod_l+0x588>
 8007d38:	e687      	b.n	8007a4a <_strtod_l+0x82>
 8007d3a:	4886      	ldr	r0, [pc, #536]	; (8007f54 <_strtod_l+0x58c>)
 8007d3c:	f003 fa2e 	bl	800b19c <nan>
 8007d40:	4680      	mov	r8, r0
 8007d42:	4689      	mov	r9, r1
 8007d44:	e681      	b.n	8007a4a <_strtod_l+0x82>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	f1bb 0f00 	cmp.w	fp, #0
 8007d4c:	bf08      	it	eq
 8007d4e:	46a3      	moveq	fp, r4
 8007d50:	1aeb      	subs	r3, r5, r3
 8007d52:	2c10      	cmp	r4, #16
 8007d54:	9806      	ldr	r0, [sp, #24]
 8007d56:	4626      	mov	r6, r4
 8007d58:	9307      	str	r3, [sp, #28]
 8007d5a:	bfa8      	it	ge
 8007d5c:	2610      	movge	r6, #16
 8007d5e:	f7f8 fb87 	bl	8000470 <__aeabi_ui2d>
 8007d62:	2c09      	cmp	r4, #9
 8007d64:	4680      	mov	r8, r0
 8007d66:	4689      	mov	r9, r1
 8007d68:	dd13      	ble.n	8007d92 <_strtod_l+0x3ca>
 8007d6a:	4b7b      	ldr	r3, [pc, #492]	; (8007f58 <_strtod_l+0x590>)
 8007d6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d74:	f7f8 fbf6 	bl	8000564 <__aeabi_dmul>
 8007d78:	4680      	mov	r8, r0
 8007d7a:	9805      	ldr	r0, [sp, #20]
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	f7f8 fb77 	bl	8000470 <__aeabi_ui2d>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fa35 	bl	80001f8 <__adddf3>
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4689      	mov	r9, r1
 8007d92:	2c0f      	cmp	r4, #15
 8007d94:	dc36      	bgt.n	8007e04 <_strtod_l+0x43c>
 8007d96:	9b07      	ldr	r3, [sp, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f43f ae56 	beq.w	8007a4a <_strtod_l+0x82>
 8007d9e:	dd22      	ble.n	8007de6 <_strtod_l+0x41e>
 8007da0:	2b16      	cmp	r3, #22
 8007da2:	dc09      	bgt.n	8007db8 <_strtod_l+0x3f0>
 8007da4:	496c      	ldr	r1, [pc, #432]	; (8007f58 <_strtod_l+0x590>)
 8007da6:	4642      	mov	r2, r8
 8007da8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dac:	464b      	mov	r3, r9
 8007dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db2:	f7f8 fbd7 	bl	8000564 <__aeabi_dmul>
 8007db6:	e7c3      	b.n	8007d40 <_strtod_l+0x378>
 8007db8:	9a07      	ldr	r2, [sp, #28]
 8007dba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	db20      	blt.n	8007e04 <_strtod_l+0x43c>
 8007dc2:	4d65      	ldr	r5, [pc, #404]	; (8007f58 <_strtod_l+0x590>)
 8007dc4:	f1c4 040f 	rsb	r4, r4, #15
 8007dc8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007dcc:	4642      	mov	r2, r8
 8007dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	f7f8 fbc6 	bl	8000564 <__aeabi_dmul>
 8007dd8:	9b07      	ldr	r3, [sp, #28]
 8007dda:	1b1c      	subs	r4, r3, r4
 8007ddc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007de4:	e7e5      	b.n	8007db2 <_strtod_l+0x3ea>
 8007de6:	9b07      	ldr	r3, [sp, #28]
 8007de8:	3316      	adds	r3, #22
 8007dea:	db0b      	blt.n	8007e04 <_strtod_l+0x43c>
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	4640      	mov	r0, r8
 8007df0:	1b5d      	subs	r5, r3, r5
 8007df2:	4b59      	ldr	r3, [pc, #356]	; (8007f58 <_strtod_l+0x590>)
 8007df4:	4649      	mov	r1, r9
 8007df6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dfe:	f7f8 fcdb 	bl	80007b8 <__aeabi_ddiv>
 8007e02:	e79d      	b.n	8007d40 <_strtod_l+0x378>
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	1ba6      	subs	r6, r4, r6
 8007e08:	441e      	add	r6, r3
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	dd74      	ble.n	8007ef8 <_strtod_l+0x530>
 8007e0e:	f016 030f 	ands.w	r3, r6, #15
 8007e12:	d00a      	beq.n	8007e2a <_strtod_l+0x462>
 8007e14:	4950      	ldr	r1, [pc, #320]	; (8007f58 <_strtod_l+0x590>)
 8007e16:	4642      	mov	r2, r8
 8007e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e20:	464b      	mov	r3, r9
 8007e22:	f7f8 fb9f 	bl	8000564 <__aeabi_dmul>
 8007e26:	4680      	mov	r8, r0
 8007e28:	4689      	mov	r9, r1
 8007e2a:	f036 060f 	bics.w	r6, r6, #15
 8007e2e:	d052      	beq.n	8007ed6 <_strtod_l+0x50e>
 8007e30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007e34:	dd27      	ble.n	8007e86 <_strtod_l+0x4be>
 8007e36:	f04f 0b00 	mov.w	fp, #0
 8007e3a:	f8cd b010 	str.w	fp, [sp, #16]
 8007e3e:	f8cd b020 	str.w	fp, [sp, #32]
 8007e42:	f8cd b018 	str.w	fp, [sp, #24]
 8007e46:	2322      	movs	r3, #34	; 0x22
 8007e48:	f04f 0800 	mov.w	r8, #0
 8007e4c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007f50 <_strtod_l+0x588>
 8007e50:	f8ca 3000 	str.w	r3, [sl]
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f43f adf7 	beq.w	8007a4a <_strtod_l+0x82>
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e60:	f002 fa1c 	bl	800a29c <_Bfree>
 8007e64:	4650      	mov	r0, sl
 8007e66:	9906      	ldr	r1, [sp, #24]
 8007e68:	f002 fa18 	bl	800a29c <_Bfree>
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	9904      	ldr	r1, [sp, #16]
 8007e70:	f002 fa14 	bl	800a29c <_Bfree>
 8007e74:	4650      	mov	r0, sl
 8007e76:	9908      	ldr	r1, [sp, #32]
 8007e78:	f002 fa10 	bl	800a29c <_Bfree>
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	4650      	mov	r0, sl
 8007e80:	f002 fa0c 	bl	800a29c <_Bfree>
 8007e84:	e5e1      	b.n	8007a4a <_strtod_l+0x82>
 8007e86:	4b35      	ldr	r3, [pc, #212]	; (8007f5c <_strtod_l+0x594>)
 8007e88:	4640      	mov	r0, r8
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4649      	mov	r1, r9
 8007e90:	461f      	mov	r7, r3
 8007e92:	1136      	asrs	r6, r6, #4
 8007e94:	2e01      	cmp	r6, #1
 8007e96:	dc21      	bgt.n	8007edc <_strtod_l+0x514>
 8007e98:	b10b      	cbz	r3, 8007e9e <_strtod_l+0x4d6>
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	4b2f      	ldr	r3, [pc, #188]	; (8007f5c <_strtod_l+0x594>)
 8007ea0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ea4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eae:	464b      	mov	r3, r9
 8007eb0:	f7f8 fb58 	bl	8000564 <__aeabi_dmul>
 8007eb4:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <_strtod_l+0x588>)
 8007eb6:	460a      	mov	r2, r1
 8007eb8:	400b      	ands	r3, r1
 8007eba:	4929      	ldr	r1, [pc, #164]	; (8007f60 <_strtod_l+0x598>)
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	428b      	cmp	r3, r1
 8007ec0:	d8b9      	bhi.n	8007e36 <_strtod_l+0x46e>
 8007ec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ec6:	428b      	cmp	r3, r1
 8007ec8:	bf86      	itte	hi
 8007eca:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ece:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007f64 <_strtod_l+0x59c>
 8007ed2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	e07f      	b.n	8007fdc <_strtod_l+0x614>
 8007edc:	07f2      	lsls	r2, r6, #31
 8007ede:	d505      	bpl.n	8007eec <_strtod_l+0x524>
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 fb3d 	bl	8000564 <__aeabi_dmul>
 8007eea:	2301      	movs	r3, #1
 8007eec:	9a05      	ldr	r2, [sp, #20]
 8007eee:	3701      	adds	r7, #1
 8007ef0:	3208      	adds	r2, #8
 8007ef2:	1076      	asrs	r6, r6, #1
 8007ef4:	9205      	str	r2, [sp, #20]
 8007ef6:	e7cd      	b.n	8007e94 <_strtod_l+0x4cc>
 8007ef8:	d0ed      	beq.n	8007ed6 <_strtod_l+0x50e>
 8007efa:	4276      	negs	r6, r6
 8007efc:	f016 020f 	ands.w	r2, r6, #15
 8007f00:	d00a      	beq.n	8007f18 <_strtod_l+0x550>
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <_strtod_l+0x590>)
 8007f04:	4640      	mov	r0, r8
 8007f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 fc52 	bl	80007b8 <__aeabi_ddiv>
 8007f14:	4680      	mov	r8, r0
 8007f16:	4689      	mov	r9, r1
 8007f18:	1136      	asrs	r6, r6, #4
 8007f1a:	d0dc      	beq.n	8007ed6 <_strtod_l+0x50e>
 8007f1c:	2e1f      	cmp	r6, #31
 8007f1e:	dd23      	ble.n	8007f68 <_strtod_l+0x5a0>
 8007f20:	f04f 0b00 	mov.w	fp, #0
 8007f24:	f8cd b010 	str.w	fp, [sp, #16]
 8007f28:	f8cd b020 	str.w	fp, [sp, #32]
 8007f2c:	f8cd b018 	str.w	fp, [sp, #24]
 8007f30:	2322      	movs	r3, #34	; 0x22
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	f04f 0900 	mov.w	r9, #0
 8007f3a:	f8ca 3000 	str.w	r3, [sl]
 8007f3e:	e789      	b.n	8007e54 <_strtod_l+0x48c>
 8007f40:	0800b7ed 	.word	0x0800b7ed
 8007f44:	0800b89c 	.word	0x0800b89c
 8007f48:	0800b7e5 	.word	0x0800b7e5
 8007f4c:	0800b974 	.word	0x0800b974
 8007f50:	7ff00000 	.word	0x7ff00000
 8007f54:	0800b970 	.word	0x0800b970
 8007f58:	0800bb50 	.word	0x0800bb50
 8007f5c:	0800bb28 	.word	0x0800bb28
 8007f60:	7ca00000 	.word	0x7ca00000
 8007f64:	7fefffff 	.word	0x7fefffff
 8007f68:	f016 0310 	ands.w	r3, r6, #16
 8007f6c:	bf18      	it	ne
 8007f6e:	236a      	movne	r3, #106	; 0x6a
 8007f70:	4640      	mov	r0, r8
 8007f72:	9305      	str	r3, [sp, #20]
 8007f74:	4649      	mov	r1, r9
 8007f76:	2300      	movs	r3, #0
 8007f78:	4fb0      	ldr	r7, [pc, #704]	; (800823c <_strtod_l+0x874>)
 8007f7a:	07f2      	lsls	r2, r6, #31
 8007f7c:	d504      	bpl.n	8007f88 <_strtod_l+0x5c0>
 8007f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f82:	f7f8 faef 	bl	8000564 <__aeabi_dmul>
 8007f86:	2301      	movs	r3, #1
 8007f88:	1076      	asrs	r6, r6, #1
 8007f8a:	f107 0708 	add.w	r7, r7, #8
 8007f8e:	d1f4      	bne.n	8007f7a <_strtod_l+0x5b2>
 8007f90:	b10b      	cbz	r3, 8007f96 <_strtod_l+0x5ce>
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	b1c3      	cbz	r3, 8007fcc <_strtod_l+0x604>
 8007f9a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007f9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	dd11      	ble.n	8007fcc <_strtod_l+0x604>
 8007fa8:	2b1f      	cmp	r3, #31
 8007faa:	f340 8127 	ble.w	80081fc <_strtod_l+0x834>
 8007fae:	2b34      	cmp	r3, #52	; 0x34
 8007fb0:	bfd8      	it	le
 8007fb2:	f04f 33ff 	movle.w	r3, #4294967295
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	bfcf      	iteee	gt
 8007fbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007fc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007fc4:	fa03 f202 	lslle.w	r2, r3, r2
 8007fc8:	ea02 0901 	andle.w	r9, r2, r1
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	f7f8 fd2e 	bl	8000a34 <__aeabi_dcmpeq>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d1a1      	bne.n	8007f20 <_strtod_l+0x558>
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	465a      	mov	r2, fp
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	9908      	ldr	r1, [sp, #32]
 8007fe8:	f002 f9c0 	bl	800a36c <__s2b>
 8007fec:	9008      	str	r0, [sp, #32]
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f43f af21 	beq.w	8007e36 <_strtod_l+0x46e>
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	f04f 0b00 	mov.w	fp, #0
 8007ffa:	1b5d      	subs	r5, r3, r5
 8007ffc:	9b07      	ldr	r3, [sp, #28]
 8007ffe:	f8cd b010 	str.w	fp, [sp, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	bfb4      	ite	lt
 8008006:	462b      	movlt	r3, r5
 8008008:	2300      	movge	r3, #0
 800800a:	930e      	str	r3, [sp, #56]	; 0x38
 800800c:	9b07      	ldr	r3, [sp, #28]
 800800e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008012:	9314      	str	r3, [sp, #80]	; 0x50
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	4650      	mov	r0, sl
 8008018:	6859      	ldr	r1, [r3, #4]
 800801a:	f002 f8ff 	bl	800a21c <_Balloc>
 800801e:	9006      	str	r0, [sp, #24]
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f af10 	beq.w	8007e46 <_strtod_l+0x47e>
 8008026:	9b08      	ldr	r3, [sp, #32]
 8008028:	300c      	adds	r0, #12
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	f103 010c 	add.w	r1, r3, #12
 8008030:	3202      	adds	r2, #2
 8008032:	0092      	lsls	r2, r2, #2
 8008034:	f7fe fd94 	bl	8006b60 <memcpy>
 8008038:	ab1c      	add	r3, sp, #112	; 0x70
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	ab1b      	add	r3, sp, #108	; 0x6c
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	4650      	mov	r0, sl
 8008046:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800804a:	f002 fcd1 	bl	800a9f0 <__d2b>
 800804e:	901a      	str	r0, [sp, #104]	; 0x68
 8008050:	2800      	cmp	r0, #0
 8008052:	f43f aef8 	beq.w	8007e46 <_strtod_l+0x47e>
 8008056:	2101      	movs	r1, #1
 8008058:	4650      	mov	r0, sl
 800805a:	f002 fa1f 	bl	800a49c <__i2b>
 800805e:	4603      	mov	r3, r0
 8008060:	9004      	str	r0, [sp, #16]
 8008062:	2800      	cmp	r0, #0
 8008064:	f43f aeef 	beq.w	8007e46 <_strtod_l+0x47e>
 8008068:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800806a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800806c:	2d00      	cmp	r5, #0
 800806e:	bfab      	itete	ge
 8008070:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008072:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008074:	18ee      	addge	r6, r5, r3
 8008076:	1b5c      	sublt	r4, r3, r5
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	bfa8      	it	ge
 800807c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800807e:	eba5 0503 	sub.w	r5, r5, r3
 8008082:	4415      	add	r5, r2
 8008084:	4b6e      	ldr	r3, [pc, #440]	; (8008240 <_strtod_l+0x878>)
 8008086:	f105 35ff 	add.w	r5, r5, #4294967295
 800808a:	bfb8      	it	lt
 800808c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800808e:	429d      	cmp	r5, r3
 8008090:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008094:	f280 80c4 	bge.w	8008220 <_strtod_l+0x858>
 8008098:	1b5b      	subs	r3, r3, r5
 800809a:	2b1f      	cmp	r3, #31
 800809c:	f04f 0701 	mov.w	r7, #1
 80080a0:	eba2 0203 	sub.w	r2, r2, r3
 80080a4:	f300 80b1 	bgt.w	800820a <_strtod_l+0x842>
 80080a8:	2500      	movs	r5, #0
 80080aa:	fa07 f303 	lsl.w	r3, r7, r3
 80080ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b0:	18b7      	adds	r7, r6, r2
 80080b2:	9b05      	ldr	r3, [sp, #20]
 80080b4:	42be      	cmp	r6, r7
 80080b6:	4414      	add	r4, r2
 80080b8:	441c      	add	r4, r3
 80080ba:	4633      	mov	r3, r6
 80080bc:	bfa8      	it	ge
 80080be:	463b      	movge	r3, r7
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	bfa8      	it	ge
 80080c4:	4623      	movge	r3, r4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfc2      	ittt	gt
 80080ca:	1aff      	subgt	r7, r7, r3
 80080cc:	1ae4      	subgt	r4, r4, r3
 80080ce:	1af6      	subgt	r6, r6, r3
 80080d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dd17      	ble.n	8008106 <_strtod_l+0x73e>
 80080d6:	461a      	mov	r2, r3
 80080d8:	4650      	mov	r0, sl
 80080da:	9904      	ldr	r1, [sp, #16]
 80080dc:	f002 fa9c 	bl	800a618 <__pow5mult>
 80080e0:	9004      	str	r0, [sp, #16]
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f43f aeaf 	beq.w	8007e46 <_strtod_l+0x47e>
 80080e8:	4601      	mov	r1, r0
 80080ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080ec:	4650      	mov	r0, sl
 80080ee:	f002 f9eb 	bl	800a4c8 <__multiply>
 80080f2:	9009      	str	r0, [sp, #36]	; 0x24
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f43f aea6 	beq.w	8007e46 <_strtod_l+0x47e>
 80080fa:	4650      	mov	r0, sl
 80080fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080fe:	f002 f8cd 	bl	800a29c <_Bfree>
 8008102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008104:	931a      	str	r3, [sp, #104]	; 0x68
 8008106:	2f00      	cmp	r7, #0
 8008108:	f300 808e 	bgt.w	8008228 <_strtod_l+0x860>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dd08      	ble.n	8008124 <_strtod_l+0x75c>
 8008112:	4650      	mov	r0, sl
 8008114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008116:	9906      	ldr	r1, [sp, #24]
 8008118:	f002 fa7e 	bl	800a618 <__pow5mult>
 800811c:	9006      	str	r0, [sp, #24]
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f ae91 	beq.w	8007e46 <_strtod_l+0x47e>
 8008124:	2c00      	cmp	r4, #0
 8008126:	dd08      	ble.n	800813a <_strtod_l+0x772>
 8008128:	4622      	mov	r2, r4
 800812a:	4650      	mov	r0, sl
 800812c:	9906      	ldr	r1, [sp, #24]
 800812e:	f002 facd 	bl	800a6cc <__lshift>
 8008132:	9006      	str	r0, [sp, #24]
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f ae86 	beq.w	8007e46 <_strtod_l+0x47e>
 800813a:	2e00      	cmp	r6, #0
 800813c:	dd08      	ble.n	8008150 <_strtod_l+0x788>
 800813e:	4632      	mov	r2, r6
 8008140:	4650      	mov	r0, sl
 8008142:	9904      	ldr	r1, [sp, #16]
 8008144:	f002 fac2 	bl	800a6cc <__lshift>
 8008148:	9004      	str	r0, [sp, #16]
 800814a:	2800      	cmp	r0, #0
 800814c:	f43f ae7b 	beq.w	8007e46 <_strtod_l+0x47e>
 8008150:	4650      	mov	r0, sl
 8008152:	9a06      	ldr	r2, [sp, #24]
 8008154:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008156:	f002 fb45 	bl	800a7e4 <__mdiff>
 800815a:	4683      	mov	fp, r0
 800815c:	2800      	cmp	r0, #0
 800815e:	f43f ae72 	beq.w	8007e46 <_strtod_l+0x47e>
 8008162:	2400      	movs	r4, #0
 8008164:	68c3      	ldr	r3, [r0, #12]
 8008166:	9904      	ldr	r1, [sp, #16]
 8008168:	60c4      	str	r4, [r0, #12]
 800816a:	930b      	str	r3, [sp, #44]	; 0x2c
 800816c:	f002 fb1e 	bl	800a7ac <__mcmp>
 8008170:	42a0      	cmp	r0, r4
 8008172:	da6b      	bge.n	800824c <_strtod_l+0x884>
 8008174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008176:	ea53 0308 	orrs.w	r3, r3, r8
 800817a:	f040 8091 	bne.w	80082a0 <_strtod_l+0x8d8>
 800817e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 808c 	bne.w	80082a0 <_strtod_l+0x8d8>
 8008188:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800818c:	0d1b      	lsrs	r3, r3, #20
 800818e:	051b      	lsls	r3, r3, #20
 8008190:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008194:	f240 8084 	bls.w	80082a0 <_strtod_l+0x8d8>
 8008198:	f8db 3014 	ldr.w	r3, [fp, #20]
 800819c:	b91b      	cbnz	r3, 80081a6 <_strtod_l+0x7de>
 800819e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	dd7c      	ble.n	80082a0 <_strtod_l+0x8d8>
 80081a6:	4659      	mov	r1, fp
 80081a8:	2201      	movs	r2, #1
 80081aa:	4650      	mov	r0, sl
 80081ac:	f002 fa8e 	bl	800a6cc <__lshift>
 80081b0:	9904      	ldr	r1, [sp, #16]
 80081b2:	4683      	mov	fp, r0
 80081b4:	f002 fafa 	bl	800a7ac <__mcmp>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	dd71      	ble.n	80082a0 <_strtod_l+0x8d8>
 80081bc:	9905      	ldr	r1, [sp, #20]
 80081be:	464b      	mov	r3, r9
 80081c0:	4a20      	ldr	r2, [pc, #128]	; (8008244 <_strtod_l+0x87c>)
 80081c2:	2900      	cmp	r1, #0
 80081c4:	f000 808c 	beq.w	80082e0 <_strtod_l+0x918>
 80081c8:	ea02 0109 	and.w	r1, r2, r9
 80081cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081d0:	f300 8086 	bgt.w	80082e0 <_strtod_l+0x918>
 80081d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081d8:	f77f aeaa 	ble.w	8007f30 <_strtod_l+0x568>
 80081dc:	4640      	mov	r0, r8
 80081de:	4649      	mov	r1, r9
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <_strtod_l+0x880>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	f7f8 f9be 	bl	8000564 <__aeabi_dmul>
 80081e8:	460b      	mov	r3, r1
 80081ea:	4303      	orrs	r3, r0
 80081ec:	bf08      	it	eq
 80081ee:	2322      	moveq	r3, #34	; 0x22
 80081f0:	4680      	mov	r8, r0
 80081f2:	4689      	mov	r9, r1
 80081f4:	bf08      	it	eq
 80081f6:	f8ca 3000 	streq.w	r3, [sl]
 80081fa:	e62f      	b.n	8007e5c <_strtod_l+0x494>
 80081fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008200:	fa02 f303 	lsl.w	r3, r2, r3
 8008204:	ea03 0808 	and.w	r8, r3, r8
 8008208:	e6e0      	b.n	8007fcc <_strtod_l+0x604>
 800820a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800820e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008212:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008216:	35e2      	adds	r5, #226	; 0xe2
 8008218:	fa07 f505 	lsl.w	r5, r7, r5
 800821c:	970f      	str	r7, [sp, #60]	; 0x3c
 800821e:	e747      	b.n	80080b0 <_strtod_l+0x6e8>
 8008220:	2301      	movs	r3, #1
 8008222:	2500      	movs	r5, #0
 8008224:	930f      	str	r3, [sp, #60]	; 0x3c
 8008226:	e743      	b.n	80080b0 <_strtod_l+0x6e8>
 8008228:	463a      	mov	r2, r7
 800822a:	4650      	mov	r0, sl
 800822c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800822e:	f002 fa4d 	bl	800a6cc <__lshift>
 8008232:	901a      	str	r0, [sp, #104]	; 0x68
 8008234:	2800      	cmp	r0, #0
 8008236:	f47f af69 	bne.w	800810c <_strtod_l+0x744>
 800823a:	e604      	b.n	8007e46 <_strtod_l+0x47e>
 800823c:	0800b8b0 	.word	0x0800b8b0
 8008240:	fffffc02 	.word	0xfffffc02
 8008244:	7ff00000 	.word	0x7ff00000
 8008248:	39500000 	.word	0x39500000
 800824c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008250:	d165      	bne.n	800831e <_strtod_l+0x956>
 8008252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008254:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008258:	b35a      	cbz	r2, 80082b2 <_strtod_l+0x8ea>
 800825a:	4a99      	ldr	r2, [pc, #612]	; (80084c0 <_strtod_l+0xaf8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d12b      	bne.n	80082b8 <_strtod_l+0x8f0>
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	4641      	mov	r1, r8
 8008264:	b303      	cbz	r3, 80082a8 <_strtod_l+0x8e0>
 8008266:	464a      	mov	r2, r9
 8008268:	4b96      	ldr	r3, [pc, #600]	; (80084c4 <_strtod_l+0xafc>)
 800826a:	4013      	ands	r3, r2
 800826c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	d81b      	bhi.n	80082ae <_strtod_l+0x8e6>
 8008276:	0d1b      	lsrs	r3, r3, #20
 8008278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	4299      	cmp	r1, r3
 8008282:	d119      	bne.n	80082b8 <_strtod_l+0x8f0>
 8008284:	4b90      	ldr	r3, [pc, #576]	; (80084c8 <_strtod_l+0xb00>)
 8008286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008288:	429a      	cmp	r2, r3
 800828a:	d102      	bne.n	8008292 <_strtod_l+0x8ca>
 800828c:	3101      	adds	r1, #1
 800828e:	f43f adda 	beq.w	8007e46 <_strtod_l+0x47e>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	4b8b      	ldr	r3, [pc, #556]	; (80084c4 <_strtod_l+0xafc>)
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	401a      	ands	r2, r3
 800829c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d19a      	bne.n	80081dc <_strtod_l+0x814>
 80082a6:	e5d9      	b.n	8007e5c <_strtod_l+0x494>
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	e7e8      	b.n	8008280 <_strtod_l+0x8b8>
 80082ae:	4613      	mov	r3, r2
 80082b0:	e7e6      	b.n	8008280 <_strtod_l+0x8b8>
 80082b2:	ea53 0308 	orrs.w	r3, r3, r8
 80082b6:	d081      	beq.n	80081bc <_strtod_l+0x7f4>
 80082b8:	b1e5      	cbz	r5, 80082f4 <_strtod_l+0x92c>
 80082ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082bc:	421d      	tst	r5, r3
 80082be:	d0ef      	beq.n	80082a0 <_strtod_l+0x8d8>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c2:	4640      	mov	r0, r8
 80082c4:	4649      	mov	r1, r9
 80082c6:	9a05      	ldr	r2, [sp, #20]
 80082c8:	b1c3      	cbz	r3, 80082fc <_strtod_l+0x934>
 80082ca:	f7ff fb5c 	bl	8007986 <sulp>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082d6:	f7f7 ff8f 	bl	80001f8 <__adddf3>
 80082da:	4680      	mov	r8, r0
 80082dc:	4689      	mov	r9, r1
 80082de:	e7df      	b.n	80082a0 <_strtod_l+0x8d8>
 80082e0:	4013      	ands	r3, r2
 80082e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082e6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80082ea:	f04f 38ff 	mov.w	r8, #4294967295
 80082ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80082f2:	e7d5      	b.n	80082a0 <_strtod_l+0x8d8>
 80082f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082f6:	ea13 0f08 	tst.w	r3, r8
 80082fa:	e7e0      	b.n	80082be <_strtod_l+0x8f6>
 80082fc:	f7ff fb43 	bl	8007986 <sulp>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008308:	f7f7 ff74 	bl	80001f4 <__aeabi_dsub>
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	4680      	mov	r8, r0
 8008312:	4689      	mov	r9, r1
 8008314:	f7f8 fb8e 	bl	8000a34 <__aeabi_dcmpeq>
 8008318:	2800      	cmp	r0, #0
 800831a:	d0c1      	beq.n	80082a0 <_strtod_l+0x8d8>
 800831c:	e608      	b.n	8007f30 <_strtod_l+0x568>
 800831e:	4658      	mov	r0, fp
 8008320:	9904      	ldr	r1, [sp, #16]
 8008322:	f002 fbc1 	bl	800aaa8 <__ratio>
 8008326:	2200      	movs	r2, #0
 8008328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	f7f8 fb94 	bl	8000a5c <__aeabi_dcmple>
 8008334:	2800      	cmp	r0, #0
 8008336:	d070      	beq.n	800841a <_strtod_l+0xa52>
 8008338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d042      	beq.n	80083c4 <_strtod_l+0x9fc>
 800833e:	2600      	movs	r6, #0
 8008340:	4f62      	ldr	r7, [pc, #392]	; (80084cc <_strtod_l+0xb04>)
 8008342:	4d62      	ldr	r5, [pc, #392]	; (80084cc <_strtod_l+0xb04>)
 8008344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800834a:	0d1b      	lsrs	r3, r3, #20
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008352:	4b5f      	ldr	r3, [pc, #380]	; (80084d0 <_strtod_l+0xb08>)
 8008354:	429a      	cmp	r2, r3
 8008356:	f040 80c3 	bne.w	80084e0 <_strtod_l+0xb18>
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	4640      	mov	r0, r8
 800835e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008362:	4649      	mov	r1, r9
 8008364:	f002 faca 	bl	800a8fc <__ulp>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4630      	mov	r0, r6
 800836e:	4639      	mov	r1, r7
 8008370:	f7f8 f8f8 	bl	8000564 <__aeabi_dmul>
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	f7f7 ff3e 	bl	80001f8 <__adddf3>
 800837c:	460b      	mov	r3, r1
 800837e:	4951      	ldr	r1, [pc, #324]	; (80084c4 <_strtod_l+0xafc>)
 8008380:	4a54      	ldr	r2, [pc, #336]	; (80084d4 <_strtod_l+0xb0c>)
 8008382:	4019      	ands	r1, r3
 8008384:	4291      	cmp	r1, r2
 8008386:	4680      	mov	r8, r0
 8008388:	d95d      	bls.n	8008446 <_strtod_l+0xa7e>
 800838a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800838c:	4b4e      	ldr	r3, [pc, #312]	; (80084c8 <_strtod_l+0xb00>)
 800838e:	429a      	cmp	r2, r3
 8008390:	d103      	bne.n	800839a <_strtod_l+0x9d2>
 8008392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008394:	3301      	adds	r3, #1
 8008396:	f43f ad56 	beq.w	8007e46 <_strtod_l+0x47e>
 800839a:	f04f 38ff 	mov.w	r8, #4294967295
 800839e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80084c8 <_strtod_l+0xb00>
 80083a2:	4650      	mov	r0, sl
 80083a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083a6:	f001 ff79 	bl	800a29c <_Bfree>
 80083aa:	4650      	mov	r0, sl
 80083ac:	9906      	ldr	r1, [sp, #24]
 80083ae:	f001 ff75 	bl	800a29c <_Bfree>
 80083b2:	4650      	mov	r0, sl
 80083b4:	9904      	ldr	r1, [sp, #16]
 80083b6:	f001 ff71 	bl	800a29c <_Bfree>
 80083ba:	4659      	mov	r1, fp
 80083bc:	4650      	mov	r0, sl
 80083be:	f001 ff6d 	bl	800a29c <_Bfree>
 80083c2:	e627      	b.n	8008014 <_strtod_l+0x64c>
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	d119      	bne.n	80083fe <_strtod_l+0xa36>
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d0:	b9e3      	cbnz	r3, 800840c <_strtod_l+0xa44>
 80083d2:	2200      	movs	r2, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <_strtod_l+0xb04>)
 80083da:	f7f8 fb35 	bl	8000a48 <__aeabi_dcmplt>
 80083de:	b9c8      	cbnz	r0, 8008414 <_strtod_l+0xa4c>
 80083e0:	2200      	movs	r2, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <_strtod_l+0xb10>)
 80083e8:	f7f8 f8bc 	bl	8000564 <__aeabi_dmul>
 80083ec:	4604      	mov	r4, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80083f4:	9416      	str	r4, [sp, #88]	; 0x58
 80083f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80083f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80083fc:	e7a2      	b.n	8008344 <_strtod_l+0x97c>
 80083fe:	f1b8 0f01 	cmp.w	r8, #1
 8008402:	d103      	bne.n	800840c <_strtod_l+0xa44>
 8008404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	f43f ad92 	beq.w	8007f30 <_strtod_l+0x568>
 800840c:	2600      	movs	r6, #0
 800840e:	2400      	movs	r4, #0
 8008410:	4f32      	ldr	r7, [pc, #200]	; (80084dc <_strtod_l+0xb14>)
 8008412:	e796      	b.n	8008342 <_strtod_l+0x97a>
 8008414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008416:	4d30      	ldr	r5, [pc, #192]	; (80084d8 <_strtod_l+0xb10>)
 8008418:	e7ea      	b.n	80083f0 <_strtod_l+0xa28>
 800841a:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <_strtod_l+0xb10>)
 800841c:	2200      	movs	r2, #0
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7f8 f89f 	bl	8000564 <__aeabi_dmul>
 8008426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	b933      	cbnz	r3, 800843c <_strtod_l+0xa74>
 800842e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008432:	9010      	str	r0, [sp, #64]	; 0x40
 8008434:	9311      	str	r3, [sp, #68]	; 0x44
 8008436:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800843a:	e783      	b.n	8008344 <_strtod_l+0x97c>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008444:	e7f7      	b.n	8008436 <_strtod_l+0xa6e>
 8008446:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800844a:	9b05      	ldr	r3, [sp, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1a8      	bne.n	80083a2 <_strtod_l+0x9da>
 8008450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008456:	0d1b      	lsrs	r3, r3, #20
 8008458:	051b      	lsls	r3, r3, #20
 800845a:	429a      	cmp	r2, r3
 800845c:	d1a1      	bne.n	80083a2 <_strtod_l+0x9da>
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 fd4f 	bl	8000f04 <__aeabi_d2lz>
 8008466:	f7f8 f84f 	bl	8000508 <__aeabi_l2d>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 febf 	bl	80001f4 <__aeabi_dsub>
 8008476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800847c:	ea43 0308 	orr.w	r3, r3, r8
 8008480:	4313      	orrs	r3, r2
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	d066      	beq.n	8008556 <_strtod_l+0xb8e>
 8008488:	a309      	add	r3, pc, #36	; (adr r3, 80084b0 <_strtod_l+0xae8>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 fadb 	bl	8000a48 <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f47f ace2 	bne.w	8007e5c <_strtod_l+0x494>
 8008498:	a307      	add	r3, pc, #28	; (adr r3, 80084b8 <_strtod_l+0xaf0>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 faef 	bl	8000a84 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f af7b 	beq.w	80083a2 <_strtod_l+0x9da>
 80084ac:	e4d6      	b.n	8007e5c <_strtod_l+0x494>
 80084ae:	bf00      	nop
 80084b0:	94a03595 	.word	0x94a03595
 80084b4:	3fdfffff 	.word	0x3fdfffff
 80084b8:	35afe535 	.word	0x35afe535
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	000fffff 	.word	0x000fffff
 80084c4:	7ff00000 	.word	0x7ff00000
 80084c8:	7fefffff 	.word	0x7fefffff
 80084cc:	3ff00000 	.word	0x3ff00000
 80084d0:	7fe00000 	.word	0x7fe00000
 80084d4:	7c9fffff 	.word	0x7c9fffff
 80084d8:	3fe00000 	.word	0x3fe00000
 80084dc:	bff00000 	.word	0xbff00000
 80084e0:	9b05      	ldr	r3, [sp, #20]
 80084e2:	b313      	cbz	r3, 800852a <_strtod_l+0xb62>
 80084e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084ea:	d81e      	bhi.n	800852a <_strtod_l+0xb62>
 80084ec:	a326      	add	r3, pc, #152	; (adr r3, 8008588 <_strtod_l+0xbc0>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 fab1 	bl	8000a5c <__aeabi_dcmple>
 80084fa:	b190      	cbz	r0, 8008522 <_strtod_l+0xb5a>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4620      	mov	r0, r4
 8008500:	f7f8 fb08 	bl	8000b14 <__aeabi_d2uiz>
 8008504:	2801      	cmp	r0, #1
 8008506:	bf38      	it	cc
 8008508:	2001      	movcc	r0, #1
 800850a:	f7f7 ffb1 	bl	8000470 <__aeabi_ui2d>
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	b9d3      	cbnz	r3, 800854c <_strtod_l+0xb84>
 8008516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851a:	9012      	str	r0, [sp, #72]	; 0x48
 800851c:	9313      	str	r3, [sp, #76]	; 0x4c
 800851e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008524:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008528:	1a9f      	subs	r7, r3, r2
 800852a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800852e:	f002 f9e5 	bl	800a8fc <__ulp>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	f7f8 f813 	bl	8000564 <__aeabi_dmul>
 800853e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008542:	f7f7 fe59 	bl	80001f8 <__adddf3>
 8008546:	4680      	mov	r8, r0
 8008548:	4689      	mov	r9, r1
 800854a:	e77e      	b.n	800844a <_strtod_l+0xa82>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008554:	e7e3      	b.n	800851e <_strtod_l+0xb56>
 8008556:	a30e      	add	r3, pc, #56	; (adr r3, 8008590 <_strtod_l+0xbc8>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f8 fa74 	bl	8000a48 <__aeabi_dcmplt>
 8008560:	e7a1      	b.n	80084a6 <_strtod_l+0xade>
 8008562:	2300      	movs	r3, #0
 8008564:	930a      	str	r3, [sp, #40]	; 0x28
 8008566:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008568:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	f7ff ba71 	b.w	8007a52 <_strtod_l+0x8a>
 8008570:	2a65      	cmp	r2, #101	; 0x65
 8008572:	f43f ab63 	beq.w	8007c3c <_strtod_l+0x274>
 8008576:	2a45      	cmp	r2, #69	; 0x45
 8008578:	f43f ab60 	beq.w	8007c3c <_strtod_l+0x274>
 800857c:	2301      	movs	r3, #1
 800857e:	f7ff bb95 	b.w	8007cac <_strtod_l+0x2e4>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
 8008588:	ffc00000 	.word	0xffc00000
 800858c:	41dfffff 	.word	0x41dfffff
 8008590:	94a03595 	.word	0x94a03595
 8008594:	3fcfffff 	.word	0x3fcfffff

08008598 <strtod>:
 8008598:	460a      	mov	r2, r1
 800859a:	4601      	mov	r1, r0
 800859c:	4802      	ldr	r0, [pc, #8]	; (80085a8 <strtod+0x10>)
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <strtod+0x14>)
 80085a0:	6800      	ldr	r0, [r0, #0]
 80085a2:	f7ff ba11 	b.w	80079c8 <_strtod_l>
 80085a6:	bf00      	nop
 80085a8:	20000034 	.word	0x20000034
 80085ac:	2000009c 	.word	0x2000009c

080085b0 <strtok>:
 80085b0:	4b16      	ldr	r3, [pc, #88]	; (800860c <strtok+0x5c>)
 80085b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b6:	681f      	ldr	r7, [r3, #0]
 80085b8:	4605      	mov	r5, r0
 80085ba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80085bc:	460e      	mov	r6, r1
 80085be:	b9ec      	cbnz	r4, 80085fc <strtok+0x4c>
 80085c0:	2050      	movs	r0, #80	; 0x50
 80085c2:	f7fe fabd 	bl	8006b40 <malloc>
 80085c6:	4602      	mov	r2, r0
 80085c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80085ca:	b920      	cbnz	r0, 80085d6 <strtok+0x26>
 80085cc:	2157      	movs	r1, #87	; 0x57
 80085ce:	4b10      	ldr	r3, [pc, #64]	; (8008610 <strtok+0x60>)
 80085d0:	4810      	ldr	r0, [pc, #64]	; (8008614 <strtok+0x64>)
 80085d2:	f000 f9a1 	bl	8008918 <__assert_func>
 80085d6:	e9c0 4400 	strd	r4, r4, [r0]
 80085da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80085e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80085ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80085ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80085f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80085f6:	6184      	str	r4, [r0, #24]
 80085f8:	7704      	strb	r4, [r0, #28]
 80085fa:	6244      	str	r4, [r0, #36]	; 0x24
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008602:	2301      	movs	r3, #1
 8008604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	f000 b806 	b.w	8008618 <__strtok_r>
 800860c:	20000034 	.word	0x20000034
 8008610:	0800b814 	.word	0x0800b814
 8008614:	0800b8d8 	.word	0x0800b8d8

08008618 <__strtok_r>:
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	b908      	cbnz	r0, 8008620 <__strtok_r+0x8>
 800861c:	6810      	ldr	r0, [r2, #0]
 800861e:	b188      	cbz	r0, 8008644 <__strtok_r+0x2c>
 8008620:	4604      	mov	r4, r0
 8008622:	460f      	mov	r7, r1
 8008624:	4620      	mov	r0, r4
 8008626:	f814 5b01 	ldrb.w	r5, [r4], #1
 800862a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800862e:	b91e      	cbnz	r6, 8008638 <__strtok_r+0x20>
 8008630:	b965      	cbnz	r5, 800864c <__strtok_r+0x34>
 8008632:	4628      	mov	r0, r5
 8008634:	6015      	str	r5, [r2, #0]
 8008636:	e005      	b.n	8008644 <__strtok_r+0x2c>
 8008638:	42b5      	cmp	r5, r6
 800863a:	d1f6      	bne.n	800862a <__strtok_r+0x12>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1f0      	bne.n	8008622 <__strtok_r+0xa>
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	7003      	strb	r3, [r0, #0]
 8008644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008646:	461c      	mov	r4, r3
 8008648:	e00c      	b.n	8008664 <__strtok_r+0x4c>
 800864a:	b915      	cbnz	r5, 8008652 <__strtok_r+0x3a>
 800864c:	460e      	mov	r6, r1
 800864e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008652:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008656:	42ab      	cmp	r3, r5
 8008658:	d1f7      	bne.n	800864a <__strtok_r+0x32>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f3      	beq.n	8008646 <__strtok_r+0x2e>
 800865e:	2300      	movs	r3, #0
 8008660:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008664:	6014      	str	r4, [r2, #0]
 8008666:	e7ed      	b.n	8008644 <__strtok_r+0x2c>

08008668 <_strtol_l.constprop.0>:
 8008668:	2b01      	cmp	r3, #1
 800866a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866e:	4680      	mov	r8, r0
 8008670:	d001      	beq.n	8008676 <_strtol_l.constprop.0+0xe>
 8008672:	2b24      	cmp	r3, #36	; 0x24
 8008674:	d906      	bls.n	8008684 <_strtol_l.constprop.0+0x1c>
 8008676:	f7fe fa39 	bl	8006aec <__errno>
 800867a:	2316      	movs	r3, #22
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	2000      	movs	r0, #0
 8008680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008684:	460d      	mov	r5, r1
 8008686:	4f35      	ldr	r7, [pc, #212]	; (800875c <_strtol_l.constprop.0+0xf4>)
 8008688:	4628      	mov	r0, r5
 800868a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800868e:	5de6      	ldrb	r6, [r4, r7]
 8008690:	f016 0608 	ands.w	r6, r6, #8
 8008694:	d1f8      	bne.n	8008688 <_strtol_l.constprop.0+0x20>
 8008696:	2c2d      	cmp	r4, #45	; 0x2d
 8008698:	d12f      	bne.n	80086fa <_strtol_l.constprop.0+0x92>
 800869a:	2601      	movs	r6, #1
 800869c:	782c      	ldrb	r4, [r5, #0]
 800869e:	1c85      	adds	r5, r0, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d057      	beq.n	8008754 <_strtol_l.constprop.0+0xec>
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d109      	bne.n	80086bc <_strtol_l.constprop.0+0x54>
 80086a8:	2c30      	cmp	r4, #48	; 0x30
 80086aa:	d107      	bne.n	80086bc <_strtol_l.constprop.0+0x54>
 80086ac:	7828      	ldrb	r0, [r5, #0]
 80086ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80086b2:	2858      	cmp	r0, #88	; 0x58
 80086b4:	d149      	bne.n	800874a <_strtol_l.constprop.0+0xe2>
 80086b6:	2310      	movs	r3, #16
 80086b8:	786c      	ldrb	r4, [r5, #1]
 80086ba:	3502      	adds	r5, #2
 80086bc:	2700      	movs	r7, #0
 80086be:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80086c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80086c6:	fbbe f9f3 	udiv	r9, lr, r3
 80086ca:	4638      	mov	r0, r7
 80086cc:	fb03 ea19 	mls	sl, r3, r9, lr
 80086d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80086d4:	f1bc 0f09 	cmp.w	ip, #9
 80086d8:	d814      	bhi.n	8008704 <_strtol_l.constprop.0+0x9c>
 80086da:	4664      	mov	r4, ip
 80086dc:	42a3      	cmp	r3, r4
 80086de:	dd22      	ble.n	8008726 <_strtol_l.constprop.0+0xbe>
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	db1d      	blt.n	8008720 <_strtol_l.constprop.0+0xb8>
 80086e4:	4581      	cmp	r9, r0
 80086e6:	d31b      	bcc.n	8008720 <_strtol_l.constprop.0+0xb8>
 80086e8:	d101      	bne.n	80086ee <_strtol_l.constprop.0+0x86>
 80086ea:	45a2      	cmp	sl, r4
 80086ec:	db18      	blt.n	8008720 <_strtol_l.constprop.0+0xb8>
 80086ee:	2701      	movs	r7, #1
 80086f0:	fb00 4003 	mla	r0, r0, r3, r4
 80086f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086f8:	e7ea      	b.n	80086d0 <_strtol_l.constprop.0+0x68>
 80086fa:	2c2b      	cmp	r4, #43	; 0x2b
 80086fc:	bf04      	itt	eq
 80086fe:	782c      	ldrbeq	r4, [r5, #0]
 8008700:	1c85      	addeq	r5, r0, #2
 8008702:	e7cd      	b.n	80086a0 <_strtol_l.constprop.0+0x38>
 8008704:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008708:	f1bc 0f19 	cmp.w	ip, #25
 800870c:	d801      	bhi.n	8008712 <_strtol_l.constprop.0+0xaa>
 800870e:	3c37      	subs	r4, #55	; 0x37
 8008710:	e7e4      	b.n	80086dc <_strtol_l.constprop.0+0x74>
 8008712:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008716:	f1bc 0f19 	cmp.w	ip, #25
 800871a:	d804      	bhi.n	8008726 <_strtol_l.constprop.0+0xbe>
 800871c:	3c57      	subs	r4, #87	; 0x57
 800871e:	e7dd      	b.n	80086dc <_strtol_l.constprop.0+0x74>
 8008720:	f04f 37ff 	mov.w	r7, #4294967295
 8008724:	e7e6      	b.n	80086f4 <_strtol_l.constprop.0+0x8c>
 8008726:	2f00      	cmp	r7, #0
 8008728:	da07      	bge.n	800873a <_strtol_l.constprop.0+0xd2>
 800872a:	2322      	movs	r3, #34	; 0x22
 800872c:	4670      	mov	r0, lr
 800872e:	f8c8 3000 	str.w	r3, [r8]
 8008732:	2a00      	cmp	r2, #0
 8008734:	d0a4      	beq.n	8008680 <_strtol_l.constprop.0+0x18>
 8008736:	1e69      	subs	r1, r5, #1
 8008738:	e005      	b.n	8008746 <_strtol_l.constprop.0+0xde>
 800873a:	b106      	cbz	r6, 800873e <_strtol_l.constprop.0+0xd6>
 800873c:	4240      	negs	r0, r0
 800873e:	2a00      	cmp	r2, #0
 8008740:	d09e      	beq.n	8008680 <_strtol_l.constprop.0+0x18>
 8008742:	2f00      	cmp	r7, #0
 8008744:	d1f7      	bne.n	8008736 <_strtol_l.constprop.0+0xce>
 8008746:	6011      	str	r1, [r2, #0]
 8008748:	e79a      	b.n	8008680 <_strtol_l.constprop.0+0x18>
 800874a:	2430      	movs	r4, #48	; 0x30
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1b5      	bne.n	80086bc <_strtol_l.constprop.0+0x54>
 8008750:	2308      	movs	r3, #8
 8008752:	e7b3      	b.n	80086bc <_strtol_l.constprop.0+0x54>
 8008754:	2c30      	cmp	r4, #48	; 0x30
 8008756:	d0a9      	beq.n	80086ac <_strtol_l.constprop.0+0x44>
 8008758:	230a      	movs	r3, #10
 800875a:	e7af      	b.n	80086bc <_strtol_l.constprop.0+0x54>
 800875c:	0800b6d9 	.word	0x0800b6d9

08008760 <strtol>:
 8008760:	4613      	mov	r3, r2
 8008762:	460a      	mov	r2, r1
 8008764:	4601      	mov	r1, r0
 8008766:	4802      	ldr	r0, [pc, #8]	; (8008770 <strtol+0x10>)
 8008768:	6800      	ldr	r0, [r0, #0]
 800876a:	f7ff bf7d 	b.w	8008668 <_strtol_l.constprop.0>
 800876e:	bf00      	nop
 8008770:	20000034 	.word	0x20000034

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6983      	ldr	r3, [r0, #24]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f001 f889 	bl	8009898 <__sinit>
 8008786:	4b21      	ldr	r3, [pc, #132]	; (800880c <__swbuf_r+0x98>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d12b      	bne.n	80087e4 <__swbuf_r+0x70>
 800878c:	686c      	ldr	r4, [r5, #4]
 800878e:	69a3      	ldr	r3, [r4, #24]
 8008790:	60a3      	str	r3, [r4, #8]
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	071a      	lsls	r2, r3, #28
 8008796:	d52f      	bpl.n	80087f8 <__swbuf_r+0x84>
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	b36b      	cbz	r3, 80087f8 <__swbuf_r+0x84>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	b2f6      	uxtb	r6, r6
 80087a2:	1ac0      	subs	r0, r0, r3
 80087a4:	6963      	ldr	r3, [r4, #20]
 80087a6:	4637      	mov	r7, r6
 80087a8:	4283      	cmp	r3, r0
 80087aa:	dc04      	bgt.n	80087b6 <__swbuf_r+0x42>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 ffde 	bl	8009770 <_fflush_r>
 80087b4:	bb30      	cbnz	r0, 8008804 <__swbuf_r+0x90>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3001      	adds	r0, #1
 80087ba:	3b01      	subs	r3, #1
 80087bc:	60a3      	str	r3, [r4, #8]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	701e      	strb	r6, [r3, #0]
 80087c6:	6963      	ldr	r3, [r4, #20]
 80087c8:	4283      	cmp	r3, r0
 80087ca:	d004      	beq.n	80087d6 <__swbuf_r+0x62>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	07db      	lsls	r3, r3, #31
 80087d0:	d506      	bpl.n	80087e0 <__swbuf_r+0x6c>
 80087d2:	2e0a      	cmp	r6, #10
 80087d4:	d104      	bne.n	80087e0 <__swbuf_r+0x6c>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 ffc9 	bl	8009770 <_fflush_r>
 80087de:	b988      	cbnz	r0, 8008804 <__swbuf_r+0x90>
 80087e0:	4638      	mov	r0, r7
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e4:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <__swbuf_r+0x9c>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d101      	bne.n	80087ee <__swbuf_r+0x7a>
 80087ea:	68ac      	ldr	r4, [r5, #8]
 80087ec:	e7cf      	b.n	800878e <__swbuf_r+0x1a>
 80087ee:	4b09      	ldr	r3, [pc, #36]	; (8008814 <__swbuf_r+0xa0>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	bf08      	it	eq
 80087f4:	68ec      	ldreq	r4, [r5, #12]
 80087f6:	e7ca      	b.n	800878e <__swbuf_r+0x1a>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f81e 	bl	800883c <__swsetup_r>
 8008800:	2800      	cmp	r0, #0
 8008802:	d0cb      	beq.n	800879c <__swbuf_r+0x28>
 8008804:	f04f 37ff 	mov.w	r7, #4294967295
 8008808:	e7ea      	b.n	80087e0 <__swbuf_r+0x6c>
 800880a:	bf00      	nop
 800880c:	0800ba0c 	.word	0x0800ba0c
 8008810:	0800ba2c 	.word	0x0800ba2c
 8008814:	0800b9ec 	.word	0x0800b9ec

08008818 <_write_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	4611      	mov	r1, r2
 8008820:	2200      	movs	r2, #0
 8008822:	4d05      	ldr	r5, [pc, #20]	; (8008838 <_write_r+0x20>)
 8008824:	602a      	str	r2, [r5, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7fb fbd2 	bl	8003fd0 <_write>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_write_r+0x1e>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_write_r+0x1e>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	200007a4 	.word	0x200007a4

0800883c <__swsetup_r>:
 800883c:	4b32      	ldr	r3, [pc, #200]	; (8008908 <__swsetup_r+0xcc>)
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	681d      	ldr	r5, [r3, #0]
 8008842:	4606      	mov	r6, r0
 8008844:	460c      	mov	r4, r1
 8008846:	b125      	cbz	r5, 8008852 <__swsetup_r+0x16>
 8008848:	69ab      	ldr	r3, [r5, #24]
 800884a:	b913      	cbnz	r3, 8008852 <__swsetup_r+0x16>
 800884c:	4628      	mov	r0, r5
 800884e:	f001 f823 	bl	8009898 <__sinit>
 8008852:	4b2e      	ldr	r3, [pc, #184]	; (800890c <__swsetup_r+0xd0>)
 8008854:	429c      	cmp	r4, r3
 8008856:	d10f      	bne.n	8008878 <__swsetup_r+0x3c>
 8008858:	686c      	ldr	r4, [r5, #4]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008860:	0719      	lsls	r1, r3, #28
 8008862:	d42c      	bmi.n	80088be <__swsetup_r+0x82>
 8008864:	06dd      	lsls	r5, r3, #27
 8008866:	d411      	bmi.n	800888c <__swsetup_r+0x50>
 8008868:	2309      	movs	r3, #9
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	e03e      	b.n	80088f6 <__swsetup_r+0xba>
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <__swsetup_r+0xd4>)
 800887a:	429c      	cmp	r4, r3
 800887c:	d101      	bne.n	8008882 <__swsetup_r+0x46>
 800887e:	68ac      	ldr	r4, [r5, #8]
 8008880:	e7eb      	b.n	800885a <__swsetup_r+0x1e>
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <__swsetup_r+0xd8>)
 8008884:	429c      	cmp	r4, r3
 8008886:	bf08      	it	eq
 8008888:	68ec      	ldreq	r4, [r5, #12]
 800888a:	e7e6      	b.n	800885a <__swsetup_r+0x1e>
 800888c:	0758      	lsls	r0, r3, #29
 800888e:	d512      	bpl.n	80088b6 <__swsetup_r+0x7a>
 8008890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008892:	b141      	cbz	r1, 80088a6 <__swsetup_r+0x6a>
 8008894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008898:	4299      	cmp	r1, r3
 800889a:	d002      	beq.n	80088a2 <__swsetup_r+0x66>
 800889c:	4630      	mov	r0, r6
 800889e:	f7fe f975 	bl	8006b8c <_free_r>
 80088a2:	2300      	movs	r3, #0
 80088a4:	6363      	str	r3, [r4, #52]	; 0x34
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	2300      	movs	r3, #0
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f043 0308 	orr.w	r3, r3, #8
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	b94b      	cbnz	r3, 80088d6 <__swsetup_r+0x9a>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088cc:	d003      	beq.n	80088d6 <__swsetup_r+0x9a>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	f001 fc37 	bl	800a144 <__smakebuf_r>
 80088d6:	89a0      	ldrh	r0, [r4, #12]
 80088d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088dc:	f010 0301 	ands.w	r3, r0, #1
 80088e0:	d00a      	beq.n	80088f8 <__swsetup_r+0xbc>
 80088e2:	2300      	movs	r3, #0
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	6963      	ldr	r3, [r4, #20]
 80088e8:	425b      	negs	r3, r3
 80088ea:	61a3      	str	r3, [r4, #24]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b943      	cbnz	r3, 8008902 <__swsetup_r+0xc6>
 80088f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088f4:	d1ba      	bne.n	800886c <__swsetup_r+0x30>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	0781      	lsls	r1, r0, #30
 80088fa:	bf58      	it	pl
 80088fc:	6963      	ldrpl	r3, [r4, #20]
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	e7f4      	b.n	80088ec <__swsetup_r+0xb0>
 8008902:	2000      	movs	r0, #0
 8008904:	e7f7      	b.n	80088f6 <__swsetup_r+0xba>
 8008906:	bf00      	nop
 8008908:	20000034 	.word	0x20000034
 800890c:	0800ba0c 	.word	0x0800ba0c
 8008910:	0800ba2c 	.word	0x0800ba2c
 8008914:	0800b9ec 	.word	0x0800b9ec

08008918 <__assert_func>:
 8008918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800891a:	4614      	mov	r4, r2
 800891c:	461a      	mov	r2, r3
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <__assert_func+0x2c>)
 8008920:	4605      	mov	r5, r0
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68d8      	ldr	r0, [r3, #12]
 8008926:	b14c      	cbz	r4, 800893c <__assert_func+0x24>
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <__assert_func+0x30>)
 800892a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800892e:	9100      	str	r1, [sp, #0]
 8008930:	462b      	mov	r3, r5
 8008932:	4906      	ldr	r1, [pc, #24]	; (800894c <__assert_func+0x34>)
 8008934:	f001 f82e 	bl	8009994 <fiprintf>
 8008938:	f002 fc43 	bl	800b1c2 <abort>
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <__assert_func+0x38>)
 800893e:	461c      	mov	r4, r3
 8008940:	e7f3      	b.n	800892a <__assert_func+0x12>
 8008942:	bf00      	nop
 8008944:	20000034 	.word	0x20000034
 8008948:	0800b935 	.word	0x0800b935
 800894c:	0800b942 	.word	0x0800b942
 8008950:	0800b970 	.word	0x0800b970

08008954 <_close_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	2300      	movs	r3, #0
 8008958:	4d05      	ldr	r5, [pc, #20]	; (8008970 <_close_r+0x1c>)
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7fb fb52 	bl	8004008 <_close>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_close_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_close_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200007a4 	.word	0x200007a4

08008974 <quorem>:
 8008974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	6903      	ldr	r3, [r0, #16]
 800897a:	690c      	ldr	r4, [r1, #16]
 800897c:	4607      	mov	r7, r0
 800897e:	42a3      	cmp	r3, r4
 8008980:	f2c0 8082 	blt.w	8008a88 <quorem+0x114>
 8008984:	3c01      	subs	r4, #1
 8008986:	f100 0514 	add.w	r5, r0, #20
 800898a:	f101 0814 	add.w	r8, r1, #20
 800898e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800899c:	3301      	adds	r3, #1
 800899e:	429a      	cmp	r2, r3
 80089a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80089a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089ac:	d331      	bcc.n	8008a12 <quorem+0x9e>
 80089ae:	f04f 0e00 	mov.w	lr, #0
 80089b2:	4640      	mov	r0, r8
 80089b4:	46ac      	mov	ip, r5
 80089b6:	46f2      	mov	sl, lr
 80089b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80089bc:	b293      	uxth	r3, r2
 80089be:	fb06 e303 	mla	r3, r6, r3, lr
 80089c2:	0c12      	lsrs	r2, r2, #16
 80089c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	fb06 e202 	mla	r2, r6, r2, lr
 80089ce:	ebaa 0303 	sub.w	r3, sl, r3
 80089d2:	f8dc a000 	ldr.w	sl, [ip]
 80089d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089da:	fa1f fa8a 	uxth.w	sl, sl
 80089de:	4453      	add	r3, sl
 80089e0:	f8dc a000 	ldr.w	sl, [ip]
 80089e4:	b292      	uxth	r2, r2
 80089e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f4:	4581      	cmp	r9, r0
 80089f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089fa:	f84c 3b04 	str.w	r3, [ip], #4
 80089fe:	d2db      	bcs.n	80089b8 <quorem+0x44>
 8008a00:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a04:	b92b      	cbnz	r3, 8008a12 <quorem+0x9e>
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	3b04      	subs	r3, #4
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	d32f      	bcc.n	8008a70 <quorem+0xfc>
 8008a10:	613c      	str	r4, [r7, #16]
 8008a12:	4638      	mov	r0, r7
 8008a14:	f001 feca 	bl	800a7ac <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	db25      	blt.n	8008a68 <quorem+0xf4>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f04f 0c00 	mov.w	ip, #0
 8008a22:	3601      	adds	r6, #1
 8008a24:	f858 1b04 	ldr.w	r1, [r8], #4
 8008a28:	f8d0 e000 	ldr.w	lr, [r0]
 8008a2c:	b28b      	uxth	r3, r1
 8008a2e:	ebac 0303 	sub.w	r3, ip, r3
 8008a32:	fa1f f28e 	uxth.w	r2, lr
 8008a36:	4413      	add	r3, r2
 8008a38:	0c0a      	lsrs	r2, r1, #16
 8008a3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a48:	45c1      	cmp	r9, r8
 8008a4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a4e:	f840 3b04 	str.w	r3, [r0], #4
 8008a52:	d2e7      	bcs.n	8008a24 <quorem+0xb0>
 8008a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a5c:	b922      	cbnz	r2, 8008a68 <quorem+0xf4>
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	429d      	cmp	r5, r3
 8008a62:	461a      	mov	r2, r3
 8008a64:	d30a      	bcc.n	8008a7c <quorem+0x108>
 8008a66:	613c      	str	r4, [r7, #16]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	b003      	add	sp, #12
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	3b04      	subs	r3, #4
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	d1cb      	bne.n	8008a10 <quorem+0x9c>
 8008a78:	3c01      	subs	r4, #1
 8008a7a:	e7c6      	b.n	8008a0a <quorem+0x96>
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	3b04      	subs	r3, #4
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d1f0      	bne.n	8008a66 <quorem+0xf2>
 8008a84:	3c01      	subs	r4, #1
 8008a86:	e7eb      	b.n	8008a60 <quorem+0xec>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7ee      	b.n	8008a6a <quorem+0xf6>
 8008a8c:	0000      	movs	r0, r0
	...

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4616      	mov	r6, r2
 8008a96:	461f      	mov	r7, r3
 8008a98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a9a:	b099      	sub	sp, #100	; 0x64
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008aa2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008aa6:	b974      	cbnz	r4, 8008ac6 <_dtoa_r+0x36>
 8008aa8:	2010      	movs	r0, #16
 8008aaa:	f7fe f849 	bl	8006b40 <malloc>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6268      	str	r0, [r5, #36]	; 0x24
 8008ab2:	b920      	cbnz	r0, 8008abe <_dtoa_r+0x2e>
 8008ab4:	21ea      	movs	r1, #234	; 0xea
 8008ab6:	4ba8      	ldr	r3, [pc, #672]	; (8008d58 <_dtoa_r+0x2c8>)
 8008ab8:	48a8      	ldr	r0, [pc, #672]	; (8008d5c <_dtoa_r+0x2cc>)
 8008aba:	f7ff ff2d 	bl	8008918 <__assert_func>
 8008abe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ac2:	6004      	str	r4, [r0, #0]
 8008ac4:	60c4      	str	r4, [r0, #12]
 8008ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	b151      	cbz	r1, 8008ae2 <_dtoa_r+0x52>
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4093      	lsls	r3, r2
 8008ad2:	604a      	str	r2, [r1, #4]
 8008ad4:	608b      	str	r3, [r1, #8]
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f001 fbe0 	bl	800a29c <_Bfree>
 8008adc:	2200      	movs	r2, #0
 8008ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	1e3b      	subs	r3, r7, #0
 8008ae4:	bfaf      	iteee	ge
 8008ae6:	2300      	movge	r3, #0
 8008ae8:	2201      	movlt	r2, #1
 8008aea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008aee:	9305      	strlt	r3, [sp, #20]
 8008af0:	bfa8      	it	ge
 8008af2:	f8c8 3000 	strge.w	r3, [r8]
 8008af6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008afa:	4b99      	ldr	r3, [pc, #612]	; (8008d60 <_dtoa_r+0x2d0>)
 8008afc:	bfb8      	it	lt
 8008afe:	f8c8 2000 	strlt.w	r2, [r8]
 8008b02:	ea33 0309 	bics.w	r3, r3, r9
 8008b06:	d119      	bne.n	8008b3c <_dtoa_r+0xac>
 8008b08:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b14:	4333      	orrs	r3, r6
 8008b16:	f000 857f 	beq.w	8009618 <_dtoa_r+0xb88>
 8008b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b1c:	b953      	cbnz	r3, 8008b34 <_dtoa_r+0xa4>
 8008b1e:	4b91      	ldr	r3, [pc, #580]	; (8008d64 <_dtoa_r+0x2d4>)
 8008b20:	e022      	b.n	8008b68 <_dtoa_r+0xd8>
 8008b22:	4b91      	ldr	r3, [pc, #580]	; (8008d68 <_dtoa_r+0x2d8>)
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	3308      	adds	r3, #8
 8008b28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	9803      	ldr	r0, [sp, #12]
 8008b2e:	b019      	add	sp, #100	; 0x64
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	4b8b      	ldr	r3, [pc, #556]	; (8008d64 <_dtoa_r+0x2d4>)
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	3303      	adds	r3, #3
 8008b3a:	e7f5      	b.n	8008b28 <_dtoa_r+0x98>
 8008b3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f7f7 ff72 	bl	8000a34 <__aeabi_dcmpeq>
 8008b50:	4680      	mov	r8, r0
 8008b52:	b158      	cbz	r0, 8008b6c <_dtoa_r+0xdc>
 8008b54:	2301      	movs	r3, #1
 8008b56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8558 	beq.w	8009612 <_dtoa_r+0xb82>
 8008b62:	4882      	ldr	r0, [pc, #520]	; (8008d6c <_dtoa_r+0x2dc>)
 8008b64:	6018      	str	r0, [r3, #0]
 8008b66:	1e43      	subs	r3, r0, #1
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	e7df      	b.n	8008b2c <_dtoa_r+0x9c>
 8008b6c:	ab16      	add	r3, sp, #88	; 0x58
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	ab17      	add	r3, sp, #92	; 0x5c
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	4628      	mov	r0, r5
 8008b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b7a:	f001 ff39 	bl	800a9f0 <__d2b>
 8008b7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008b82:	4683      	mov	fp, r0
 8008b84:	2c00      	cmp	r4, #0
 8008b86:	d07f      	beq.n	8008c88 <_dtoa_r+0x1f8>
 8008b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008b9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008b9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4b72      	ldr	r3, [pc, #456]	; (8008d70 <_dtoa_r+0x2e0>)
 8008ba6:	f7f7 fb25 	bl	80001f4 <__aeabi_dsub>
 8008baa:	a365      	add	r3, pc, #404	; (adr r3, 8008d40 <_dtoa_r+0x2b0>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fcd8 	bl	8000564 <__aeabi_dmul>
 8008bb4:	a364      	add	r3, pc, #400	; (adr r3, 8008d48 <_dtoa_r+0x2b8>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb1d 	bl	80001f8 <__adddf3>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	f7f7 fc64 	bl	8000490 <__aeabi_i2d>
 8008bc8:	a361      	add	r3, pc, #388	; (adr r3, 8008d50 <_dtoa_r+0x2c0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fcc9 	bl	8000564 <__aeabi_dmul>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 fb0d 	bl	80001f8 <__adddf3>
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	f7f7 ff6f 	bl	8000ac4 <__aeabi_d2iz>
 8008be6:	2200      	movs	r2, #0
 8008be8:	4682      	mov	sl, r0
 8008bea:	2300      	movs	r3, #0
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	f7f7 ff2a 	bl	8000a48 <__aeabi_dcmplt>
 8008bf4:	b148      	cbz	r0, 8008c0a <_dtoa_r+0x17a>
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	f7f7 fc4a 	bl	8000490 <__aeabi_i2d>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	f7f7 ff18 	bl	8000a34 <__aeabi_dcmpeq>
 8008c04:	b908      	cbnz	r0, 8008c0a <_dtoa_r+0x17a>
 8008c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c0a:	f1ba 0f16 	cmp.w	sl, #22
 8008c0e:	d858      	bhi.n	8008cc2 <_dtoa_r+0x232>
 8008c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c14:	4b57      	ldr	r3, [pc, #348]	; (8008d74 <_dtoa_r+0x2e4>)
 8008c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 ff13 	bl	8000a48 <__aeabi_dcmplt>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d04f      	beq.n	8008cc6 <_dtoa_r+0x236>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c30:	1b1c      	subs	r4, r3, r4
 8008c32:	1e63      	subs	r3, r4, #1
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	bf49      	itett	mi
 8008c38:	f1c4 0301 	rsbmi	r3, r4, #1
 8008c3c:	2300      	movpl	r3, #0
 8008c3e:	9306      	strmi	r3, [sp, #24]
 8008c40:	2300      	movmi	r3, #0
 8008c42:	bf54      	ite	pl
 8008c44:	9306      	strpl	r3, [sp, #24]
 8008c46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008c48:	f1ba 0f00 	cmp.w	sl, #0
 8008c4c:	db3d      	blt.n	8008cca <_dtoa_r+0x23a>
 8008c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008c54:	4453      	add	r3, sl
 8008c56:	9309      	str	r3, [sp, #36]	; 0x24
 8008c58:	2300      	movs	r3, #0
 8008c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c5e:	2b09      	cmp	r3, #9
 8008c60:	f200 808c 	bhi.w	8008d7c <_dtoa_r+0x2ec>
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	bfc4      	itt	gt
 8008c68:	3b04      	subgt	r3, #4
 8008c6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008c6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c6e:	bfc8      	it	gt
 8008c70:	2400      	movgt	r4, #0
 8008c72:	f1a3 0302 	sub.w	r3, r3, #2
 8008c76:	bfd8      	it	le
 8008c78:	2401      	movle	r4, #1
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	f200 808a 	bhi.w	8008d94 <_dtoa_r+0x304>
 8008c80:	e8df f003 	tbb	[pc, r3]
 8008c84:	5b4d4f2d 	.word	0x5b4d4f2d
 8008c88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008c8c:	441c      	add	r4, r3
 8008c8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	bfc3      	ittte	gt
 8008c96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008c9e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ca2:	f1c3 0320 	rsble	r3, r3, #32
 8008ca6:	bfc6      	itte	gt
 8008ca8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cac:	4318      	orrgt	r0, r3
 8008cae:	fa06 f003 	lslle.w	r0, r6, r3
 8008cb2:	f7f7 fbdd 	bl	8000470 <__aeabi_ui2d>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008cbc:	3c01      	subs	r4, #1
 8008cbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cc0:	e76f      	b.n	8008ba2 <_dtoa_r+0x112>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7b2      	b.n	8008c2c <_dtoa_r+0x19c>
 8008cc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008cc8:	e7b1      	b.n	8008c2e <_dtoa_r+0x19e>
 8008cca:	9b06      	ldr	r3, [sp, #24]
 8008ccc:	eba3 030a 	sub.w	r3, r3, sl
 8008cd0:	9306      	str	r3, [sp, #24]
 8008cd2:	f1ca 0300 	rsb	r3, sl, #0
 8008cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd8:	2300      	movs	r3, #0
 8008cda:	930e      	str	r3, [sp, #56]	; 0x38
 8008cdc:	e7be      	b.n	8008c5c <_dtoa_r+0x1cc>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dc58      	bgt.n	8008d9a <_dtoa_r+0x30a>
 8008ce8:	f04f 0901 	mov.w	r9, #1
 8008cec:	464b      	mov	r3, r9
 8008cee:	f8cd 9020 	str.w	r9, [sp, #32]
 8008cf2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008cfa:	6042      	str	r2, [r0, #4]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	f102 0614 	add.w	r6, r2, #20
 8008d02:	429e      	cmp	r6, r3
 8008d04:	6841      	ldr	r1, [r0, #4]
 8008d06:	d94e      	bls.n	8008da6 <_dtoa_r+0x316>
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f001 fa87 	bl	800a21c <_Balloc>
 8008d0e:	9003      	str	r0, [sp, #12]
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d14c      	bne.n	8008dae <_dtoa_r+0x31e>
 8008d14:	4602      	mov	r2, r0
 8008d16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d1a:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <_dtoa_r+0x2e8>)
 8008d1c:	e6cc      	b.n	8008ab8 <_dtoa_r+0x28>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e7de      	b.n	8008ce0 <_dtoa_r+0x250>
 8008d22:	2300      	movs	r3, #0
 8008d24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d28:	eb0a 0903 	add.w	r9, sl, r3
 8008d2c:	f109 0301 	add.w	r3, r9, #1
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	9308      	str	r3, [sp, #32]
 8008d34:	bfb8      	it	lt
 8008d36:	2301      	movlt	r3, #1
 8008d38:	e7dd      	b.n	8008cf6 <_dtoa_r+0x266>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e7f2      	b.n	8008d24 <_dtoa_r+0x294>
 8008d3e:	bf00      	nop
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800b814 	.word	0x0800b814
 8008d5c:	0800b97e 	.word	0x0800b97e
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800b97a 	.word	0x0800b97a
 8008d68:	0800b971 	.word	0x0800b971
 8008d6c:	0800b7f1 	.word	0x0800b7f1
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800bb50 	.word	0x0800bb50
 8008d78:	0800b9d9 	.word	0x0800b9d9
 8008d7c:	2401      	movs	r4, #1
 8008d7e:	2300      	movs	r3, #0
 8008d80:	940b      	str	r4, [sp, #44]	; 0x2c
 8008d82:	9322      	str	r3, [sp, #136]	; 0x88
 8008d84:	f04f 39ff 	mov.w	r9, #4294967295
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2312      	movs	r3, #18
 8008d8c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008d90:	9223      	str	r2, [sp, #140]	; 0x8c
 8008d92:	e7b0      	b.n	8008cf6 <_dtoa_r+0x266>
 8008d94:	2301      	movs	r3, #1
 8008d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d98:	e7f4      	b.n	8008d84 <_dtoa_r+0x2f4>
 8008d9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008d9e:	464b      	mov	r3, r9
 8008da0:	f8cd 9020 	str.w	r9, [sp, #32]
 8008da4:	e7a7      	b.n	8008cf6 <_dtoa_r+0x266>
 8008da6:	3101      	adds	r1, #1
 8008da8:	6041      	str	r1, [r0, #4]
 8008daa:	0052      	lsls	r2, r2, #1
 8008dac:	e7a7      	b.n	8008cfe <_dtoa_r+0x26e>
 8008dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db0:	9a03      	ldr	r2, [sp, #12]
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	2b0e      	cmp	r3, #14
 8008db8:	f200 80a8 	bhi.w	8008f0c <_dtoa_r+0x47c>
 8008dbc:	2c00      	cmp	r4, #0
 8008dbe:	f000 80a5 	beq.w	8008f0c <_dtoa_r+0x47c>
 8008dc2:	f1ba 0f00 	cmp.w	sl, #0
 8008dc6:	dd34      	ble.n	8008e32 <_dtoa_r+0x3a2>
 8008dc8:	4a9a      	ldr	r2, [pc, #616]	; (8009034 <_dtoa_r+0x5a4>)
 8008dca:	f00a 030f 	and.w	r3, sl, #15
 8008dce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dd2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008dde:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008de2:	d016      	beq.n	8008e12 <_dtoa_r+0x382>
 8008de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de8:	4b93      	ldr	r3, [pc, #588]	; (8009038 <_dtoa_r+0x5a8>)
 8008dea:	2703      	movs	r7, #3
 8008dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008df0:	f7f7 fce2 	bl	80007b8 <__aeabi_ddiv>
 8008df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008df8:	f004 040f 	and.w	r4, r4, #15
 8008dfc:	4e8e      	ldr	r6, [pc, #568]	; (8009038 <_dtoa_r+0x5a8>)
 8008dfe:	b954      	cbnz	r4, 8008e16 <_dtoa_r+0x386>
 8008e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e08:	f7f7 fcd6 	bl	80007b8 <__aeabi_ddiv>
 8008e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e10:	e029      	b.n	8008e66 <_dtoa_r+0x3d6>
 8008e12:	2702      	movs	r7, #2
 8008e14:	e7f2      	b.n	8008dfc <_dtoa_r+0x36c>
 8008e16:	07e1      	lsls	r1, r4, #31
 8008e18:	d508      	bpl.n	8008e2c <_dtoa_r+0x39c>
 8008e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e22:	f7f7 fb9f 	bl	8000564 <__aeabi_dmul>
 8008e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e2a:	3701      	adds	r7, #1
 8008e2c:	1064      	asrs	r4, r4, #1
 8008e2e:	3608      	adds	r6, #8
 8008e30:	e7e5      	b.n	8008dfe <_dtoa_r+0x36e>
 8008e32:	f000 80a5 	beq.w	8008f80 <_dtoa_r+0x4f0>
 8008e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e3a:	f1ca 0400 	rsb	r4, sl, #0
 8008e3e:	4b7d      	ldr	r3, [pc, #500]	; (8009034 <_dtoa_r+0x5a4>)
 8008e40:	f004 020f 	and.w	r2, r4, #15
 8008e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fb8a 	bl	8000564 <__aeabi_dmul>
 8008e50:	2702      	movs	r7, #2
 8008e52:	2300      	movs	r3, #0
 8008e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e58:	4e77      	ldr	r6, [pc, #476]	; (8009038 <_dtoa_r+0x5a8>)
 8008e5a:	1124      	asrs	r4, r4, #4
 8008e5c:	2c00      	cmp	r4, #0
 8008e5e:	f040 8084 	bne.w	8008f6a <_dtoa_r+0x4da>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1d2      	bne.n	8008e0c <_dtoa_r+0x37c>
 8008e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 808b 	beq.w	8008f84 <_dtoa_r+0x4f4>
 8008e6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008e72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4b6f      	ldr	r3, [pc, #444]	; (800903c <_dtoa_r+0x5ac>)
 8008e7e:	f7f7 fde3 	bl	8000a48 <__aeabi_dcmplt>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d07e      	beq.n	8008f84 <_dtoa_r+0x4f4>
 8008e86:	9b08      	ldr	r3, [sp, #32]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d07b      	beq.n	8008f84 <_dtoa_r+0x4f4>
 8008e8c:	f1b9 0f00 	cmp.w	r9, #0
 8008e90:	dd38      	ble.n	8008f04 <_dtoa_r+0x474>
 8008e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e96:	2200      	movs	r2, #0
 8008e98:	4b69      	ldr	r3, [pc, #420]	; (8009040 <_dtoa_r+0x5b0>)
 8008e9a:	f7f7 fb63 	bl	8000564 <__aeabi_dmul>
 8008e9e:	464c      	mov	r4, r9
 8008ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008ea8:	3701      	adds	r7, #1
 8008eaa:	4638      	mov	r0, r7
 8008eac:	f7f7 faf0 	bl	8000490 <__aeabi_i2d>
 8008eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb4:	f7f7 fb56 	bl	8000564 <__aeabi_dmul>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4b62      	ldr	r3, [pc, #392]	; (8009044 <_dtoa_r+0x5b4>)
 8008ebc:	f7f7 f99c 	bl	80001f8 <__adddf3>
 8008ec0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008ec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ec8:	9611      	str	r6, [sp, #68]	; 0x44
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d15d      	bne.n	8008f8a <_dtoa_r+0x4fa>
 8008ece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4b5c      	ldr	r3, [pc, #368]	; (8009048 <_dtoa_r+0x5b8>)
 8008ed6:	f7f7 f98d 	bl	80001f4 <__aeabi_dsub>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ee2:	4633      	mov	r3, r6
 8008ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ee6:	f7f7 fdcd 	bl	8000a84 <__aeabi_dcmpgt>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 829c 	bne.w	8009428 <_dtoa_r+0x998>
 8008ef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ef6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008efa:	f7f7 fda5 	bl	8000a48 <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f040 8290 	bne.w	8009424 <_dtoa_r+0x994>
 8008f04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008f08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f2c0 8152 	blt.w	80091b8 <_dtoa_r+0x728>
 8008f14:	f1ba 0f0e 	cmp.w	sl, #14
 8008f18:	f300 814e 	bgt.w	80091b8 <_dtoa_r+0x728>
 8008f1c:	4b45      	ldr	r3, [pc, #276]	; (8009034 <_dtoa_r+0x5a4>)
 8008f1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f280 80db 	bge.w	80090e8 <_dtoa_r+0x658>
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f300 80d7 	bgt.w	80090e8 <_dtoa_r+0x658>
 8008f3a:	f040 8272 	bne.w	8009422 <_dtoa_r+0x992>
 8008f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f42:	2200      	movs	r2, #0
 8008f44:	4b40      	ldr	r3, [pc, #256]	; (8009048 <_dtoa_r+0x5b8>)
 8008f46:	f7f7 fb0d 	bl	8000564 <__aeabi_dmul>
 8008f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4e:	f7f7 fd8f 	bl	8000a70 <__aeabi_dcmpge>
 8008f52:	9c08      	ldr	r4, [sp, #32]
 8008f54:	4626      	mov	r6, r4
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f040 8248 	bne.w	80093ec <_dtoa_r+0x95c>
 8008f5c:	2331      	movs	r3, #49	; 0x31
 8008f5e:	9f03      	ldr	r7, [sp, #12]
 8008f60:	f10a 0a01 	add.w	sl, sl, #1
 8008f64:	f807 3b01 	strb.w	r3, [r7], #1
 8008f68:	e244      	b.n	80093f4 <_dtoa_r+0x964>
 8008f6a:	07e2      	lsls	r2, r4, #31
 8008f6c:	d505      	bpl.n	8008f7a <_dtoa_r+0x4ea>
 8008f6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f72:	f7f7 faf7 	bl	8000564 <__aeabi_dmul>
 8008f76:	2301      	movs	r3, #1
 8008f78:	3701      	adds	r7, #1
 8008f7a:	1064      	asrs	r4, r4, #1
 8008f7c:	3608      	adds	r6, #8
 8008f7e:	e76d      	b.n	8008e5c <_dtoa_r+0x3cc>
 8008f80:	2702      	movs	r7, #2
 8008f82:	e770      	b.n	8008e66 <_dtoa_r+0x3d6>
 8008f84:	46d0      	mov	r8, sl
 8008f86:	9c08      	ldr	r4, [sp, #32]
 8008f88:	e78f      	b.n	8008eaa <_dtoa_r+0x41a>
 8008f8a:	9903      	ldr	r1, [sp, #12]
 8008f8c:	4b29      	ldr	r3, [pc, #164]	; (8009034 <_dtoa_r+0x5a4>)
 8008f8e:	4421      	add	r1, r4
 8008f90:	9112      	str	r1, [sp, #72]	; 0x48
 8008f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	d055      	beq.n	8009050 <_dtoa_r+0x5c0>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4929      	ldr	r1, [pc, #164]	; (800904c <_dtoa_r+0x5bc>)
 8008fa8:	f7f7 fc06 	bl	80007b8 <__aeabi_ddiv>
 8008fac:	463b      	mov	r3, r7
 8008fae:	4632      	mov	r2, r6
 8008fb0:	f7f7 f920 	bl	80001f4 <__aeabi_dsub>
 8008fb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fb8:	9f03      	ldr	r7, [sp, #12]
 8008fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fbe:	f7f7 fd81 	bl	8000ac4 <__aeabi_d2iz>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	f7f7 fa64 	bl	8000490 <__aeabi_i2d>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd0:	f7f7 f910 	bl	80001f4 <__aeabi_dsub>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	3430      	adds	r4, #48	; 0x30
 8008fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fe2:	f807 4b01 	strb.w	r4, [r7], #1
 8008fe6:	f7f7 fd2f 	bl	8000a48 <__aeabi_dcmplt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d174      	bne.n	80090d8 <_dtoa_r+0x648>
 8008fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	4911      	ldr	r1, [pc, #68]	; (800903c <_dtoa_r+0x5ac>)
 8008ff6:	f7f7 f8fd 	bl	80001f4 <__aeabi_dsub>
 8008ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ffe:	f7f7 fd23 	bl	8000a48 <__aeabi_dcmplt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f040 80b7 	bne.w	8009176 <_dtoa_r+0x6e6>
 8009008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800900a:	429f      	cmp	r7, r3
 800900c:	f43f af7a 	beq.w	8008f04 <_dtoa_r+0x474>
 8009010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009014:	2200      	movs	r2, #0
 8009016:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <_dtoa_r+0x5b0>)
 8009018:	f7f7 faa4 	bl	8000564 <__aeabi_dmul>
 800901c:	2200      	movs	r2, #0
 800901e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009026:	4b06      	ldr	r3, [pc, #24]	; (8009040 <_dtoa_r+0x5b0>)
 8009028:	f7f7 fa9c 	bl	8000564 <__aeabi_dmul>
 800902c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009030:	e7c3      	b.n	8008fba <_dtoa_r+0x52a>
 8009032:	bf00      	nop
 8009034:	0800bb50 	.word	0x0800bb50
 8009038:	0800bb28 	.word	0x0800bb28
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	40240000 	.word	0x40240000
 8009044:	401c0000 	.word	0x401c0000
 8009048:	40140000 	.word	0x40140000
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 fa86 	bl	8000564 <__aeabi_dmul>
 8009058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800905a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800905e:	9c03      	ldr	r4, [sp, #12]
 8009060:	9314      	str	r3, [sp, #80]	; 0x50
 8009062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009066:	f7f7 fd2d 	bl	8000ac4 <__aeabi_d2iz>
 800906a:	9015      	str	r0, [sp, #84]	; 0x54
 800906c:	f7f7 fa10 	bl	8000490 <__aeabi_i2d>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009078:	f7f7 f8bc 	bl	80001f4 <__aeabi_dsub>
 800907c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800907e:	4606      	mov	r6, r0
 8009080:	3330      	adds	r3, #48	; 0x30
 8009082:	f804 3b01 	strb.w	r3, [r4], #1
 8009086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009088:	460f      	mov	r7, r1
 800908a:	429c      	cmp	r4, r3
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	d124      	bne.n	80090dc <_dtoa_r+0x64c>
 8009092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009096:	4bb0      	ldr	r3, [pc, #704]	; (8009358 <_dtoa_r+0x8c8>)
 8009098:	f7f7 f8ae 	bl	80001f8 <__adddf3>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fcee 	bl	8000a84 <__aeabi_dcmpgt>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d163      	bne.n	8009174 <_dtoa_r+0x6e4>
 80090ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090b0:	2000      	movs	r0, #0
 80090b2:	49a9      	ldr	r1, [pc, #676]	; (8009358 <_dtoa_r+0x8c8>)
 80090b4:	f7f7 f89e 	bl	80001f4 <__aeabi_dsub>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fcc2 	bl	8000a48 <__aeabi_dcmplt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f43f af1d 	beq.w	8008f04 <_dtoa_r+0x474>
 80090ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80090cc:	1e7b      	subs	r3, r7, #1
 80090ce:	9314      	str	r3, [sp, #80]	; 0x50
 80090d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	d0f8      	beq.n	80090ca <_dtoa_r+0x63a>
 80090d8:	46c2      	mov	sl, r8
 80090da:	e03b      	b.n	8009154 <_dtoa_r+0x6c4>
 80090dc:	4b9f      	ldr	r3, [pc, #636]	; (800935c <_dtoa_r+0x8cc>)
 80090de:	f7f7 fa41 	bl	8000564 <__aeabi_dmul>
 80090e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e6:	e7bc      	b.n	8009062 <_dtoa_r+0x5d2>
 80090e8:	9f03      	ldr	r7, [sp, #12]
 80090ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80090ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 fb5f 	bl	80007b8 <__aeabi_ddiv>
 80090fa:	f7f7 fce3 	bl	8000ac4 <__aeabi_d2iz>
 80090fe:	4604      	mov	r4, r0
 8009100:	f7f7 f9c6 	bl	8000490 <__aeabi_i2d>
 8009104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009108:	f7f7 fa2c 	bl	8000564 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 f86e 	bl	80001f4 <__aeabi_dsub>
 8009118:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800911c:	f807 6b01 	strb.w	r6, [r7], #1
 8009120:	9e03      	ldr	r6, [sp, #12]
 8009122:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009126:	1bbe      	subs	r6, r7, r6
 8009128:	45b4      	cmp	ip, r6
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	d136      	bne.n	800919e <_dtoa_r+0x70e>
 8009130:	f7f7 f862 	bl	80001f8 <__adddf3>
 8009134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	f7f7 fca2 	bl	8000a84 <__aeabi_dcmpgt>
 8009140:	bb58      	cbnz	r0, 800919a <_dtoa_r+0x70a>
 8009142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 fc73 	bl	8000a34 <__aeabi_dcmpeq>
 800914e:	b108      	cbz	r0, 8009154 <_dtoa_r+0x6c4>
 8009150:	07e1      	lsls	r1, r4, #31
 8009152:	d422      	bmi.n	800919a <_dtoa_r+0x70a>
 8009154:	4628      	mov	r0, r5
 8009156:	4659      	mov	r1, fp
 8009158:	f001 f8a0 	bl	800a29c <_Bfree>
 800915c:	2300      	movs	r3, #0
 800915e:	703b      	strb	r3, [r7, #0]
 8009160:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009162:	f10a 0001 	add.w	r0, sl, #1
 8009166:	6018      	str	r0, [r3, #0]
 8009168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800916a:	2b00      	cmp	r3, #0
 800916c:	f43f acde 	beq.w	8008b2c <_dtoa_r+0x9c>
 8009170:	601f      	str	r7, [r3, #0]
 8009172:	e4db      	b.n	8008b2c <_dtoa_r+0x9c>
 8009174:	4627      	mov	r7, r4
 8009176:	463b      	mov	r3, r7
 8009178:	461f      	mov	r7, r3
 800917a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917e:	2a39      	cmp	r2, #57	; 0x39
 8009180:	d107      	bne.n	8009192 <_dtoa_r+0x702>
 8009182:	9a03      	ldr	r2, [sp, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d1f7      	bne.n	8009178 <_dtoa_r+0x6e8>
 8009188:	2230      	movs	r2, #48	; 0x30
 800918a:	9903      	ldr	r1, [sp, #12]
 800918c:	f108 0801 	add.w	r8, r8, #1
 8009190:	700a      	strb	r2, [r1, #0]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	3201      	adds	r2, #1
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e79e      	b.n	80090d8 <_dtoa_r+0x648>
 800919a:	46d0      	mov	r8, sl
 800919c:	e7eb      	b.n	8009176 <_dtoa_r+0x6e6>
 800919e:	2200      	movs	r2, #0
 80091a0:	4b6e      	ldr	r3, [pc, #440]	; (800935c <_dtoa_r+0x8cc>)
 80091a2:	f7f7 f9df 	bl	8000564 <__aeabi_dmul>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	4680      	mov	r8, r0
 80091ac:	4689      	mov	r9, r1
 80091ae:	f7f7 fc41 	bl	8000a34 <__aeabi_dcmpeq>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d09b      	beq.n	80090ee <_dtoa_r+0x65e>
 80091b6:	e7cd      	b.n	8009154 <_dtoa_r+0x6c4>
 80091b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	f000 80d0 	beq.w	8009360 <_dtoa_r+0x8d0>
 80091c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091c2:	2a01      	cmp	r2, #1
 80091c4:	f300 80ae 	bgt.w	8009324 <_dtoa_r+0x894>
 80091c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	f000 80a6 	beq.w	800931c <_dtoa_r+0x88c>
 80091d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091d6:	9f06      	ldr	r7, [sp, #24]
 80091d8:	9a06      	ldr	r2, [sp, #24]
 80091da:	2101      	movs	r1, #1
 80091dc:	441a      	add	r2, r3
 80091de:	9206      	str	r2, [sp, #24]
 80091e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e2:	4628      	mov	r0, r5
 80091e4:	441a      	add	r2, r3
 80091e6:	9209      	str	r2, [sp, #36]	; 0x24
 80091e8:	f001 f958 	bl	800a49c <__i2b>
 80091ec:	4606      	mov	r6, r0
 80091ee:	2f00      	cmp	r7, #0
 80091f0:	dd0c      	ble.n	800920c <_dtoa_r+0x77c>
 80091f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd09      	ble.n	800920c <_dtoa_r+0x77c>
 80091f8:	42bb      	cmp	r3, r7
 80091fa:	bfa8      	it	ge
 80091fc:	463b      	movge	r3, r7
 80091fe:	9a06      	ldr	r2, [sp, #24]
 8009200:	1aff      	subs	r7, r7, r3
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	9206      	str	r2, [sp, #24]
 8009206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	9309      	str	r3, [sp, #36]	; 0x24
 800920c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920e:	b1f3      	cbz	r3, 800924e <_dtoa_r+0x7be>
 8009210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80a8 	beq.w	8009368 <_dtoa_r+0x8d8>
 8009218:	2c00      	cmp	r4, #0
 800921a:	dd10      	ble.n	800923e <_dtoa_r+0x7ae>
 800921c:	4631      	mov	r1, r6
 800921e:	4622      	mov	r2, r4
 8009220:	4628      	mov	r0, r5
 8009222:	f001 f9f9 	bl	800a618 <__pow5mult>
 8009226:	465a      	mov	r2, fp
 8009228:	4601      	mov	r1, r0
 800922a:	4606      	mov	r6, r0
 800922c:	4628      	mov	r0, r5
 800922e:	f001 f94b 	bl	800a4c8 <__multiply>
 8009232:	4680      	mov	r8, r0
 8009234:	4659      	mov	r1, fp
 8009236:	4628      	mov	r0, r5
 8009238:	f001 f830 	bl	800a29c <_Bfree>
 800923c:	46c3      	mov	fp, r8
 800923e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009240:	1b1a      	subs	r2, r3, r4
 8009242:	d004      	beq.n	800924e <_dtoa_r+0x7be>
 8009244:	4659      	mov	r1, fp
 8009246:	4628      	mov	r0, r5
 8009248:	f001 f9e6 	bl	800a618 <__pow5mult>
 800924c:	4683      	mov	fp, r0
 800924e:	2101      	movs	r1, #1
 8009250:	4628      	mov	r0, r5
 8009252:	f001 f923 	bl	800a49c <__i2b>
 8009256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009258:	4604      	mov	r4, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	f340 8086 	ble.w	800936c <_dtoa_r+0x8dc>
 8009260:	461a      	mov	r2, r3
 8009262:	4601      	mov	r1, r0
 8009264:	4628      	mov	r0, r5
 8009266:	f001 f9d7 	bl	800a618 <__pow5mult>
 800926a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800926c:	4604      	mov	r4, r0
 800926e:	2b01      	cmp	r3, #1
 8009270:	dd7f      	ble.n	8009372 <_dtoa_r+0x8e2>
 8009272:	f04f 0800 	mov.w	r8, #0
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800927c:	6918      	ldr	r0, [r3, #16]
 800927e:	f001 f8bf 	bl	800a400 <__hi0bits>
 8009282:	f1c0 0020 	rsb	r0, r0, #32
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	4418      	add	r0, r3
 800928a:	f010 001f 	ands.w	r0, r0, #31
 800928e:	f000 8092 	beq.w	80093b6 <_dtoa_r+0x926>
 8009292:	f1c0 0320 	rsb	r3, r0, #32
 8009296:	2b04      	cmp	r3, #4
 8009298:	f340 808a 	ble.w	80093b0 <_dtoa_r+0x920>
 800929c:	f1c0 001c 	rsb	r0, r0, #28
 80092a0:	9b06      	ldr	r3, [sp, #24]
 80092a2:	4407      	add	r7, r0
 80092a4:	4403      	add	r3, r0
 80092a6:	9306      	str	r3, [sp, #24]
 80092a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092aa:	4403      	add	r3, r0
 80092ac:	9309      	str	r3, [sp, #36]	; 0x24
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd05      	ble.n	80092c0 <_dtoa_r+0x830>
 80092b4:	4659      	mov	r1, fp
 80092b6:	461a      	mov	r2, r3
 80092b8:	4628      	mov	r0, r5
 80092ba:	f001 fa07 	bl	800a6cc <__lshift>
 80092be:	4683      	mov	fp, r0
 80092c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dd05      	ble.n	80092d2 <_dtoa_r+0x842>
 80092c6:	4621      	mov	r1, r4
 80092c8:	461a      	mov	r2, r3
 80092ca:	4628      	mov	r0, r5
 80092cc:	f001 f9fe 	bl	800a6cc <__lshift>
 80092d0:	4604      	mov	r4, r0
 80092d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d070      	beq.n	80093ba <_dtoa_r+0x92a>
 80092d8:	4621      	mov	r1, r4
 80092da:	4658      	mov	r0, fp
 80092dc:	f001 fa66 	bl	800a7ac <__mcmp>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	da6a      	bge.n	80093ba <_dtoa_r+0x92a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	4659      	mov	r1, fp
 80092e8:	220a      	movs	r2, #10
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 fff8 	bl	800a2e0 <__multadd>
 80092f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f2:	4683      	mov	fp, r0
 80092f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8194 	beq.w	8009626 <_dtoa_r+0xb96>
 80092fe:	4631      	mov	r1, r6
 8009300:	2300      	movs	r3, #0
 8009302:	220a      	movs	r2, #10
 8009304:	4628      	mov	r0, r5
 8009306:	f000 ffeb 	bl	800a2e0 <__multadd>
 800930a:	f1b9 0f00 	cmp.w	r9, #0
 800930e:	4606      	mov	r6, r0
 8009310:	f300 8093 	bgt.w	800943a <_dtoa_r+0x9aa>
 8009314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009316:	2b02      	cmp	r3, #2
 8009318:	dc57      	bgt.n	80093ca <_dtoa_r+0x93a>
 800931a:	e08e      	b.n	800943a <_dtoa_r+0x9aa>
 800931c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800931e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009322:	e757      	b.n	80091d4 <_dtoa_r+0x744>
 8009324:	9b08      	ldr	r3, [sp, #32]
 8009326:	1e5c      	subs	r4, r3, #1
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	42a3      	cmp	r3, r4
 800932c:	bfb7      	itett	lt
 800932e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009330:	1b1c      	subge	r4, r3, r4
 8009332:	1ae2      	sublt	r2, r4, r3
 8009334:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009336:	bfbe      	ittt	lt
 8009338:	940a      	strlt	r4, [sp, #40]	; 0x28
 800933a:	189b      	addlt	r3, r3, r2
 800933c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800933e:	9b08      	ldr	r3, [sp, #32]
 8009340:	bfb8      	it	lt
 8009342:	2400      	movlt	r4, #0
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfbb      	ittet	lt
 8009348:	9b06      	ldrlt	r3, [sp, #24]
 800934a:	9a08      	ldrlt	r2, [sp, #32]
 800934c:	9f06      	ldrge	r7, [sp, #24]
 800934e:	1a9f      	sublt	r7, r3, r2
 8009350:	bfac      	ite	ge
 8009352:	9b08      	ldrge	r3, [sp, #32]
 8009354:	2300      	movlt	r3, #0
 8009356:	e73f      	b.n	80091d8 <_dtoa_r+0x748>
 8009358:	3fe00000 	.word	0x3fe00000
 800935c:	40240000 	.word	0x40240000
 8009360:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009362:	9f06      	ldr	r7, [sp, #24]
 8009364:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009366:	e742      	b.n	80091ee <_dtoa_r+0x75e>
 8009368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936a:	e76b      	b.n	8009244 <_dtoa_r+0x7b4>
 800936c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800936e:	2b01      	cmp	r3, #1
 8009370:	dc19      	bgt.n	80093a6 <_dtoa_r+0x916>
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	b9bb      	cbnz	r3, 80093a6 <_dtoa_r+0x916>
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800937c:	b99b      	cbnz	r3, 80093a6 <_dtoa_r+0x916>
 800937e:	9b05      	ldr	r3, [sp, #20]
 8009380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009384:	0d1b      	lsrs	r3, r3, #20
 8009386:	051b      	lsls	r3, r3, #20
 8009388:	b183      	cbz	r3, 80093ac <_dtoa_r+0x91c>
 800938a:	f04f 0801 	mov.w	r8, #1
 800938e:	9b06      	ldr	r3, [sp, #24]
 8009390:	3301      	adds	r3, #1
 8009392:	9306      	str	r3, [sp, #24]
 8009394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009396:	3301      	adds	r3, #1
 8009398:	9309      	str	r3, [sp, #36]	; 0x24
 800939a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f af6a 	bne.w	8009276 <_dtoa_r+0x7e6>
 80093a2:	2001      	movs	r0, #1
 80093a4:	e76f      	b.n	8009286 <_dtoa_r+0x7f6>
 80093a6:	f04f 0800 	mov.w	r8, #0
 80093aa:	e7f6      	b.n	800939a <_dtoa_r+0x90a>
 80093ac:	4698      	mov	r8, r3
 80093ae:	e7f4      	b.n	800939a <_dtoa_r+0x90a>
 80093b0:	f43f af7d 	beq.w	80092ae <_dtoa_r+0x81e>
 80093b4:	4618      	mov	r0, r3
 80093b6:	301c      	adds	r0, #28
 80093b8:	e772      	b.n	80092a0 <_dtoa_r+0x810>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dc36      	bgt.n	800942e <_dtoa_r+0x99e>
 80093c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	dd33      	ble.n	800942e <_dtoa_r+0x99e>
 80093c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093ca:	f1b9 0f00 	cmp.w	r9, #0
 80093ce:	d10d      	bne.n	80093ec <_dtoa_r+0x95c>
 80093d0:	4621      	mov	r1, r4
 80093d2:	464b      	mov	r3, r9
 80093d4:	2205      	movs	r2, #5
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 ff82 	bl	800a2e0 <__multadd>
 80093dc:	4601      	mov	r1, r0
 80093de:	4604      	mov	r4, r0
 80093e0:	4658      	mov	r0, fp
 80093e2:	f001 f9e3 	bl	800a7ac <__mcmp>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f73f adb8 	bgt.w	8008f5c <_dtoa_r+0x4cc>
 80093ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093ee:	9f03      	ldr	r7, [sp, #12]
 80093f0:	ea6f 0a03 	mvn.w	sl, r3
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	4621      	mov	r1, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 ff4e 	bl	800a29c <_Bfree>
 8009400:	2e00      	cmp	r6, #0
 8009402:	f43f aea7 	beq.w	8009154 <_dtoa_r+0x6c4>
 8009406:	f1b8 0f00 	cmp.w	r8, #0
 800940a:	d005      	beq.n	8009418 <_dtoa_r+0x988>
 800940c:	45b0      	cmp	r8, r6
 800940e:	d003      	beq.n	8009418 <_dtoa_r+0x988>
 8009410:	4641      	mov	r1, r8
 8009412:	4628      	mov	r0, r5
 8009414:	f000 ff42 	bl	800a29c <_Bfree>
 8009418:	4631      	mov	r1, r6
 800941a:	4628      	mov	r0, r5
 800941c:	f000 ff3e 	bl	800a29c <_Bfree>
 8009420:	e698      	b.n	8009154 <_dtoa_r+0x6c4>
 8009422:	2400      	movs	r4, #0
 8009424:	4626      	mov	r6, r4
 8009426:	e7e1      	b.n	80093ec <_dtoa_r+0x95c>
 8009428:	46c2      	mov	sl, r8
 800942a:	4626      	mov	r6, r4
 800942c:	e596      	b.n	8008f5c <_dtoa_r+0x4cc>
 800942e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80fd 	beq.w	8009634 <_dtoa_r+0xba4>
 800943a:	2f00      	cmp	r7, #0
 800943c:	dd05      	ble.n	800944a <_dtoa_r+0x9ba>
 800943e:	4631      	mov	r1, r6
 8009440:	463a      	mov	r2, r7
 8009442:	4628      	mov	r0, r5
 8009444:	f001 f942 	bl	800a6cc <__lshift>
 8009448:	4606      	mov	r6, r0
 800944a:	f1b8 0f00 	cmp.w	r8, #0
 800944e:	d05c      	beq.n	800950a <_dtoa_r+0xa7a>
 8009450:	4628      	mov	r0, r5
 8009452:	6871      	ldr	r1, [r6, #4]
 8009454:	f000 fee2 	bl	800a21c <_Balloc>
 8009458:	4607      	mov	r7, r0
 800945a:	b928      	cbnz	r0, 8009468 <_dtoa_r+0x9d8>
 800945c:	4602      	mov	r2, r0
 800945e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009462:	4b7f      	ldr	r3, [pc, #508]	; (8009660 <_dtoa_r+0xbd0>)
 8009464:	f7ff bb28 	b.w	8008ab8 <_dtoa_r+0x28>
 8009468:	6932      	ldr	r2, [r6, #16]
 800946a:	f106 010c 	add.w	r1, r6, #12
 800946e:	3202      	adds	r2, #2
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	300c      	adds	r0, #12
 8009474:	f7fd fb74 	bl	8006b60 <memcpy>
 8009478:	2201      	movs	r2, #1
 800947a:	4639      	mov	r1, r7
 800947c:	4628      	mov	r0, r5
 800947e:	f001 f925 	bl	800a6cc <__lshift>
 8009482:	46b0      	mov	r8, r6
 8009484:	4606      	mov	r6, r0
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	9308      	str	r3, [sp, #32]
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	444b      	add	r3, r9
 8009490:	930a      	str	r3, [sp, #40]	; 0x28
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	9309      	str	r3, [sp, #36]	; 0x24
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	4621      	mov	r1, r4
 800949e:	3b01      	subs	r3, #1
 80094a0:	4658      	mov	r0, fp
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	f7ff fa66 	bl	8008974 <quorem>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4641      	mov	r1, r8
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	9006      	str	r0, [sp, #24]
 80094b0:	4658      	mov	r0, fp
 80094b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80094b4:	f001 f97a 	bl	800a7ac <__mcmp>
 80094b8:	4632      	mov	r2, r6
 80094ba:	4681      	mov	r9, r0
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f001 f990 	bl	800a7e4 <__mdiff>
 80094c4:	68c2      	ldr	r2, [r0, #12]
 80094c6:	4607      	mov	r7, r0
 80094c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ca:	bb02      	cbnz	r2, 800950e <_dtoa_r+0xa7e>
 80094cc:	4601      	mov	r1, r0
 80094ce:	4658      	mov	r0, fp
 80094d0:	f001 f96c 	bl	800a7ac <__mcmp>
 80094d4:	4602      	mov	r2, r0
 80094d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d8:	4639      	mov	r1, r7
 80094da:	4628      	mov	r0, r5
 80094dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80094e0:	f000 fedc 	bl	800a29c <_Bfree>
 80094e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e8:	9f08      	ldr	r7, [sp, #32]
 80094ea:	ea43 0102 	orr.w	r1, r3, r2
 80094ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f0:	430b      	orrs	r3, r1
 80094f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094f4:	d10d      	bne.n	8009512 <_dtoa_r+0xa82>
 80094f6:	2b39      	cmp	r3, #57	; 0x39
 80094f8:	d029      	beq.n	800954e <_dtoa_r+0xabe>
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	dd01      	ble.n	8009504 <_dtoa_r+0xa74>
 8009500:	9b06      	ldr	r3, [sp, #24]
 8009502:	3331      	adds	r3, #49	; 0x31
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	7013      	strb	r3, [r2, #0]
 8009508:	e776      	b.n	80093f8 <_dtoa_r+0x968>
 800950a:	4630      	mov	r0, r6
 800950c:	e7b9      	b.n	8009482 <_dtoa_r+0x9f2>
 800950e:	2201      	movs	r2, #1
 8009510:	e7e2      	b.n	80094d8 <_dtoa_r+0xa48>
 8009512:	f1b9 0f00 	cmp.w	r9, #0
 8009516:	db06      	blt.n	8009526 <_dtoa_r+0xa96>
 8009518:	9922      	ldr	r1, [sp, #136]	; 0x88
 800951a:	ea41 0909 	orr.w	r9, r1, r9
 800951e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009520:	ea59 0101 	orrs.w	r1, r9, r1
 8009524:	d120      	bne.n	8009568 <_dtoa_r+0xad8>
 8009526:	2a00      	cmp	r2, #0
 8009528:	ddec      	ble.n	8009504 <_dtoa_r+0xa74>
 800952a:	4659      	mov	r1, fp
 800952c:	2201      	movs	r2, #1
 800952e:	4628      	mov	r0, r5
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	f001 f8cb 	bl	800a6cc <__lshift>
 8009536:	4621      	mov	r1, r4
 8009538:	4683      	mov	fp, r0
 800953a:	f001 f937 	bl	800a7ac <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	9b08      	ldr	r3, [sp, #32]
 8009542:	dc02      	bgt.n	800954a <_dtoa_r+0xaba>
 8009544:	d1de      	bne.n	8009504 <_dtoa_r+0xa74>
 8009546:	07da      	lsls	r2, r3, #31
 8009548:	d5dc      	bpl.n	8009504 <_dtoa_r+0xa74>
 800954a:	2b39      	cmp	r3, #57	; 0x39
 800954c:	d1d8      	bne.n	8009500 <_dtoa_r+0xa70>
 800954e:	2339      	movs	r3, #57	; 0x39
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	7013      	strb	r3, [r2, #0]
 8009554:	463b      	mov	r3, r7
 8009556:	461f      	mov	r7, r3
 8009558:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800955c:	3b01      	subs	r3, #1
 800955e:	2a39      	cmp	r2, #57	; 0x39
 8009560:	d050      	beq.n	8009604 <_dtoa_r+0xb74>
 8009562:	3201      	adds	r2, #1
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e747      	b.n	80093f8 <_dtoa_r+0x968>
 8009568:	2a00      	cmp	r2, #0
 800956a:	dd03      	ble.n	8009574 <_dtoa_r+0xae4>
 800956c:	2b39      	cmp	r3, #57	; 0x39
 800956e:	d0ee      	beq.n	800954e <_dtoa_r+0xabe>
 8009570:	3301      	adds	r3, #1
 8009572:	e7c7      	b.n	8009504 <_dtoa_r+0xa74>
 8009574:	9a08      	ldr	r2, [sp, #32]
 8009576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009578:	f802 3c01 	strb.w	r3, [r2, #-1]
 800957c:	428a      	cmp	r2, r1
 800957e:	d02a      	beq.n	80095d6 <_dtoa_r+0xb46>
 8009580:	4659      	mov	r1, fp
 8009582:	2300      	movs	r3, #0
 8009584:	220a      	movs	r2, #10
 8009586:	4628      	mov	r0, r5
 8009588:	f000 feaa 	bl	800a2e0 <__multadd>
 800958c:	45b0      	cmp	r8, r6
 800958e:	4683      	mov	fp, r0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	f04f 020a 	mov.w	r2, #10
 8009598:	4641      	mov	r1, r8
 800959a:	4628      	mov	r0, r5
 800959c:	d107      	bne.n	80095ae <_dtoa_r+0xb1e>
 800959e:	f000 fe9f 	bl	800a2e0 <__multadd>
 80095a2:	4680      	mov	r8, r0
 80095a4:	4606      	mov	r6, r0
 80095a6:	9b08      	ldr	r3, [sp, #32]
 80095a8:	3301      	adds	r3, #1
 80095aa:	9308      	str	r3, [sp, #32]
 80095ac:	e775      	b.n	800949a <_dtoa_r+0xa0a>
 80095ae:	f000 fe97 	bl	800a2e0 <__multadd>
 80095b2:	4631      	mov	r1, r6
 80095b4:	4680      	mov	r8, r0
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 fe90 	bl	800a2e0 <__multadd>
 80095c0:	4606      	mov	r6, r0
 80095c2:	e7f0      	b.n	80095a6 <_dtoa_r+0xb16>
 80095c4:	f1b9 0f00 	cmp.w	r9, #0
 80095c8:	bfcc      	ite	gt
 80095ca:	464f      	movgt	r7, r9
 80095cc:	2701      	movle	r7, #1
 80095ce:	f04f 0800 	mov.w	r8, #0
 80095d2:	9a03      	ldr	r2, [sp, #12]
 80095d4:	4417      	add	r7, r2
 80095d6:	4659      	mov	r1, fp
 80095d8:	2201      	movs	r2, #1
 80095da:	4628      	mov	r0, r5
 80095dc:	9308      	str	r3, [sp, #32]
 80095de:	f001 f875 	bl	800a6cc <__lshift>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4683      	mov	fp, r0
 80095e6:	f001 f8e1 	bl	800a7ac <__mcmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	dcb2      	bgt.n	8009554 <_dtoa_r+0xac4>
 80095ee:	d102      	bne.n	80095f6 <_dtoa_r+0xb66>
 80095f0:	9b08      	ldr	r3, [sp, #32]
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d4ae      	bmi.n	8009554 <_dtoa_r+0xac4>
 80095f6:	463b      	mov	r3, r7
 80095f8:	461f      	mov	r7, r3
 80095fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095fe:	2a30      	cmp	r2, #48	; 0x30
 8009600:	d0fa      	beq.n	80095f8 <_dtoa_r+0xb68>
 8009602:	e6f9      	b.n	80093f8 <_dtoa_r+0x968>
 8009604:	9a03      	ldr	r2, [sp, #12]
 8009606:	429a      	cmp	r2, r3
 8009608:	d1a5      	bne.n	8009556 <_dtoa_r+0xac6>
 800960a:	2331      	movs	r3, #49	; 0x31
 800960c:	f10a 0a01 	add.w	sl, sl, #1
 8009610:	e779      	b.n	8009506 <_dtoa_r+0xa76>
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <_dtoa_r+0xbd4>)
 8009614:	f7ff baa8 	b.w	8008b68 <_dtoa_r+0xd8>
 8009618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800961a:	2b00      	cmp	r3, #0
 800961c:	f47f aa81 	bne.w	8008b22 <_dtoa_r+0x92>
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <_dtoa_r+0xbd8>)
 8009622:	f7ff baa1 	b.w	8008b68 <_dtoa_r+0xd8>
 8009626:	f1b9 0f00 	cmp.w	r9, #0
 800962a:	dc03      	bgt.n	8009634 <_dtoa_r+0xba4>
 800962c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800962e:	2b02      	cmp	r3, #2
 8009630:	f73f aecb 	bgt.w	80093ca <_dtoa_r+0x93a>
 8009634:	9f03      	ldr	r7, [sp, #12]
 8009636:	4621      	mov	r1, r4
 8009638:	4658      	mov	r0, fp
 800963a:	f7ff f99b 	bl	8008974 <quorem>
 800963e:	9a03      	ldr	r2, [sp, #12]
 8009640:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009644:	f807 3b01 	strb.w	r3, [r7], #1
 8009648:	1aba      	subs	r2, r7, r2
 800964a:	4591      	cmp	r9, r2
 800964c:	ddba      	ble.n	80095c4 <_dtoa_r+0xb34>
 800964e:	4659      	mov	r1, fp
 8009650:	2300      	movs	r3, #0
 8009652:	220a      	movs	r2, #10
 8009654:	4628      	mov	r0, r5
 8009656:	f000 fe43 	bl	800a2e0 <__multadd>
 800965a:	4683      	mov	fp, r0
 800965c:	e7eb      	b.n	8009636 <_dtoa_r+0xba6>
 800965e:	bf00      	nop
 8009660:	0800b9d9 	.word	0x0800b9d9
 8009664:	0800b7f0 	.word	0x0800b7f0
 8009668:	0800b971 	.word	0x0800b971

0800966c <__sflush_r>:
 800966c:	898a      	ldrh	r2, [r1, #12]
 800966e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009670:	4605      	mov	r5, r0
 8009672:	0710      	lsls	r0, r2, #28
 8009674:	460c      	mov	r4, r1
 8009676:	d457      	bmi.n	8009728 <__sflush_r+0xbc>
 8009678:	684b      	ldr	r3, [r1, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc04      	bgt.n	8009688 <__sflush_r+0x1c>
 800967e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc01      	bgt.n	8009688 <__sflush_r+0x1c>
 8009684:	2000      	movs	r0, #0
 8009686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800968a:	2e00      	cmp	r6, #0
 800968c:	d0fa      	beq.n	8009684 <__sflush_r+0x18>
 800968e:	2300      	movs	r3, #0
 8009690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009694:	682f      	ldr	r7, [r5, #0]
 8009696:	602b      	str	r3, [r5, #0]
 8009698:	d032      	beq.n	8009700 <__sflush_r+0x94>
 800969a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	075a      	lsls	r2, r3, #29
 80096a0:	d505      	bpl.n	80096ae <__sflush_r+0x42>
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	1ac0      	subs	r0, r0, r3
 80096a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a8:	b10b      	cbz	r3, 80096ae <__sflush_r+0x42>
 80096aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ac:	1ac0      	subs	r0, r0, r3
 80096ae:	2300      	movs	r3, #0
 80096b0:	4602      	mov	r2, r0
 80096b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b4:	4628      	mov	r0, r5
 80096b6:	6a21      	ldr	r1, [r4, #32]
 80096b8:	47b0      	blx	r6
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	d106      	bne.n	80096ce <__sflush_r+0x62>
 80096c0:	6829      	ldr	r1, [r5, #0]
 80096c2:	291d      	cmp	r1, #29
 80096c4:	d82c      	bhi.n	8009720 <__sflush_r+0xb4>
 80096c6:	4a29      	ldr	r2, [pc, #164]	; (800976c <__sflush_r+0x100>)
 80096c8:	40ca      	lsrs	r2, r1
 80096ca:	07d6      	lsls	r6, r2, #31
 80096cc:	d528      	bpl.n	8009720 <__sflush_r+0xb4>
 80096ce:	2200      	movs	r2, #0
 80096d0:	6062      	str	r2, [r4, #4]
 80096d2:	6922      	ldr	r2, [r4, #16]
 80096d4:	04d9      	lsls	r1, r3, #19
 80096d6:	6022      	str	r2, [r4, #0]
 80096d8:	d504      	bpl.n	80096e4 <__sflush_r+0x78>
 80096da:	1c42      	adds	r2, r0, #1
 80096dc:	d101      	bne.n	80096e2 <__sflush_r+0x76>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b903      	cbnz	r3, 80096e4 <__sflush_r+0x78>
 80096e2:	6560      	str	r0, [r4, #84]	; 0x54
 80096e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e6:	602f      	str	r7, [r5, #0]
 80096e8:	2900      	cmp	r1, #0
 80096ea:	d0cb      	beq.n	8009684 <__sflush_r+0x18>
 80096ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d002      	beq.n	80096fa <__sflush_r+0x8e>
 80096f4:	4628      	mov	r0, r5
 80096f6:	f7fd fa49 	bl	8006b8c <_free_r>
 80096fa:	2000      	movs	r0, #0
 80096fc:	6360      	str	r0, [r4, #52]	; 0x34
 80096fe:	e7c2      	b.n	8009686 <__sflush_r+0x1a>
 8009700:	6a21      	ldr	r1, [r4, #32]
 8009702:	2301      	movs	r3, #1
 8009704:	4628      	mov	r0, r5
 8009706:	47b0      	blx	r6
 8009708:	1c41      	adds	r1, r0, #1
 800970a:	d1c7      	bne.n	800969c <__sflush_r+0x30>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0c4      	beq.n	800969c <__sflush_r+0x30>
 8009712:	2b1d      	cmp	r3, #29
 8009714:	d001      	beq.n	800971a <__sflush_r+0xae>
 8009716:	2b16      	cmp	r3, #22
 8009718:	d101      	bne.n	800971e <__sflush_r+0xb2>
 800971a:	602f      	str	r7, [r5, #0]
 800971c:	e7b2      	b.n	8009684 <__sflush_r+0x18>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	e7ae      	b.n	8009686 <__sflush_r+0x1a>
 8009728:	690f      	ldr	r7, [r1, #16]
 800972a:	2f00      	cmp	r7, #0
 800972c:	d0aa      	beq.n	8009684 <__sflush_r+0x18>
 800972e:	0793      	lsls	r3, r2, #30
 8009730:	bf18      	it	ne
 8009732:	2300      	movne	r3, #0
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	bf08      	it	eq
 8009738:	694b      	ldreq	r3, [r1, #20]
 800973a:	1bf6      	subs	r6, r6, r7
 800973c:	600f      	str	r7, [r1, #0]
 800973e:	608b      	str	r3, [r1, #8]
 8009740:	2e00      	cmp	r6, #0
 8009742:	dd9f      	ble.n	8009684 <__sflush_r+0x18>
 8009744:	4633      	mov	r3, r6
 8009746:	463a      	mov	r2, r7
 8009748:	4628      	mov	r0, r5
 800974a:	6a21      	ldr	r1, [r4, #32]
 800974c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009750:	47e0      	blx	ip
 8009752:	2800      	cmp	r0, #0
 8009754:	dc06      	bgt.n	8009764 <__sflush_r+0xf8>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	e790      	b.n	8009686 <__sflush_r+0x1a>
 8009764:	4407      	add	r7, r0
 8009766:	1a36      	subs	r6, r6, r0
 8009768:	e7ea      	b.n	8009740 <__sflush_r+0xd4>
 800976a:	bf00      	nop
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f000 f887 	bl	8009898 <__sinit>
 800978a:	4b14      	ldr	r3, [pc, #80]	; (80097dc <_fflush_r+0x6c>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d11b      	bne.n	80097c8 <_fflush_r+0x58>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ef      	beq.n	800977a <_fflush_r+0xa>
 800979a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800979c:	07d0      	lsls	r0, r2, #31
 800979e:	d404      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a0:	0599      	lsls	r1, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a6:	f000 fc92 	bl	800a0ce <__retarget_lock_acquire_recursive>
 80097aa:	4628      	mov	r0, r5
 80097ac:	4621      	mov	r1, r4
 80097ae:	f7ff ff5d 	bl	800966c <__sflush_r>
 80097b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b4:	4605      	mov	r5, r0
 80097b6:	07da      	lsls	r2, r3, #31
 80097b8:	d4e0      	bmi.n	800977c <_fflush_r+0xc>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	059b      	lsls	r3, r3, #22
 80097be:	d4dd      	bmi.n	800977c <_fflush_r+0xc>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f000 fc85 	bl	800a0d0 <__retarget_lock_release_recursive>
 80097c6:	e7d9      	b.n	800977c <_fflush_r+0xc>
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <_fflush_r+0x70>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <_fflush_r+0x62>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7df      	b.n	8009792 <_fflush_r+0x22>
 80097d2:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <_fflush_r+0x74>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7da      	b.n	8009792 <_fflush_r+0x22>
 80097dc:	0800ba0c 	.word	0x0800ba0c
 80097e0:	0800ba2c 	.word	0x0800ba2c
 80097e4:	0800b9ec 	.word	0x0800b9ec

080097e8 <std>:
 80097e8:	2300      	movs	r3, #0
 80097ea:	b510      	push	{r4, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	e9c0 3300 	strd	r3, r3, [r0]
 80097f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097f6:	6083      	str	r3, [r0, #8]
 80097f8:	8181      	strh	r1, [r0, #12]
 80097fa:	6643      	str	r3, [r0, #100]	; 0x64
 80097fc:	81c2      	strh	r2, [r0, #14]
 80097fe:	6183      	str	r3, [r0, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	2208      	movs	r2, #8
 8009804:	305c      	adds	r0, #92	; 0x5c
 8009806:	f7fd f9b9 	bl	8006b7c <memset>
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x38>)
 800980c:	6224      	str	r4, [r4, #32]
 800980e:	6263      	str	r3, [r4, #36]	; 0x24
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <std+0x3c>)
 8009812:	62a3      	str	r3, [r4, #40]	; 0x28
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <std+0x40>)
 8009816:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009818:	4b04      	ldr	r3, [pc, #16]	; (800982c <std+0x44>)
 800981a:	6323      	str	r3, [r4, #48]	; 0x30
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	08007875 	.word	0x08007875
 8009824:	08007897 	.word	0x08007897
 8009828:	080078cf 	.word	0x080078cf
 800982c:	080078f3 	.word	0x080078f3

08009830 <_cleanup_r>:
 8009830:	4901      	ldr	r1, [pc, #4]	; (8009838 <_cleanup_r+0x8>)
 8009832:	f000 b8c1 	b.w	80099b8 <_fwalk_reent>
 8009836:	bf00      	nop
 8009838:	08009771 	.word	0x08009771

0800983c <__sfmoreglue>:
 800983c:	2268      	movs	r2, #104	; 0x68
 800983e:	b570      	push	{r4, r5, r6, lr}
 8009840:	1e4d      	subs	r5, r1, #1
 8009842:	4355      	muls	r5, r2
 8009844:	460e      	mov	r6, r1
 8009846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800984a:	f7fd fa07 	bl	8006c5c <_malloc_r>
 800984e:	4604      	mov	r4, r0
 8009850:	b140      	cbz	r0, 8009864 <__sfmoreglue+0x28>
 8009852:	2100      	movs	r1, #0
 8009854:	e9c0 1600 	strd	r1, r6, [r0]
 8009858:	300c      	adds	r0, #12
 800985a:	60a0      	str	r0, [r4, #8]
 800985c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009860:	f7fd f98c 	bl	8006b7c <memset>
 8009864:	4620      	mov	r0, r4
 8009866:	bd70      	pop	{r4, r5, r6, pc}

08009868 <__sfp_lock_acquire>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sfp_lock_acquire+0x8>)
 800986a:	f000 bc30 	b.w	800a0ce <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	200007a1 	.word	0x200007a1

08009874 <__sfp_lock_release>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sfp_lock_release+0x8>)
 8009876:	f000 bc2b 	b.w	800a0d0 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	200007a1 	.word	0x200007a1

08009880 <__sinit_lock_acquire>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sinit_lock_acquire+0x8>)
 8009882:	f000 bc24 	b.w	800a0ce <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	200007a2 	.word	0x200007a2

0800988c <__sinit_lock_release>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__sinit_lock_release+0x8>)
 800988e:	f000 bc1f 	b.w	800a0d0 <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	200007a2 	.word	0x200007a2

08009898 <__sinit>:
 8009898:	b510      	push	{r4, lr}
 800989a:	4604      	mov	r4, r0
 800989c:	f7ff fff0 	bl	8009880 <__sinit_lock_acquire>
 80098a0:	69a3      	ldr	r3, [r4, #24]
 80098a2:	b11b      	cbz	r3, 80098ac <__sinit+0x14>
 80098a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a8:	f7ff bff0 	b.w	800988c <__sinit_lock_release>
 80098ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098b0:	6523      	str	r3, [r4, #80]	; 0x50
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <__sinit+0x68>)
 80098b4:	4a13      	ldr	r2, [pc, #76]	; (8009904 <__sinit+0x6c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	bf08      	it	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	4620      	mov	r0, r4
 80098c2:	bf08      	it	eq
 80098c4:	61a3      	streq	r3, [r4, #24]
 80098c6:	f000 f81f 	bl	8009908 <__sfp>
 80098ca:	6060      	str	r0, [r4, #4]
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 f81b 	bl	8009908 <__sfp>
 80098d2:	60a0      	str	r0, [r4, #8]
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 f817 	bl	8009908 <__sfp>
 80098da:	2200      	movs	r2, #0
 80098dc:	2104      	movs	r1, #4
 80098de:	60e0      	str	r0, [r4, #12]
 80098e0:	6860      	ldr	r0, [r4, #4]
 80098e2:	f7ff ff81 	bl	80097e8 <std>
 80098e6:	2201      	movs	r2, #1
 80098e8:	2109      	movs	r1, #9
 80098ea:	68a0      	ldr	r0, [r4, #8]
 80098ec:	f7ff ff7c 	bl	80097e8 <std>
 80098f0:	2202      	movs	r2, #2
 80098f2:	2112      	movs	r1, #18
 80098f4:	68e0      	ldr	r0, [r4, #12]
 80098f6:	f7ff ff77 	bl	80097e8 <std>
 80098fa:	2301      	movs	r3, #1
 80098fc:	61a3      	str	r3, [r4, #24]
 80098fe:	e7d1      	b.n	80098a4 <__sinit+0xc>
 8009900:	0800b7dc 	.word	0x0800b7dc
 8009904:	08009831 	.word	0x08009831

08009908 <__sfp>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	4607      	mov	r7, r0
 800990c:	f7ff ffac 	bl	8009868 <__sfp_lock_acquire>
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <__sfp+0x84>)
 8009912:	681e      	ldr	r6, [r3, #0]
 8009914:	69b3      	ldr	r3, [r6, #24]
 8009916:	b913      	cbnz	r3, 800991e <__sfp+0x16>
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff ffbd 	bl	8009898 <__sinit>
 800991e:	3648      	adds	r6, #72	; 0x48
 8009920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009924:	3b01      	subs	r3, #1
 8009926:	d503      	bpl.n	8009930 <__sfp+0x28>
 8009928:	6833      	ldr	r3, [r6, #0]
 800992a:	b30b      	cbz	r3, 8009970 <__sfp+0x68>
 800992c:	6836      	ldr	r6, [r6, #0]
 800992e:	e7f7      	b.n	8009920 <__sfp+0x18>
 8009930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009934:	b9d5      	cbnz	r5, 800996c <__sfp+0x64>
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <__sfp+0x88>)
 8009938:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800993c:	60e3      	str	r3, [r4, #12]
 800993e:	6665      	str	r5, [r4, #100]	; 0x64
 8009940:	f000 fbc4 	bl	800a0cc <__retarget_lock_init_recursive>
 8009944:	f7ff ff96 	bl	8009874 <__sfp_lock_release>
 8009948:	2208      	movs	r2, #8
 800994a:	4629      	mov	r1, r5
 800994c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009954:	6025      	str	r5, [r4, #0]
 8009956:	61a5      	str	r5, [r4, #24]
 8009958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800995c:	f7fd f90e 	bl	8006b7c <memset>
 8009960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009968:	4620      	mov	r0, r4
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	3468      	adds	r4, #104	; 0x68
 800996e:	e7d9      	b.n	8009924 <__sfp+0x1c>
 8009970:	2104      	movs	r1, #4
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ff62 	bl	800983c <__sfmoreglue>
 8009978:	4604      	mov	r4, r0
 800997a:	6030      	str	r0, [r6, #0]
 800997c:	2800      	cmp	r0, #0
 800997e:	d1d5      	bne.n	800992c <__sfp+0x24>
 8009980:	f7ff ff78 	bl	8009874 <__sfp_lock_release>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	e7ee      	b.n	8009968 <__sfp+0x60>
 800998a:	bf00      	nop
 800998c:	0800b7dc 	.word	0x0800b7dc
 8009990:	ffff0001 	.word	0xffff0001

08009994 <fiprintf>:
 8009994:	b40e      	push	{r1, r2, r3}
 8009996:	b503      	push	{r0, r1, lr}
 8009998:	4601      	mov	r1, r0
 800999a:	ab03      	add	r3, sp, #12
 800999c:	4805      	ldr	r0, [pc, #20]	; (80099b4 <fiprintf+0x20>)
 800999e:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a2:	6800      	ldr	r0, [r0, #0]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	f001 fab7 	bl	800af18 <_vfiprintf_r>
 80099aa:	b002      	add	sp, #8
 80099ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b0:	b003      	add	sp, #12
 80099b2:	4770      	bx	lr
 80099b4:	20000034 	.word	0x20000034

080099b8 <_fwalk_reent>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	4606      	mov	r6, r0
 80099be:	4688      	mov	r8, r1
 80099c0:	2700      	movs	r7, #0
 80099c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099ca:	f1b9 0901 	subs.w	r9, r9, #1
 80099ce:	d505      	bpl.n	80099dc <_fwalk_reent+0x24>
 80099d0:	6824      	ldr	r4, [r4, #0]
 80099d2:	2c00      	cmp	r4, #0
 80099d4:	d1f7      	bne.n	80099c6 <_fwalk_reent+0xe>
 80099d6:	4638      	mov	r0, r7
 80099d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099dc:	89ab      	ldrh	r3, [r5, #12]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d907      	bls.n	80099f2 <_fwalk_reent+0x3a>
 80099e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099e6:	3301      	adds	r3, #1
 80099e8:	d003      	beq.n	80099f2 <_fwalk_reent+0x3a>
 80099ea:	4629      	mov	r1, r5
 80099ec:	4630      	mov	r0, r6
 80099ee:	47c0      	blx	r8
 80099f0:	4307      	orrs	r7, r0
 80099f2:	3568      	adds	r5, #104	; 0x68
 80099f4:	e7e9      	b.n	80099ca <_fwalk_reent+0x12>

080099f6 <rshift>:
 80099f6:	6903      	ldr	r3, [r0, #16]
 80099f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a00:	f100 0414 	add.w	r4, r0, #20
 8009a04:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a08:	dd46      	ble.n	8009a98 <rshift+0xa2>
 8009a0a:	f011 011f 	ands.w	r1, r1, #31
 8009a0e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a12:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a16:	d10c      	bne.n	8009a32 <rshift+0x3c>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f100 0710 	add.w	r7, r0, #16
 8009a1e:	42b1      	cmp	r1, r6
 8009a20:	d335      	bcc.n	8009a8e <rshift+0x98>
 8009a22:	1a9b      	subs	r3, r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	1eea      	subs	r2, r5, #3
 8009a28:	4296      	cmp	r6, r2
 8009a2a:	bf38      	it	cc
 8009a2c:	2300      	movcc	r3, #0
 8009a2e:	4423      	add	r3, r4
 8009a30:	e015      	b.n	8009a5e <rshift+0x68>
 8009a32:	46a1      	mov	r9, r4
 8009a34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a38:	f1c1 0820 	rsb	r8, r1, #32
 8009a3c:	40cf      	lsrs	r7, r1
 8009a3e:	f105 0e04 	add.w	lr, r5, #4
 8009a42:	4576      	cmp	r6, lr
 8009a44:	46f4      	mov	ip, lr
 8009a46:	d816      	bhi.n	8009a76 <rshift+0x80>
 8009a48:	1a9a      	subs	r2, r3, r2
 8009a4a:	0092      	lsls	r2, r2, #2
 8009a4c:	3a04      	subs	r2, #4
 8009a4e:	3501      	adds	r5, #1
 8009a50:	42ae      	cmp	r6, r5
 8009a52:	bf38      	it	cc
 8009a54:	2200      	movcc	r2, #0
 8009a56:	18a3      	adds	r3, r4, r2
 8009a58:	50a7      	str	r7, [r4, r2]
 8009a5a:	b107      	cbz	r7, 8009a5e <rshift+0x68>
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	eba3 0204 	sub.w	r2, r3, r4
 8009a64:	bf08      	it	eq
 8009a66:	2300      	moveq	r3, #0
 8009a68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a6c:	6102      	str	r2, [r0, #16]
 8009a6e:	bf08      	it	eq
 8009a70:	6143      	streq	r3, [r0, #20]
 8009a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a76:	f8dc c000 	ldr.w	ip, [ip]
 8009a7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a7e:	ea4c 0707 	orr.w	r7, ip, r7
 8009a82:	f849 7b04 	str.w	r7, [r9], #4
 8009a86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a8a:	40cf      	lsrs	r7, r1
 8009a8c:	e7d9      	b.n	8009a42 <rshift+0x4c>
 8009a8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a92:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a96:	e7c2      	b.n	8009a1e <rshift+0x28>
 8009a98:	4623      	mov	r3, r4
 8009a9a:	e7e0      	b.n	8009a5e <rshift+0x68>

08009a9c <__hexdig_fun>:
 8009a9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d802      	bhi.n	8009aaa <__hexdig_fun+0xe>
 8009aa4:	3820      	subs	r0, #32
 8009aa6:	b2c0      	uxtb	r0, r0
 8009aa8:	4770      	bx	lr
 8009aaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d801      	bhi.n	8009ab6 <__hexdig_fun+0x1a>
 8009ab2:	3847      	subs	r0, #71	; 0x47
 8009ab4:	e7f7      	b.n	8009aa6 <__hexdig_fun+0xa>
 8009ab6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d801      	bhi.n	8009ac2 <__hexdig_fun+0x26>
 8009abe:	3827      	subs	r0, #39	; 0x27
 8009ac0:	e7f1      	b.n	8009aa6 <__hexdig_fun+0xa>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	4770      	bx	lr
	...

08009ac8 <__gethex>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	b08b      	sub	sp, #44	; 0x2c
 8009ace:	9305      	str	r3, [sp, #20]
 8009ad0:	4bb2      	ldr	r3, [pc, #712]	; (8009d9c <__gethex+0x2d4>)
 8009ad2:	9002      	str	r0, [sp, #8]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	468b      	mov	fp, r1
 8009ad8:	4618      	mov	r0, r3
 8009ada:	4690      	mov	r8, r2
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	f7f6 fb7d 	bl	80001dc <strlen>
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	f8db 2000 	ldr.w	r2, [fp]
 8009aea:	4403      	add	r3, r0
 8009aec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009af0:	9306      	str	r3, [sp, #24]
 8009af2:	1c93      	adds	r3, r2, #2
 8009af4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009af8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009afc:	32fe      	adds	r2, #254	; 0xfe
 8009afe:	18d1      	adds	r1, r2, r3
 8009b00:	461f      	mov	r7, r3
 8009b02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b06:	9101      	str	r1, [sp, #4]
 8009b08:	2830      	cmp	r0, #48	; 0x30
 8009b0a:	d0f8      	beq.n	8009afe <__gethex+0x36>
 8009b0c:	f7ff ffc6 	bl	8009a9c <__hexdig_fun>
 8009b10:	4604      	mov	r4, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d13a      	bne.n	8009b8c <__gethex+0xc4>
 8009b16:	4652      	mov	r2, sl
 8009b18:	4638      	mov	r0, r7
 8009b1a:	9903      	ldr	r1, [sp, #12]
 8009b1c:	f7fd ff09 	bl	8007932 <strncmp>
 8009b20:	4605      	mov	r5, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d166      	bne.n	8009bf4 <__gethex+0x12c>
 8009b26:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b2a:	eb07 060a 	add.w	r6, r7, sl
 8009b2e:	f7ff ffb5 	bl	8009a9c <__hexdig_fun>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d060      	beq.n	8009bf8 <__gethex+0x130>
 8009b36:	4633      	mov	r3, r6
 8009b38:	7818      	ldrb	r0, [r3, #0]
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	2830      	cmp	r0, #48	; 0x30
 8009b3e:	f103 0301 	add.w	r3, r3, #1
 8009b42:	d0f9      	beq.n	8009b38 <__gethex+0x70>
 8009b44:	f7ff ffaa 	bl	8009a9c <__hexdig_fun>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	fab0 f480 	clz	r4, r0
 8009b4e:	4635      	mov	r5, r6
 8009b50:	0964      	lsrs	r4, r4, #5
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	463a      	mov	r2, r7
 8009b56:	4616      	mov	r6, r2
 8009b58:	7830      	ldrb	r0, [r6, #0]
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	f7ff ff9e 	bl	8009a9c <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1f8      	bne.n	8009b56 <__gethex+0x8e>
 8009b64:	4652      	mov	r2, sl
 8009b66:	4630      	mov	r0, r6
 8009b68:	9903      	ldr	r1, [sp, #12]
 8009b6a:	f7fd fee2 	bl	8007932 <strncmp>
 8009b6e:	b980      	cbnz	r0, 8009b92 <__gethex+0xca>
 8009b70:	b94d      	cbnz	r5, 8009b86 <__gethex+0xbe>
 8009b72:	eb06 050a 	add.w	r5, r6, sl
 8009b76:	462a      	mov	r2, r5
 8009b78:	4616      	mov	r6, r2
 8009b7a:	7830      	ldrb	r0, [r6, #0]
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	f7ff ff8d 	bl	8009a9c <__hexdig_fun>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d1f8      	bne.n	8009b78 <__gethex+0xb0>
 8009b86:	1bad      	subs	r5, r5, r6
 8009b88:	00ad      	lsls	r5, r5, #2
 8009b8a:	e004      	b.n	8009b96 <__gethex+0xce>
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	4625      	mov	r5, r4
 8009b90:	e7e0      	b.n	8009b54 <__gethex+0x8c>
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	d1f7      	bne.n	8009b86 <__gethex+0xbe>
 8009b96:	7833      	ldrb	r3, [r6, #0]
 8009b98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b9c:	2b50      	cmp	r3, #80	; 0x50
 8009b9e:	d139      	bne.n	8009c14 <__gethex+0x14c>
 8009ba0:	7873      	ldrb	r3, [r6, #1]
 8009ba2:	2b2b      	cmp	r3, #43	; 0x2b
 8009ba4:	d02a      	beq.n	8009bfc <__gethex+0x134>
 8009ba6:	2b2d      	cmp	r3, #45	; 0x2d
 8009ba8:	d02c      	beq.n	8009c04 <__gethex+0x13c>
 8009baa:	f04f 0900 	mov.w	r9, #0
 8009bae:	1c71      	adds	r1, r6, #1
 8009bb0:	7808      	ldrb	r0, [r1, #0]
 8009bb2:	f7ff ff73 	bl	8009a9c <__hexdig_fun>
 8009bb6:	1e43      	subs	r3, r0, #1
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b18      	cmp	r3, #24
 8009bbc:	d82a      	bhi.n	8009c14 <__gethex+0x14c>
 8009bbe:	f1a0 0210 	sub.w	r2, r0, #16
 8009bc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bc6:	f7ff ff69 	bl	8009a9c <__hexdig_fun>
 8009bca:	1e43      	subs	r3, r0, #1
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b18      	cmp	r3, #24
 8009bd0:	d91b      	bls.n	8009c0a <__gethex+0x142>
 8009bd2:	f1b9 0f00 	cmp.w	r9, #0
 8009bd6:	d000      	beq.n	8009bda <__gethex+0x112>
 8009bd8:	4252      	negs	r2, r2
 8009bda:	4415      	add	r5, r2
 8009bdc:	f8cb 1000 	str.w	r1, [fp]
 8009be0:	b1d4      	cbz	r4, 8009c18 <__gethex+0x150>
 8009be2:	9b01      	ldr	r3, [sp, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bf14      	ite	ne
 8009be8:	2700      	movne	r7, #0
 8009bea:	2706      	moveq	r7, #6
 8009bec:	4638      	mov	r0, r7
 8009bee:	b00b      	add	sp, #44	; 0x2c
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	463e      	mov	r6, r7
 8009bf6:	4625      	mov	r5, r4
 8009bf8:	2401      	movs	r4, #1
 8009bfa:	e7cc      	b.n	8009b96 <__gethex+0xce>
 8009bfc:	f04f 0900 	mov.w	r9, #0
 8009c00:	1cb1      	adds	r1, r6, #2
 8009c02:	e7d5      	b.n	8009bb0 <__gethex+0xe8>
 8009c04:	f04f 0901 	mov.w	r9, #1
 8009c08:	e7fa      	b.n	8009c00 <__gethex+0x138>
 8009c0a:	230a      	movs	r3, #10
 8009c0c:	fb03 0202 	mla	r2, r3, r2, r0
 8009c10:	3a10      	subs	r2, #16
 8009c12:	e7d6      	b.n	8009bc2 <__gethex+0xfa>
 8009c14:	4631      	mov	r1, r6
 8009c16:	e7e1      	b.n	8009bdc <__gethex+0x114>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	1bf3      	subs	r3, r6, r7
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	dc0a      	bgt.n	8009c38 <__gethex+0x170>
 8009c22:	9802      	ldr	r0, [sp, #8]
 8009c24:	f000 fafa 	bl	800a21c <_Balloc>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	b940      	cbnz	r0, 8009c3e <__gethex+0x176>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	21de      	movs	r1, #222	; 0xde
 8009c30:	4b5b      	ldr	r3, [pc, #364]	; (8009da0 <__gethex+0x2d8>)
 8009c32:	485c      	ldr	r0, [pc, #368]	; (8009da4 <__gethex+0x2dc>)
 8009c34:	f7fe fe70 	bl	8008918 <__assert_func>
 8009c38:	3101      	adds	r1, #1
 8009c3a:	105b      	asrs	r3, r3, #1
 8009c3c:	e7ef      	b.n	8009c1e <__gethex+0x156>
 8009c3e:	f04f 0b00 	mov.w	fp, #0
 8009c42:	f100 0914 	add.w	r9, r0, #20
 8009c46:	f1ca 0301 	rsb	r3, sl, #1
 8009c4a:	f8cd 9010 	str.w	r9, [sp, #16]
 8009c4e:	f8cd b004 	str.w	fp, [sp, #4]
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	42b7      	cmp	r7, r6
 8009c56:	d33f      	bcc.n	8009cd8 <__gethex+0x210>
 8009c58:	9f04      	ldr	r7, [sp, #16]
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	f847 3b04 	str.w	r3, [r7], #4
 8009c60:	eba7 0709 	sub.w	r7, r7, r9
 8009c64:	10bf      	asrs	r7, r7, #2
 8009c66:	6127      	str	r7, [r4, #16]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fbc9 	bl	800a400 <__hi0bits>
 8009c6e:	017f      	lsls	r7, r7, #5
 8009c70:	f8d8 6000 	ldr.w	r6, [r8]
 8009c74:	1a3f      	subs	r7, r7, r0
 8009c76:	42b7      	cmp	r7, r6
 8009c78:	dd62      	ble.n	8009d40 <__gethex+0x278>
 8009c7a:	1bbf      	subs	r7, r7, r6
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 ff63 	bl	800ab4a <__any_on>
 8009c84:	4682      	mov	sl, r0
 8009c86:	b1a8      	cbz	r0, 8009cb4 <__gethex+0x1ec>
 8009c88:	f04f 0a01 	mov.w	sl, #1
 8009c8c:	1e7b      	subs	r3, r7, #1
 8009c8e:	1159      	asrs	r1, r3, #5
 8009c90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c94:	f003 021f 	and.w	r2, r3, #31
 8009c98:	fa0a f202 	lsl.w	r2, sl, r2
 8009c9c:	420a      	tst	r2, r1
 8009c9e:	d009      	beq.n	8009cb4 <__gethex+0x1ec>
 8009ca0:	4553      	cmp	r3, sl
 8009ca2:	dd05      	ble.n	8009cb0 <__gethex+0x1e8>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	1eb9      	subs	r1, r7, #2
 8009ca8:	f000 ff4f 	bl	800ab4a <__any_on>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d144      	bne.n	8009d3a <__gethex+0x272>
 8009cb0:	f04f 0a02 	mov.w	sl, #2
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fe9d 	bl	80099f6 <rshift>
 8009cbc:	443d      	add	r5, r7
 8009cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cc2:	42ab      	cmp	r3, r5
 8009cc4:	da4a      	bge.n	8009d5c <__gethex+0x294>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	9802      	ldr	r0, [sp, #8]
 8009cca:	f000 fae7 	bl	800a29c <_Bfree>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cd2:	27a3      	movs	r7, #163	; 0xa3
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	e789      	b.n	8009bec <__gethex+0x124>
 8009cd8:	1e73      	subs	r3, r6, #1
 8009cda:	9a06      	ldr	r2, [sp, #24]
 8009cdc:	9307      	str	r3, [sp, #28]
 8009cde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d019      	beq.n	8009d1a <__gethex+0x252>
 8009ce6:	f1bb 0f20 	cmp.w	fp, #32
 8009cea:	d107      	bne.n	8009cfc <__gethex+0x234>
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	9a01      	ldr	r2, [sp, #4]
 8009cf0:	f843 2b04 	str.w	r2, [r3], #4
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	469b      	mov	fp, r3
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d00:	f7ff fecc 	bl	8009a9c <__hexdig_fun>
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	f000 000f 	and.w	r0, r0, #15
 8009d0a:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d0e:	4303      	orrs	r3, r0
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	f10b 0b04 	add.w	fp, fp, #4
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	e00d      	b.n	8009d36 <__gethex+0x26e>
 8009d1a:	9a08      	ldr	r2, [sp, #32]
 8009d1c:	1e73      	subs	r3, r6, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	42bb      	cmp	r3, r7
 8009d22:	d3e0      	bcc.n	8009ce6 <__gethex+0x21e>
 8009d24:	4618      	mov	r0, r3
 8009d26:	4652      	mov	r2, sl
 8009d28:	9903      	ldr	r1, [sp, #12]
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	f7fd fe01 	bl	8007932 <strncmp>
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1d7      	bne.n	8009ce6 <__gethex+0x21e>
 8009d36:	461e      	mov	r6, r3
 8009d38:	e78c      	b.n	8009c54 <__gethex+0x18c>
 8009d3a:	f04f 0a03 	mov.w	sl, #3
 8009d3e:	e7b9      	b.n	8009cb4 <__gethex+0x1ec>
 8009d40:	da09      	bge.n	8009d56 <__gethex+0x28e>
 8009d42:	1bf7      	subs	r7, r6, r7
 8009d44:	4621      	mov	r1, r4
 8009d46:	463a      	mov	r2, r7
 8009d48:	9802      	ldr	r0, [sp, #8]
 8009d4a:	f000 fcbf 	bl	800a6cc <__lshift>
 8009d4e:	4604      	mov	r4, r0
 8009d50:	1bed      	subs	r5, r5, r7
 8009d52:	f100 0914 	add.w	r9, r0, #20
 8009d56:	f04f 0a00 	mov.w	sl, #0
 8009d5a:	e7b0      	b.n	8009cbe <__gethex+0x1f6>
 8009d5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d60:	42a8      	cmp	r0, r5
 8009d62:	dd72      	ble.n	8009e4a <__gethex+0x382>
 8009d64:	1b45      	subs	r5, r0, r5
 8009d66:	42ae      	cmp	r6, r5
 8009d68:	dc35      	bgt.n	8009dd6 <__gethex+0x30e>
 8009d6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d029      	beq.n	8009dc6 <__gethex+0x2fe>
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d02b      	beq.n	8009dce <__gethex+0x306>
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d11c      	bne.n	8009db4 <__gethex+0x2ec>
 8009d7a:	42ae      	cmp	r6, r5
 8009d7c:	d11a      	bne.n	8009db4 <__gethex+0x2ec>
 8009d7e:	2e01      	cmp	r6, #1
 8009d80:	d112      	bne.n	8009da8 <__gethex+0x2e0>
 8009d82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	2762      	movs	r7, #98	; 0x62
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	6123      	str	r3, [r4, #16]
 8009d90:	f8c9 3000 	str.w	r3, [r9]
 8009d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d96:	601c      	str	r4, [r3, #0]
 8009d98:	e728      	b.n	8009bec <__gethex+0x124>
 8009d9a:	bf00      	nop
 8009d9c:	0800bab4 	.word	0x0800bab4
 8009da0:	0800b9d9 	.word	0x0800b9d9
 8009da4:	0800ba4c 	.word	0x0800ba4c
 8009da8:	4620      	mov	r0, r4
 8009daa:	1e71      	subs	r1, r6, #1
 8009dac:	f000 fecd 	bl	800ab4a <__any_on>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d1e6      	bne.n	8009d82 <__gethex+0x2ba>
 8009db4:	4621      	mov	r1, r4
 8009db6:	9802      	ldr	r0, [sp, #8]
 8009db8:	f000 fa70 	bl	800a29c <_Bfree>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dc0:	2750      	movs	r7, #80	; 0x50
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e712      	b.n	8009bec <__gethex+0x124>
 8009dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f3      	bne.n	8009db4 <__gethex+0x2ec>
 8009dcc:	e7d9      	b.n	8009d82 <__gethex+0x2ba>
 8009dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1d6      	bne.n	8009d82 <__gethex+0x2ba>
 8009dd4:	e7ee      	b.n	8009db4 <__gethex+0x2ec>
 8009dd6:	1e6f      	subs	r7, r5, #1
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	d132      	bne.n	8009e44 <__gethex+0x37c>
 8009dde:	b127      	cbz	r7, 8009dea <__gethex+0x322>
 8009de0:	4639      	mov	r1, r7
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 feb1 	bl	800ab4a <__any_on>
 8009de8:	4682      	mov	sl, r0
 8009dea:	2101      	movs	r1, #1
 8009dec:	117b      	asrs	r3, r7, #5
 8009dee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009df2:	f007 071f 	and.w	r7, r7, #31
 8009df6:	fa01 f707 	lsl.w	r7, r1, r7
 8009dfa:	421f      	tst	r7, r3
 8009dfc:	f04f 0702 	mov.w	r7, #2
 8009e00:	4629      	mov	r1, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	bf18      	it	ne
 8009e06:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e0a:	1b76      	subs	r6, r6, r5
 8009e0c:	f7ff fdf3 	bl	80099f6 <rshift>
 8009e10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e14:	f1ba 0f00 	cmp.w	sl, #0
 8009e18:	d048      	beq.n	8009eac <__gethex+0x3e4>
 8009e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d015      	beq.n	8009e4e <__gethex+0x386>
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d017      	beq.n	8009e56 <__gethex+0x38e>
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d109      	bne.n	8009e3e <__gethex+0x376>
 8009e2a:	f01a 0f02 	tst.w	sl, #2
 8009e2e:	d006      	beq.n	8009e3e <__gethex+0x376>
 8009e30:	f8d9 0000 	ldr.w	r0, [r9]
 8009e34:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e38:	f01a 0f01 	tst.w	sl, #1
 8009e3c:	d10e      	bne.n	8009e5c <__gethex+0x394>
 8009e3e:	f047 0710 	orr.w	r7, r7, #16
 8009e42:	e033      	b.n	8009eac <__gethex+0x3e4>
 8009e44:	f04f 0a01 	mov.w	sl, #1
 8009e48:	e7cf      	b.n	8009dea <__gethex+0x322>
 8009e4a:	2701      	movs	r7, #1
 8009e4c:	e7e2      	b.n	8009e14 <__gethex+0x34c>
 8009e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e50:	f1c3 0301 	rsb	r3, r3, #1
 8009e54:	9315      	str	r3, [sp, #84]	; 0x54
 8009e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0f0      	beq.n	8009e3e <__gethex+0x376>
 8009e5c:	f04f 0c00 	mov.w	ip, #0
 8009e60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e64:	f104 0314 	add.w	r3, r4, #20
 8009e68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e7a:	d01c      	beq.n	8009eb6 <__gethex+0x3ee>
 8009e7c:	3201      	adds	r2, #1
 8009e7e:	6002      	str	r2, [r0, #0]
 8009e80:	2f02      	cmp	r7, #2
 8009e82:	f104 0314 	add.w	r3, r4, #20
 8009e86:	d13d      	bne.n	8009f04 <__gethex+0x43c>
 8009e88:	f8d8 2000 	ldr.w	r2, [r8]
 8009e8c:	3a01      	subs	r2, #1
 8009e8e:	42b2      	cmp	r2, r6
 8009e90:	d10a      	bne.n	8009ea8 <__gethex+0x3e0>
 8009e92:	2201      	movs	r2, #1
 8009e94:	1171      	asrs	r1, r6, #5
 8009e96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e9a:	f006 061f 	and.w	r6, r6, #31
 8009e9e:	fa02 f606 	lsl.w	r6, r2, r6
 8009ea2:	421e      	tst	r6, r3
 8009ea4:	bf18      	it	ne
 8009ea6:	4617      	movne	r7, r2
 8009ea8:	f047 0720 	orr.w	r7, r7, #32
 8009eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eae:	601c      	str	r4, [r3, #0]
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	601d      	str	r5, [r3, #0]
 8009eb4:	e69a      	b.n	8009bec <__gethex+0x124>
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ebc:	d8d8      	bhi.n	8009e70 <__gethex+0x3a8>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	459b      	cmp	fp, r3
 8009ec2:	db17      	blt.n	8009ef4 <__gethex+0x42c>
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	9802      	ldr	r0, [sp, #8]
 8009ec8:	3101      	adds	r1, #1
 8009eca:	f000 f9a7 	bl	800a21c <_Balloc>
 8009ece:	4681      	mov	r9, r0
 8009ed0:	b918      	cbnz	r0, 8009eda <__gethex+0x412>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	2184      	movs	r1, #132	; 0x84
 8009ed6:	4b19      	ldr	r3, [pc, #100]	; (8009f3c <__gethex+0x474>)
 8009ed8:	e6ab      	b.n	8009c32 <__gethex+0x16a>
 8009eda:	6922      	ldr	r2, [r4, #16]
 8009edc:	f104 010c 	add.w	r1, r4, #12
 8009ee0:	3202      	adds	r2, #2
 8009ee2:	0092      	lsls	r2, r2, #2
 8009ee4:	300c      	adds	r0, #12
 8009ee6:	f7fc fe3b 	bl	8006b60 <memcpy>
 8009eea:	4621      	mov	r1, r4
 8009eec:	9802      	ldr	r0, [sp, #8]
 8009eee:	f000 f9d5 	bl	800a29c <_Bfree>
 8009ef2:	464c      	mov	r4, r9
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	6122      	str	r2, [r4, #16]
 8009efa:	2201      	movs	r2, #1
 8009efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f00:	615a      	str	r2, [r3, #20]
 8009f02:	e7bd      	b.n	8009e80 <__gethex+0x3b8>
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	455a      	cmp	r2, fp
 8009f08:	dd0b      	ble.n	8009f22 <__gethex+0x45a>
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7ff fd72 	bl	80099f6 <rshift>
 8009f12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f16:	3501      	adds	r5, #1
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	f6ff aed4 	blt.w	8009cc6 <__gethex+0x1fe>
 8009f1e:	2701      	movs	r7, #1
 8009f20:	e7c2      	b.n	8009ea8 <__gethex+0x3e0>
 8009f22:	f016 061f 	ands.w	r6, r6, #31
 8009f26:	d0fa      	beq.n	8009f1e <__gethex+0x456>
 8009f28:	4453      	add	r3, sl
 8009f2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f2e:	f000 fa67 	bl	800a400 <__hi0bits>
 8009f32:	f1c6 0620 	rsb	r6, r6, #32
 8009f36:	42b0      	cmp	r0, r6
 8009f38:	dbe7      	blt.n	8009f0a <__gethex+0x442>
 8009f3a:	e7f0      	b.n	8009f1e <__gethex+0x456>
 8009f3c:	0800b9d9 	.word	0x0800b9d9

08009f40 <L_shift>:
 8009f40:	f1c2 0208 	rsb	r2, r2, #8
 8009f44:	0092      	lsls	r2, r2, #2
 8009f46:	b570      	push	{r4, r5, r6, lr}
 8009f48:	f1c2 0620 	rsb	r6, r2, #32
 8009f4c:	6843      	ldr	r3, [r0, #4]
 8009f4e:	6804      	ldr	r4, [r0, #0]
 8009f50:	fa03 f506 	lsl.w	r5, r3, r6
 8009f54:	432c      	orrs	r4, r5
 8009f56:	40d3      	lsrs	r3, r2
 8009f58:	6004      	str	r4, [r0, #0]
 8009f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f5e:	4288      	cmp	r0, r1
 8009f60:	d3f4      	bcc.n	8009f4c <L_shift+0xc>
 8009f62:	bd70      	pop	{r4, r5, r6, pc}

08009f64 <__match>:
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	6803      	ldr	r3, [r0, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f6e:	b914      	cbnz	r4, 8009f76 <__match+0x12>
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	bd30      	pop	{r4, r5, pc}
 8009f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f7e:	2d19      	cmp	r5, #25
 8009f80:	bf98      	it	ls
 8009f82:	3220      	addls	r2, #32
 8009f84:	42a2      	cmp	r2, r4
 8009f86:	d0f0      	beq.n	8009f6a <__match+0x6>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f3      	b.n	8009f74 <__match+0x10>

08009f8c <__hexnan>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	2500      	movs	r5, #0
 8009f92:	680b      	ldr	r3, [r1, #0]
 8009f94:	4682      	mov	sl, r0
 8009f96:	115e      	asrs	r6, r3, #5
 8009f98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f9c:	f013 031f 	ands.w	r3, r3, #31
 8009fa0:	bf18      	it	ne
 8009fa2:	3604      	addne	r6, #4
 8009fa4:	1f37      	subs	r7, r6, #4
 8009fa6:	46b9      	mov	r9, r7
 8009fa8:	463c      	mov	r4, r7
 8009faa:	46ab      	mov	fp, r5
 8009fac:	b087      	sub	sp, #28
 8009fae:	4690      	mov	r8, r2
 8009fb0:	6802      	ldr	r2, [r0, #0]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fb8:	9502      	str	r5, [sp, #8]
 8009fba:	7851      	ldrb	r1, [r2, #1]
 8009fbc:	1c53      	adds	r3, r2, #1
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	b341      	cbz	r1, 800a014 <__hexnan+0x88>
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	9205      	str	r2, [sp, #20]
 8009fc6:	9104      	str	r1, [sp, #16]
 8009fc8:	f7ff fd68 	bl	8009a9c <__hexdig_fun>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d14f      	bne.n	800a070 <__hexnan+0xe4>
 8009fd0:	9904      	ldr	r1, [sp, #16]
 8009fd2:	9a05      	ldr	r2, [sp, #20]
 8009fd4:	2920      	cmp	r1, #32
 8009fd6:	d818      	bhi.n	800a00a <__hexnan+0x7e>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	459b      	cmp	fp, r3
 8009fdc:	dd13      	ble.n	800a006 <__hexnan+0x7a>
 8009fde:	454c      	cmp	r4, r9
 8009fe0:	d206      	bcs.n	8009ff0 <__hexnan+0x64>
 8009fe2:	2d07      	cmp	r5, #7
 8009fe4:	dc04      	bgt.n	8009ff0 <__hexnan+0x64>
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7ff ffa8 	bl	8009f40 <L_shift>
 8009ff0:	4544      	cmp	r4, r8
 8009ff2:	d950      	bls.n	800a096 <__hexnan+0x10a>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8009ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ffe:	461d      	mov	r5, r3
 800a000:	464c      	mov	r4, r9
 800a002:	f8cd b008 	str.w	fp, [sp, #8]
 800a006:	9a03      	ldr	r2, [sp, #12]
 800a008:	e7d7      	b.n	8009fba <__hexnan+0x2e>
 800a00a:	2929      	cmp	r1, #41	; 0x29
 800a00c:	d156      	bne.n	800a0bc <__hexnan+0x130>
 800a00e:	3202      	adds	r2, #2
 800a010:	f8ca 2000 	str.w	r2, [sl]
 800a014:	f1bb 0f00 	cmp.w	fp, #0
 800a018:	d050      	beq.n	800a0bc <__hexnan+0x130>
 800a01a:	454c      	cmp	r4, r9
 800a01c:	d206      	bcs.n	800a02c <__hexnan+0xa0>
 800a01e:	2d07      	cmp	r5, #7
 800a020:	dc04      	bgt.n	800a02c <__hexnan+0xa0>
 800a022:	462a      	mov	r2, r5
 800a024:	4649      	mov	r1, r9
 800a026:	4620      	mov	r0, r4
 800a028:	f7ff ff8a 	bl	8009f40 <L_shift>
 800a02c:	4544      	cmp	r4, r8
 800a02e:	d934      	bls.n	800a09a <__hexnan+0x10e>
 800a030:	4623      	mov	r3, r4
 800a032:	f1a8 0204 	sub.w	r2, r8, #4
 800a036:	f853 1b04 	ldr.w	r1, [r3], #4
 800a03a:	429f      	cmp	r7, r3
 800a03c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a040:	d2f9      	bcs.n	800a036 <__hexnan+0xaa>
 800a042:	1b3b      	subs	r3, r7, r4
 800a044:	f023 0303 	bic.w	r3, r3, #3
 800a048:	3304      	adds	r3, #4
 800a04a:	3401      	adds	r4, #1
 800a04c:	3e03      	subs	r6, #3
 800a04e:	42b4      	cmp	r4, r6
 800a050:	bf88      	it	hi
 800a052:	2304      	movhi	r3, #4
 800a054:	2200      	movs	r2, #0
 800a056:	4443      	add	r3, r8
 800a058:	f843 2b04 	str.w	r2, [r3], #4
 800a05c:	429f      	cmp	r7, r3
 800a05e:	d2fb      	bcs.n	800a058 <__hexnan+0xcc>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	b91b      	cbnz	r3, 800a06c <__hexnan+0xe0>
 800a064:	4547      	cmp	r7, r8
 800a066:	d127      	bne.n	800a0b8 <__hexnan+0x12c>
 800a068:	2301      	movs	r3, #1
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	2005      	movs	r0, #5
 800a06e:	e026      	b.n	800a0be <__hexnan+0x132>
 800a070:	3501      	adds	r5, #1
 800a072:	2d08      	cmp	r5, #8
 800a074:	f10b 0b01 	add.w	fp, fp, #1
 800a078:	dd06      	ble.n	800a088 <__hexnan+0xfc>
 800a07a:	4544      	cmp	r4, r8
 800a07c:	d9c3      	bls.n	800a006 <__hexnan+0x7a>
 800a07e:	2300      	movs	r3, #0
 800a080:	2501      	movs	r5, #1
 800a082:	f844 3c04 	str.w	r3, [r4, #-4]
 800a086:	3c04      	subs	r4, #4
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	f000 000f 	and.w	r0, r0, #15
 800a08e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a092:	6022      	str	r2, [r4, #0]
 800a094:	e7b7      	b.n	800a006 <__hexnan+0x7a>
 800a096:	2508      	movs	r5, #8
 800a098:	e7b5      	b.n	800a006 <__hexnan+0x7a>
 800a09a:	9b01      	ldr	r3, [sp, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0df      	beq.n	800a060 <__hexnan+0xd4>
 800a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a4:	f1c3 0320 	rsb	r3, r3, #32
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0b0:	401a      	ands	r2, r3
 800a0b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0b6:	e7d3      	b.n	800a060 <__hexnan+0xd4>
 800a0b8:	3f04      	subs	r7, #4
 800a0ba:	e7d1      	b.n	800a060 <__hexnan+0xd4>
 800a0bc:	2004      	movs	r0, #4
 800a0be:	b007      	add	sp, #28
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0c4 <_localeconv_r>:
 800a0c4:	4800      	ldr	r0, [pc, #0]	; (800a0c8 <_localeconv_r+0x4>)
 800a0c6:	4770      	bx	lr
 800a0c8:	2000018c 	.word	0x2000018c

0800a0cc <__retarget_lock_init_recursive>:
 800a0cc:	4770      	bx	lr

0800a0ce <__retarget_lock_acquire_recursive>:
 800a0ce:	4770      	bx	lr

0800a0d0 <__retarget_lock_release_recursive>:
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <_lseek_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4d05      	ldr	r5, [pc, #20]	; (800a0f4 <_lseek_r+0x20>)
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f7f9 ffb4 	bl	8004050 <_lseek>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_lseek_r+0x1e>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_lseek_r+0x1e>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	200007a4 	.word	0x200007a4

0800a0f8 <__swhatbuf_r>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	460e      	mov	r6, r1
 800a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a100:	4614      	mov	r4, r2
 800a102:	2900      	cmp	r1, #0
 800a104:	461d      	mov	r5, r3
 800a106:	b096      	sub	sp, #88	; 0x58
 800a108:	da08      	bge.n	800a11c <__swhatbuf_r+0x24>
 800a10a:	2200      	movs	r2, #0
 800a10c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	061a      	lsls	r2, r3, #24
 800a114:	d410      	bmi.n	800a138 <__swhatbuf_r+0x40>
 800a116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a11a:	e00e      	b.n	800a13a <__swhatbuf_r+0x42>
 800a11c:	466a      	mov	r2, sp
 800a11e:	f001 f857 	bl	800b1d0 <_fstat_r>
 800a122:	2800      	cmp	r0, #0
 800a124:	dbf1      	blt.n	800a10a <__swhatbuf_r+0x12>
 800a126:	9a01      	ldr	r2, [sp, #4]
 800a128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a12c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a130:	425a      	negs	r2, r3
 800a132:	415a      	adcs	r2, r3
 800a134:	602a      	str	r2, [r5, #0]
 800a136:	e7ee      	b.n	800a116 <__swhatbuf_r+0x1e>
 800a138:	2340      	movs	r3, #64	; 0x40
 800a13a:	2000      	movs	r0, #0
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	b016      	add	sp, #88	; 0x58
 800a140:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a144 <__smakebuf_r>:
 800a144:	898b      	ldrh	r3, [r1, #12]
 800a146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a148:	079d      	lsls	r5, r3, #30
 800a14a:	4606      	mov	r6, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	d507      	bpl.n	800a160 <__smakebuf_r+0x1c>
 800a150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	2301      	movs	r3, #1
 800a15a:	6163      	str	r3, [r4, #20]
 800a15c:	b002      	add	sp, #8
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	466a      	mov	r2, sp
 800a162:	ab01      	add	r3, sp, #4
 800a164:	f7ff ffc8 	bl	800a0f8 <__swhatbuf_r>
 800a168:	9900      	ldr	r1, [sp, #0]
 800a16a:	4605      	mov	r5, r0
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7fc fd75 	bl	8006c5c <_malloc_r>
 800a172:	b948      	cbnz	r0, 800a188 <__smakebuf_r+0x44>
 800a174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a178:	059a      	lsls	r2, r3, #22
 800a17a:	d4ef      	bmi.n	800a15c <__smakebuf_r+0x18>
 800a17c:	f023 0303 	bic.w	r3, r3, #3
 800a180:	f043 0302 	orr.w	r3, r3, #2
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	e7e3      	b.n	800a150 <__smakebuf_r+0xc>
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <__smakebuf_r+0x7c>)
 800a18a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	6020      	str	r0, [r4, #0]
 800a190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	6120      	str	r0, [r4, #16]
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	b15b      	cbz	r3, 800a1b8 <__smakebuf_r+0x74>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a6:	f001 f825 	bl	800b1f4 <_isatty_r>
 800a1aa:	b128      	cbz	r0, 800a1b8 <__smakebuf_r+0x74>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	89a0      	ldrh	r0, [r4, #12]
 800a1ba:	4305      	orrs	r5, r0
 800a1bc:	81a5      	strh	r5, [r4, #12]
 800a1be:	e7cd      	b.n	800a15c <__smakebuf_r+0x18>
 800a1c0:	08009831 	.word	0x08009831

0800a1c4 <__ascii_mbtowc>:
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	b901      	cbnz	r1, 800a1ca <__ascii_mbtowc+0x6>
 800a1c8:	a901      	add	r1, sp, #4
 800a1ca:	b142      	cbz	r2, 800a1de <__ascii_mbtowc+0x1a>
 800a1cc:	b14b      	cbz	r3, 800a1e2 <__ascii_mbtowc+0x1e>
 800a1ce:	7813      	ldrb	r3, [r2, #0]
 800a1d0:	600b      	str	r3, [r1, #0]
 800a1d2:	7812      	ldrb	r2, [r2, #0]
 800a1d4:	1e10      	subs	r0, r2, #0
 800a1d6:	bf18      	it	ne
 800a1d8:	2001      	movne	r0, #1
 800a1da:	b002      	add	sp, #8
 800a1dc:	4770      	bx	lr
 800a1de:	4610      	mov	r0, r2
 800a1e0:	e7fb      	b.n	800a1da <__ascii_mbtowc+0x16>
 800a1e2:	f06f 0001 	mvn.w	r0, #1
 800a1e6:	e7f8      	b.n	800a1da <__ascii_mbtowc+0x16>

0800a1e8 <memchr>:
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	b2c9      	uxtb	r1, r1
 800a1ee:	4402      	add	r2, r0
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	d101      	bne.n	800a1fa <memchr+0x12>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e003      	b.n	800a202 <memchr+0x1a>
 800a1fa:	7804      	ldrb	r4, [r0, #0]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	428c      	cmp	r4, r1
 800a200:	d1f6      	bne.n	800a1f0 <memchr+0x8>
 800a202:	bd10      	pop	{r4, pc}

0800a204 <__malloc_lock>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__malloc_lock+0x8>)
 800a206:	f7ff bf62 	b.w	800a0ce <__retarget_lock_acquire_recursive>
 800a20a:	bf00      	nop
 800a20c:	200007a0 	.word	0x200007a0

0800a210 <__malloc_unlock>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__malloc_unlock+0x8>)
 800a212:	f7ff bf5d 	b.w	800a0d0 <__retarget_lock_release_recursive>
 800a216:	bf00      	nop
 800a218:	200007a0 	.word	0x200007a0

0800a21c <_Balloc>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a220:	4604      	mov	r4, r0
 800a222:	460d      	mov	r5, r1
 800a224:	b976      	cbnz	r6, 800a244 <_Balloc+0x28>
 800a226:	2010      	movs	r0, #16
 800a228:	f7fc fc8a 	bl	8006b40 <malloc>
 800a22c:	4602      	mov	r2, r0
 800a22e:	6260      	str	r0, [r4, #36]	; 0x24
 800a230:	b920      	cbnz	r0, 800a23c <_Balloc+0x20>
 800a232:	2166      	movs	r1, #102	; 0x66
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <_Balloc+0x78>)
 800a236:	4818      	ldr	r0, [pc, #96]	; (800a298 <_Balloc+0x7c>)
 800a238:	f7fe fb6e 	bl	8008918 <__assert_func>
 800a23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a240:	6006      	str	r6, [r0, #0]
 800a242:	60c6      	str	r6, [r0, #12]
 800a244:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a246:	68f3      	ldr	r3, [r6, #12]
 800a248:	b183      	cbz	r3, 800a26c <_Balloc+0x50>
 800a24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a252:	b9b8      	cbnz	r0, 800a284 <_Balloc+0x68>
 800a254:	2101      	movs	r1, #1
 800a256:	fa01 f605 	lsl.w	r6, r1, r5
 800a25a:	1d72      	adds	r2, r6, #5
 800a25c:	4620      	mov	r0, r4
 800a25e:	0092      	lsls	r2, r2, #2
 800a260:	f000 fc94 	bl	800ab8c <_calloc_r>
 800a264:	b160      	cbz	r0, 800a280 <_Balloc+0x64>
 800a266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a26a:	e00e      	b.n	800a28a <_Balloc+0x6e>
 800a26c:	2221      	movs	r2, #33	; 0x21
 800a26e:	2104      	movs	r1, #4
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fc8b 	bl	800ab8c <_calloc_r>
 800a276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a278:	60f0      	str	r0, [r6, #12]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e4      	bne.n	800a24a <_Balloc+0x2e>
 800a280:	2000      	movs	r0, #0
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	6802      	ldr	r2, [r0, #0]
 800a286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a28a:	2300      	movs	r3, #0
 800a28c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a290:	e7f7      	b.n	800a282 <_Balloc+0x66>
 800a292:	bf00      	nop
 800a294:	0800b814 	.word	0x0800b814
 800a298:	0800bac8 	.word	0x0800bac8

0800a29c <_Bfree>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	b976      	cbnz	r6, 800a2c4 <_Bfree+0x28>
 800a2a6:	2010      	movs	r0, #16
 800a2a8:	f7fc fc4a 	bl	8006b40 <malloc>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a2b0:	b920      	cbnz	r0, 800a2bc <_Bfree+0x20>
 800a2b2:	218a      	movs	r1, #138	; 0x8a
 800a2b4:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <_Bfree+0x3c>)
 800a2b6:	4809      	ldr	r0, [pc, #36]	; (800a2dc <_Bfree+0x40>)
 800a2b8:	f7fe fb2e 	bl	8008918 <__assert_func>
 800a2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c0:	6006      	str	r6, [r0, #0]
 800a2c2:	60c6      	str	r6, [r0, #12]
 800a2c4:	b13c      	cbz	r4, 800a2d6 <_Bfree+0x3a>
 800a2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2c8:	6862      	ldr	r2, [r4, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2d0:	6021      	str	r1, [r4, #0]
 800a2d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	0800b814 	.word	0x0800b814
 800a2dc:	0800bac8 	.word	0x0800bac8

0800a2e0 <__multadd>:
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	461e      	mov	r6, r3
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	690d      	ldr	r5, [r1, #16]
 800a2ee:	f101 0c14 	add.w	ip, r1, #20
 800a2f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	b299      	uxth	r1, r3
 800a2fa:	fb02 6101 	mla	r1, r2, r1, r6
 800a2fe:	0c1e      	lsrs	r6, r3, #16
 800a300:	0c0b      	lsrs	r3, r1, #16
 800a302:	fb02 3306 	mla	r3, r2, r6, r3
 800a306:	b289      	uxth	r1, r1
 800a308:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a30c:	4285      	cmp	r5, r0
 800a30e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a312:	f84c 1b04 	str.w	r1, [ip], #4
 800a316:	dcec      	bgt.n	800a2f2 <__multadd+0x12>
 800a318:	b30e      	cbz	r6, 800a35e <__multadd+0x7e>
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	dc19      	bgt.n	800a354 <__multadd+0x74>
 800a320:	6861      	ldr	r1, [r4, #4]
 800a322:	4638      	mov	r0, r7
 800a324:	3101      	adds	r1, #1
 800a326:	f7ff ff79 	bl	800a21c <_Balloc>
 800a32a:	4680      	mov	r8, r0
 800a32c:	b928      	cbnz	r0, 800a33a <__multadd+0x5a>
 800a32e:	4602      	mov	r2, r0
 800a330:	21b5      	movs	r1, #181	; 0xb5
 800a332:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <__multadd+0x84>)
 800a334:	480c      	ldr	r0, [pc, #48]	; (800a368 <__multadd+0x88>)
 800a336:	f7fe faef 	bl	8008918 <__assert_func>
 800a33a:	6922      	ldr	r2, [r4, #16]
 800a33c:	f104 010c 	add.w	r1, r4, #12
 800a340:	3202      	adds	r2, #2
 800a342:	0092      	lsls	r2, r2, #2
 800a344:	300c      	adds	r0, #12
 800a346:	f7fc fc0b 	bl	8006b60 <memcpy>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff ffa5 	bl	800a29c <_Bfree>
 800a352:	4644      	mov	r4, r8
 800a354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a358:	3501      	adds	r5, #1
 800a35a:	615e      	str	r6, [r3, #20]
 800a35c:	6125      	str	r5, [r4, #16]
 800a35e:	4620      	mov	r0, r4
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	0800b9d9 	.word	0x0800b9d9
 800a368:	0800bac8 	.word	0x0800bac8

0800a36c <__s2b>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	2209      	movs	r2, #9
 800a374:	461f      	mov	r7, r3
 800a376:	3308      	adds	r3, #8
 800a378:	460c      	mov	r4, r1
 800a37a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37e:	4606      	mov	r6, r0
 800a380:	2201      	movs	r2, #1
 800a382:	2100      	movs	r1, #0
 800a384:	429a      	cmp	r2, r3
 800a386:	db09      	blt.n	800a39c <__s2b+0x30>
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff ff47 	bl	800a21c <_Balloc>
 800a38e:	b940      	cbnz	r0, 800a3a2 <__s2b+0x36>
 800a390:	4602      	mov	r2, r0
 800a392:	21ce      	movs	r1, #206	; 0xce
 800a394:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <__s2b+0x8c>)
 800a396:	4819      	ldr	r0, [pc, #100]	; (800a3fc <__s2b+0x90>)
 800a398:	f7fe fabe 	bl	8008918 <__assert_func>
 800a39c:	0052      	lsls	r2, r2, #1
 800a39e:	3101      	adds	r1, #1
 800a3a0:	e7f0      	b.n	800a384 <__s2b+0x18>
 800a3a2:	9b08      	ldr	r3, [sp, #32]
 800a3a4:	2d09      	cmp	r5, #9
 800a3a6:	6143      	str	r3, [r0, #20]
 800a3a8:	f04f 0301 	mov.w	r3, #1
 800a3ac:	6103      	str	r3, [r0, #16]
 800a3ae:	dd16      	ble.n	800a3de <__s2b+0x72>
 800a3b0:	f104 0909 	add.w	r9, r4, #9
 800a3b4:	46c8      	mov	r8, r9
 800a3b6:	442c      	add	r4, r5
 800a3b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3bc:	4601      	mov	r1, r0
 800a3be:	220a      	movs	r2, #10
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	3b30      	subs	r3, #48	; 0x30
 800a3c4:	f7ff ff8c 	bl	800a2e0 <__multadd>
 800a3c8:	45a0      	cmp	r8, r4
 800a3ca:	d1f5      	bne.n	800a3b8 <__s2b+0x4c>
 800a3cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a3d0:	444c      	add	r4, r9
 800a3d2:	1b2d      	subs	r5, r5, r4
 800a3d4:	1963      	adds	r3, r4, r5
 800a3d6:	42bb      	cmp	r3, r7
 800a3d8:	db04      	blt.n	800a3e4 <__s2b+0x78>
 800a3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3de:	2509      	movs	r5, #9
 800a3e0:	340a      	adds	r4, #10
 800a3e2:	e7f6      	b.n	800a3d2 <__s2b+0x66>
 800a3e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	3b30      	subs	r3, #48	; 0x30
 800a3f0:	f7ff ff76 	bl	800a2e0 <__multadd>
 800a3f4:	e7ee      	b.n	800a3d4 <__s2b+0x68>
 800a3f6:	bf00      	nop
 800a3f8:	0800b9d9 	.word	0x0800b9d9
 800a3fc:	0800bac8 	.word	0x0800bac8

0800a400 <__hi0bits>:
 800a400:	0c02      	lsrs	r2, r0, #16
 800a402:	0412      	lsls	r2, r2, #16
 800a404:	4603      	mov	r3, r0
 800a406:	b9ca      	cbnz	r2, 800a43c <__hi0bits+0x3c>
 800a408:	0403      	lsls	r3, r0, #16
 800a40a:	2010      	movs	r0, #16
 800a40c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a410:	bf04      	itt	eq
 800a412:	021b      	lsleq	r3, r3, #8
 800a414:	3008      	addeq	r0, #8
 800a416:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a41a:	bf04      	itt	eq
 800a41c:	011b      	lsleq	r3, r3, #4
 800a41e:	3004      	addeq	r0, #4
 800a420:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a424:	bf04      	itt	eq
 800a426:	009b      	lsleq	r3, r3, #2
 800a428:	3002      	addeq	r0, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	db05      	blt.n	800a43a <__hi0bits+0x3a>
 800a42e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a432:	f100 0001 	add.w	r0, r0, #1
 800a436:	bf08      	it	eq
 800a438:	2020      	moveq	r0, #32
 800a43a:	4770      	bx	lr
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7e5      	b.n	800a40c <__hi0bits+0xc>

0800a440 <__lo0bits>:
 800a440:	6803      	ldr	r3, [r0, #0]
 800a442:	4602      	mov	r2, r0
 800a444:	f013 0007 	ands.w	r0, r3, #7
 800a448:	d00b      	beq.n	800a462 <__lo0bits+0x22>
 800a44a:	07d9      	lsls	r1, r3, #31
 800a44c:	d421      	bmi.n	800a492 <__lo0bits+0x52>
 800a44e:	0798      	lsls	r0, r3, #30
 800a450:	bf49      	itett	mi
 800a452:	085b      	lsrmi	r3, r3, #1
 800a454:	089b      	lsrpl	r3, r3, #2
 800a456:	2001      	movmi	r0, #1
 800a458:	6013      	strmi	r3, [r2, #0]
 800a45a:	bf5c      	itt	pl
 800a45c:	2002      	movpl	r0, #2
 800a45e:	6013      	strpl	r3, [r2, #0]
 800a460:	4770      	bx	lr
 800a462:	b299      	uxth	r1, r3
 800a464:	b909      	cbnz	r1, 800a46a <__lo0bits+0x2a>
 800a466:	2010      	movs	r0, #16
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	b2d9      	uxtb	r1, r3
 800a46c:	b909      	cbnz	r1, 800a472 <__lo0bits+0x32>
 800a46e:	3008      	adds	r0, #8
 800a470:	0a1b      	lsrs	r3, r3, #8
 800a472:	0719      	lsls	r1, r3, #28
 800a474:	bf04      	itt	eq
 800a476:	091b      	lsreq	r3, r3, #4
 800a478:	3004      	addeq	r0, #4
 800a47a:	0799      	lsls	r1, r3, #30
 800a47c:	bf04      	itt	eq
 800a47e:	089b      	lsreq	r3, r3, #2
 800a480:	3002      	addeq	r0, #2
 800a482:	07d9      	lsls	r1, r3, #31
 800a484:	d403      	bmi.n	800a48e <__lo0bits+0x4e>
 800a486:	085b      	lsrs	r3, r3, #1
 800a488:	f100 0001 	add.w	r0, r0, #1
 800a48c:	d003      	beq.n	800a496 <__lo0bits+0x56>
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	4770      	bx	lr
 800a492:	2000      	movs	r0, #0
 800a494:	4770      	bx	lr
 800a496:	2020      	movs	r0, #32
 800a498:	4770      	bx	lr
	...

0800a49c <__i2b>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	f7ff febb 	bl	800a21c <_Balloc>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <__i2b+0x1a>
 800a4aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4ae:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <__i2b+0x24>)
 800a4b0:	4804      	ldr	r0, [pc, #16]	; (800a4c4 <__i2b+0x28>)
 800a4b2:	f7fe fa31 	bl	8008918 <__assert_func>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	6144      	str	r4, [r0, #20]
 800a4ba:	6103      	str	r3, [r0, #16]
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800b9d9 	.word	0x0800b9d9
 800a4c4:	0800bac8 	.word	0x0800bac8

0800a4c8 <__multiply>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	4691      	mov	r9, r2
 800a4ce:	690a      	ldr	r2, [r1, #16]
 800a4d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	bfbe      	ittt	lt
 800a4da:	460b      	movlt	r3, r1
 800a4dc:	464c      	movlt	r4, r9
 800a4de:	4699      	movlt	r9, r3
 800a4e0:	6927      	ldr	r7, [r4, #16]
 800a4e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4e6:	68a3      	ldr	r3, [r4, #8]
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	eb07 060a 	add.w	r6, r7, sl
 800a4ee:	42b3      	cmp	r3, r6
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	bfb8      	it	lt
 800a4f4:	3101      	addlt	r1, #1
 800a4f6:	f7ff fe91 	bl	800a21c <_Balloc>
 800a4fa:	b930      	cbnz	r0, 800a50a <__multiply+0x42>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f240 115d 	movw	r1, #349	; 0x15d
 800a502:	4b43      	ldr	r3, [pc, #268]	; (800a610 <__multiply+0x148>)
 800a504:	4843      	ldr	r0, [pc, #268]	; (800a614 <__multiply+0x14c>)
 800a506:	f7fe fa07 	bl	8008918 <__assert_func>
 800a50a:	f100 0514 	add.w	r5, r0, #20
 800a50e:	462b      	mov	r3, r5
 800a510:	2200      	movs	r2, #0
 800a512:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a516:	4543      	cmp	r3, r8
 800a518:	d321      	bcc.n	800a55e <__multiply+0x96>
 800a51a:	f104 0314 	add.w	r3, r4, #20
 800a51e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a522:	f109 0314 	add.w	r3, r9, #20
 800a526:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a52a:	9202      	str	r2, [sp, #8]
 800a52c:	1b3a      	subs	r2, r7, r4
 800a52e:	3a15      	subs	r2, #21
 800a530:	f022 0203 	bic.w	r2, r2, #3
 800a534:	3204      	adds	r2, #4
 800a536:	f104 0115 	add.w	r1, r4, #21
 800a53a:	428f      	cmp	r7, r1
 800a53c:	bf38      	it	cc
 800a53e:	2204      	movcc	r2, #4
 800a540:	9201      	str	r2, [sp, #4]
 800a542:	9a02      	ldr	r2, [sp, #8]
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	429a      	cmp	r2, r3
 800a548:	d80c      	bhi.n	800a564 <__multiply+0x9c>
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	dd03      	ble.n	800a556 <__multiply+0x8e>
 800a54e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a552:	2b00      	cmp	r3, #0
 800a554:	d059      	beq.n	800a60a <__multiply+0x142>
 800a556:	6106      	str	r6, [r0, #16]
 800a558:	b005      	add	sp, #20
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	f843 2b04 	str.w	r2, [r3], #4
 800a562:	e7d8      	b.n	800a516 <__multiply+0x4e>
 800a564:	f8b3 a000 	ldrh.w	sl, [r3]
 800a568:	f1ba 0f00 	cmp.w	sl, #0
 800a56c:	d023      	beq.n	800a5b6 <__multiply+0xee>
 800a56e:	46a9      	mov	r9, r5
 800a570:	f04f 0c00 	mov.w	ip, #0
 800a574:	f104 0e14 	add.w	lr, r4, #20
 800a578:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a57c:	f8d9 1000 	ldr.w	r1, [r9]
 800a580:	fa1f fb82 	uxth.w	fp, r2
 800a584:	b289      	uxth	r1, r1
 800a586:	fb0a 110b 	mla	r1, sl, fp, r1
 800a58a:	4461      	add	r1, ip
 800a58c:	f8d9 c000 	ldr.w	ip, [r9]
 800a590:	0c12      	lsrs	r2, r2, #16
 800a592:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a596:	fb0a c202 	mla	r2, sl, r2, ip
 800a59a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a59e:	b289      	uxth	r1, r1
 800a5a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5a4:	4577      	cmp	r7, lr
 800a5a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5aa:	f849 1b04 	str.w	r1, [r9], #4
 800a5ae:	d8e3      	bhi.n	800a578 <__multiply+0xb0>
 800a5b0:	9a01      	ldr	r2, [sp, #4]
 800a5b2:	f845 c002 	str.w	ip, [r5, r2]
 800a5b6:	9a03      	ldr	r2, [sp, #12]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5be:	f1b9 0f00 	cmp.w	r9, #0
 800a5c2:	d020      	beq.n	800a606 <__multiply+0x13e>
 800a5c4:	46ae      	mov	lr, r5
 800a5c6:	f04f 0a00 	mov.w	sl, #0
 800a5ca:	6829      	ldr	r1, [r5, #0]
 800a5cc:	f104 0c14 	add.w	ip, r4, #20
 800a5d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5d8:	b289      	uxth	r1, r1
 800a5da:	fb09 220b 	mla	r2, r9, fp, r2
 800a5de:	4492      	add	sl, r2
 800a5e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5e4:	f84e 1b04 	str.w	r1, [lr], #4
 800a5e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5ec:	f8be 1000 	ldrh.w	r1, [lr]
 800a5f0:	0c12      	lsrs	r2, r2, #16
 800a5f2:	fb09 1102 	mla	r1, r9, r2, r1
 800a5f6:	4567      	cmp	r7, ip
 800a5f8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a600:	d8e6      	bhi.n	800a5d0 <__multiply+0x108>
 800a602:	9a01      	ldr	r2, [sp, #4]
 800a604:	50a9      	str	r1, [r5, r2]
 800a606:	3504      	adds	r5, #4
 800a608:	e79b      	b.n	800a542 <__multiply+0x7a>
 800a60a:	3e01      	subs	r6, #1
 800a60c:	e79d      	b.n	800a54a <__multiply+0x82>
 800a60e:	bf00      	nop
 800a610:	0800b9d9 	.word	0x0800b9d9
 800a614:	0800bac8 	.word	0x0800bac8

0800a618 <__pow5mult>:
 800a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	4615      	mov	r5, r2
 800a61e:	f012 0203 	ands.w	r2, r2, #3
 800a622:	4606      	mov	r6, r0
 800a624:	460f      	mov	r7, r1
 800a626:	d007      	beq.n	800a638 <__pow5mult+0x20>
 800a628:	4c25      	ldr	r4, [pc, #148]	; (800a6c0 <__pow5mult+0xa8>)
 800a62a:	3a01      	subs	r2, #1
 800a62c:	2300      	movs	r3, #0
 800a62e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a632:	f7ff fe55 	bl	800a2e0 <__multadd>
 800a636:	4607      	mov	r7, r0
 800a638:	10ad      	asrs	r5, r5, #2
 800a63a:	d03d      	beq.n	800a6b8 <__pow5mult+0xa0>
 800a63c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a63e:	b97c      	cbnz	r4, 800a660 <__pow5mult+0x48>
 800a640:	2010      	movs	r0, #16
 800a642:	f7fc fa7d 	bl	8006b40 <malloc>
 800a646:	4602      	mov	r2, r0
 800a648:	6270      	str	r0, [r6, #36]	; 0x24
 800a64a:	b928      	cbnz	r0, 800a658 <__pow5mult+0x40>
 800a64c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a650:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <__pow5mult+0xac>)
 800a652:	481d      	ldr	r0, [pc, #116]	; (800a6c8 <__pow5mult+0xb0>)
 800a654:	f7fe f960 	bl	8008918 <__assert_func>
 800a658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a65c:	6004      	str	r4, [r0, #0]
 800a65e:	60c4      	str	r4, [r0, #12]
 800a660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a668:	b94c      	cbnz	r4, 800a67e <__pow5mult+0x66>
 800a66a:	f240 2171 	movw	r1, #625	; 0x271
 800a66e:	4630      	mov	r0, r6
 800a670:	f7ff ff14 	bl	800a49c <__i2b>
 800a674:	2300      	movs	r3, #0
 800a676:	4604      	mov	r4, r0
 800a678:	f8c8 0008 	str.w	r0, [r8, #8]
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	f04f 0900 	mov.w	r9, #0
 800a682:	07eb      	lsls	r3, r5, #31
 800a684:	d50a      	bpl.n	800a69c <__pow5mult+0x84>
 800a686:	4639      	mov	r1, r7
 800a688:	4622      	mov	r2, r4
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ff1c 	bl	800a4c8 <__multiply>
 800a690:	4680      	mov	r8, r0
 800a692:	4639      	mov	r1, r7
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff fe01 	bl	800a29c <_Bfree>
 800a69a:	4647      	mov	r7, r8
 800a69c:	106d      	asrs	r5, r5, #1
 800a69e:	d00b      	beq.n	800a6b8 <__pow5mult+0xa0>
 800a6a0:	6820      	ldr	r0, [r4, #0]
 800a6a2:	b938      	cbnz	r0, 800a6b4 <__pow5mult+0x9c>
 800a6a4:	4622      	mov	r2, r4
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff ff0d 	bl	800a4c8 <__multiply>
 800a6ae:	6020      	str	r0, [r4, #0]
 800a6b0:	f8c0 9000 	str.w	r9, [r0]
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	e7e4      	b.n	800a682 <__pow5mult+0x6a>
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6be:	bf00      	nop
 800a6c0:	0800bc18 	.word	0x0800bc18
 800a6c4:	0800b814 	.word	0x0800b814
 800a6c8:	0800bac8 	.word	0x0800bac8

0800a6cc <__lshift>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	4607      	mov	r7, r0
 800a6d4:	4691      	mov	r9, r2
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	6849      	ldr	r1, [r1, #4]
 800a6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6e4:	f108 0601 	add.w	r6, r8, #1
 800a6e8:	42b3      	cmp	r3, r6
 800a6ea:	db0b      	blt.n	800a704 <__lshift+0x38>
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	f7ff fd95 	bl	800a21c <_Balloc>
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b948      	cbnz	r0, 800a70a <__lshift+0x3e>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6fc:	4b29      	ldr	r3, [pc, #164]	; (800a7a4 <__lshift+0xd8>)
 800a6fe:	482a      	ldr	r0, [pc, #168]	; (800a7a8 <__lshift+0xdc>)
 800a700:	f7fe f90a 	bl	8008918 <__assert_func>
 800a704:	3101      	adds	r1, #1
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	e7ee      	b.n	800a6e8 <__lshift+0x1c>
 800a70a:	2300      	movs	r3, #0
 800a70c:	f100 0114 	add.w	r1, r0, #20
 800a710:	f100 0210 	add.w	r2, r0, #16
 800a714:	4618      	mov	r0, r3
 800a716:	4553      	cmp	r3, sl
 800a718:	db37      	blt.n	800a78a <__lshift+0xbe>
 800a71a:	6920      	ldr	r0, [r4, #16]
 800a71c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a720:	f104 0314 	add.w	r3, r4, #20
 800a724:	f019 091f 	ands.w	r9, r9, #31
 800a728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a72c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a730:	d02f      	beq.n	800a792 <__lshift+0xc6>
 800a732:	468a      	mov	sl, r1
 800a734:	f04f 0c00 	mov.w	ip, #0
 800a738:	f1c9 0e20 	rsb	lr, r9, #32
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	fa02 f209 	lsl.w	r2, r2, r9
 800a742:	ea42 020c 	orr.w	r2, r2, ip
 800a746:	f84a 2b04 	str.w	r2, [sl], #4
 800a74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74e:	4298      	cmp	r0, r3
 800a750:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a754:	d8f2      	bhi.n	800a73c <__lshift+0x70>
 800a756:	1b03      	subs	r3, r0, r4
 800a758:	3b15      	subs	r3, #21
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	3304      	adds	r3, #4
 800a760:	f104 0215 	add.w	r2, r4, #21
 800a764:	4290      	cmp	r0, r2
 800a766:	bf38      	it	cc
 800a768:	2304      	movcc	r3, #4
 800a76a:	f841 c003 	str.w	ip, [r1, r3]
 800a76e:	f1bc 0f00 	cmp.w	ip, #0
 800a772:	d001      	beq.n	800a778 <__lshift+0xac>
 800a774:	f108 0602 	add.w	r6, r8, #2
 800a778:	3e01      	subs	r6, #1
 800a77a:	4638      	mov	r0, r7
 800a77c:	4621      	mov	r1, r4
 800a77e:	612e      	str	r6, [r5, #16]
 800a780:	f7ff fd8c 	bl	800a29c <_Bfree>
 800a784:	4628      	mov	r0, r5
 800a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a78e:	3301      	adds	r3, #1
 800a790:	e7c1      	b.n	800a716 <__lshift+0x4a>
 800a792:	3904      	subs	r1, #4
 800a794:	f853 2b04 	ldr.w	r2, [r3], #4
 800a798:	4298      	cmp	r0, r3
 800a79a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a79e:	d8f9      	bhi.n	800a794 <__lshift+0xc8>
 800a7a0:	e7ea      	b.n	800a778 <__lshift+0xac>
 800a7a2:	bf00      	nop
 800a7a4:	0800b9d9 	.word	0x0800b9d9
 800a7a8:	0800bac8 	.word	0x0800bac8

0800a7ac <__mcmp>:
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	690a      	ldr	r2, [r1, #16]
 800a7b0:	6900      	ldr	r0, [r0, #16]
 800a7b2:	b530      	push	{r4, r5, lr}
 800a7b4:	1a80      	subs	r0, r0, r2
 800a7b6:	d10d      	bne.n	800a7d4 <__mcmp+0x28>
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	3114      	adds	r1, #20
 800a7bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7cc:	4295      	cmp	r5, r2
 800a7ce:	d002      	beq.n	800a7d6 <__mcmp+0x2a>
 800a7d0:	d304      	bcc.n	800a7dc <__mcmp+0x30>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	bd30      	pop	{r4, r5, pc}
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	d3f4      	bcc.n	800a7c4 <__mcmp+0x18>
 800a7da:	e7fb      	b.n	800a7d4 <__mcmp+0x28>
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e7f8      	b.n	800a7d4 <__mcmp+0x28>
	...

0800a7e4 <__mdiff>:
 800a7e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	460d      	mov	r5, r1
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	f7ff ffdb 	bl	800a7ac <__mcmp>
 800a7f6:	1e06      	subs	r6, r0, #0
 800a7f8:	d111      	bne.n	800a81e <__mdiff+0x3a>
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff fd0d 	bl	800a21c <_Balloc>
 800a802:	4602      	mov	r2, r0
 800a804:	b928      	cbnz	r0, 800a812 <__mdiff+0x2e>
 800a806:	f240 2132 	movw	r1, #562	; 0x232
 800a80a:	4b3a      	ldr	r3, [pc, #232]	; (800a8f4 <__mdiff+0x110>)
 800a80c:	483a      	ldr	r0, [pc, #232]	; (800a8f8 <__mdiff+0x114>)
 800a80e:	f7fe f883 	bl	8008918 <__assert_func>
 800a812:	2301      	movs	r3, #1
 800a814:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a818:	4610      	mov	r0, r2
 800a81a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	bfa4      	itt	ge
 800a820:	4623      	movge	r3, r4
 800a822:	462c      	movge	r4, r5
 800a824:	4638      	mov	r0, r7
 800a826:	6861      	ldr	r1, [r4, #4]
 800a828:	bfa6      	itte	ge
 800a82a:	461d      	movge	r5, r3
 800a82c:	2600      	movge	r6, #0
 800a82e:	2601      	movlt	r6, #1
 800a830:	f7ff fcf4 	bl	800a21c <_Balloc>
 800a834:	4602      	mov	r2, r0
 800a836:	b918      	cbnz	r0, 800a840 <__mdiff+0x5c>
 800a838:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a83c:	4b2d      	ldr	r3, [pc, #180]	; (800a8f4 <__mdiff+0x110>)
 800a83e:	e7e5      	b.n	800a80c <__mdiff+0x28>
 800a840:	f102 0814 	add.w	r8, r2, #20
 800a844:	46c2      	mov	sl, r8
 800a846:	f04f 0c00 	mov.w	ip, #0
 800a84a:	6927      	ldr	r7, [r4, #16]
 800a84c:	60c6      	str	r6, [r0, #12]
 800a84e:	692e      	ldr	r6, [r5, #16]
 800a850:	f104 0014 	add.w	r0, r4, #20
 800a854:	f105 0914 	add.w	r9, r5, #20
 800a858:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a85c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a860:	3410      	adds	r4, #16
 800a862:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a866:	f859 3b04 	ldr.w	r3, [r9], #4
 800a86a:	fa1f f18b 	uxth.w	r1, fp
 800a86e:	448c      	add	ip, r1
 800a870:	b299      	uxth	r1, r3
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	ebac 0101 	sub.w	r1, ip, r1
 800a878:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a87c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a880:	b289      	uxth	r1, r1
 800a882:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a886:	454e      	cmp	r6, r9
 800a888:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a88c:	f84a 3b04 	str.w	r3, [sl], #4
 800a890:	d8e7      	bhi.n	800a862 <__mdiff+0x7e>
 800a892:	1b73      	subs	r3, r6, r5
 800a894:	3b15      	subs	r3, #21
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	3515      	adds	r5, #21
 800a89c:	3304      	adds	r3, #4
 800a89e:	42ae      	cmp	r6, r5
 800a8a0:	bf38      	it	cc
 800a8a2:	2304      	movcc	r3, #4
 800a8a4:	4418      	add	r0, r3
 800a8a6:	4443      	add	r3, r8
 800a8a8:	461e      	mov	r6, r3
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4575      	cmp	r5, lr
 800a8ae:	d30e      	bcc.n	800a8ce <__mdiff+0xea>
 800a8b0:	f10e 0103 	add.w	r1, lr, #3
 800a8b4:	1a09      	subs	r1, r1, r0
 800a8b6:	f021 0103 	bic.w	r1, r1, #3
 800a8ba:	3803      	subs	r0, #3
 800a8bc:	4586      	cmp	lr, r0
 800a8be:	bf38      	it	cc
 800a8c0:	2100      	movcc	r1, #0
 800a8c2:	4419      	add	r1, r3
 800a8c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a8c8:	b18b      	cbz	r3, 800a8ee <__mdiff+0x10a>
 800a8ca:	6117      	str	r7, [r2, #16]
 800a8cc:	e7a4      	b.n	800a818 <__mdiff+0x34>
 800a8ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8d2:	fa1f f188 	uxth.w	r1, r8
 800a8d6:	4461      	add	r1, ip
 800a8d8:	140c      	asrs	r4, r1, #16
 800a8da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8de:	b289      	uxth	r1, r1
 800a8e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a8e8:	f846 1b04 	str.w	r1, [r6], #4
 800a8ec:	e7de      	b.n	800a8ac <__mdiff+0xc8>
 800a8ee:	3f01      	subs	r7, #1
 800a8f0:	e7e8      	b.n	800a8c4 <__mdiff+0xe0>
 800a8f2:	bf00      	nop
 800a8f4:	0800b9d9 	.word	0x0800b9d9
 800a8f8:	0800bac8 	.word	0x0800bac8

0800a8fc <__ulp>:
 800a8fc:	4b11      	ldr	r3, [pc, #68]	; (800a944 <__ulp+0x48>)
 800a8fe:	400b      	ands	r3, r1
 800a900:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a904:	2b00      	cmp	r3, #0
 800a906:	dd02      	ble.n	800a90e <__ulp+0x12>
 800a908:	2000      	movs	r0, #0
 800a90a:	4619      	mov	r1, r3
 800a90c:	4770      	bx	lr
 800a90e:	425b      	negs	r3, r3
 800a910:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a914:	f04f 0000 	mov.w	r0, #0
 800a918:	f04f 0100 	mov.w	r1, #0
 800a91c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a920:	da04      	bge.n	800a92c <__ulp+0x30>
 800a922:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a926:	fa43 f102 	asr.w	r1, r3, r2
 800a92a:	4770      	bx	lr
 800a92c:	f1a2 0314 	sub.w	r3, r2, #20
 800a930:	2b1e      	cmp	r3, #30
 800a932:	bfd6      	itet	le
 800a934:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a938:	2301      	movgt	r3, #1
 800a93a:	fa22 f303 	lsrle.w	r3, r2, r3
 800a93e:	4618      	mov	r0, r3
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	7ff00000 	.word	0x7ff00000

0800a948 <__b2d>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	6907      	ldr	r7, [r0, #16]
 800a94e:	f100 0914 	add.w	r9, r0, #20
 800a952:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a956:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a95a:	f1a7 0804 	sub.w	r8, r7, #4
 800a95e:	4630      	mov	r0, r6
 800a960:	f7ff fd4e 	bl	800a400 <__hi0bits>
 800a964:	f1c0 0320 	rsb	r3, r0, #32
 800a968:	280a      	cmp	r0, #10
 800a96a:	600b      	str	r3, [r1, #0]
 800a96c:	491f      	ldr	r1, [pc, #124]	; (800a9ec <__b2d+0xa4>)
 800a96e:	dc17      	bgt.n	800a9a0 <__b2d+0x58>
 800a970:	45c1      	cmp	r9, r8
 800a972:	bf28      	it	cs
 800a974:	2200      	movcs	r2, #0
 800a976:	f1c0 0c0b 	rsb	ip, r0, #11
 800a97a:	fa26 f30c 	lsr.w	r3, r6, ip
 800a97e:	bf38      	it	cc
 800a980:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a984:	ea43 0501 	orr.w	r5, r3, r1
 800a988:	f100 0315 	add.w	r3, r0, #21
 800a98c:	fa06 f303 	lsl.w	r3, r6, r3
 800a990:	fa22 f20c 	lsr.w	r2, r2, ip
 800a994:	ea43 0402 	orr.w	r4, r3, r2
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a0:	45c1      	cmp	r9, r8
 800a9a2:	bf2e      	itee	cs
 800a9a4:	2200      	movcs	r2, #0
 800a9a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a9aa:	f1a7 0808 	subcc.w	r8, r7, #8
 800a9ae:	f1b0 030b 	subs.w	r3, r0, #11
 800a9b2:	d016      	beq.n	800a9e2 <__b2d+0x9a>
 800a9b4:	f1c3 0720 	rsb	r7, r3, #32
 800a9b8:	fa22 f107 	lsr.w	r1, r2, r7
 800a9bc:	45c8      	cmp	r8, r9
 800a9be:	fa06 f603 	lsl.w	r6, r6, r3
 800a9c2:	ea46 0601 	orr.w	r6, r6, r1
 800a9c6:	bf94      	ite	ls
 800a9c8:	2100      	movls	r1, #0
 800a9ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a9ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a9d2:	fa02 f003 	lsl.w	r0, r2, r3
 800a9d6:	40f9      	lsrs	r1, r7
 800a9d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9dc:	ea40 0401 	orr.w	r4, r0, r1
 800a9e0:	e7da      	b.n	800a998 <__b2d+0x50>
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	ea46 0501 	orr.w	r5, r6, r1
 800a9e8:	e7d6      	b.n	800a998 <__b2d+0x50>
 800a9ea:	bf00      	nop
 800a9ec:	3ff00000 	.word	0x3ff00000

0800a9f0 <__d2b>:
 800a9f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a9fa:	4690      	mov	r8, r2
 800a9fc:	461d      	mov	r5, r3
 800a9fe:	f7ff fc0d 	bl	800a21c <_Balloc>
 800aa02:	4604      	mov	r4, r0
 800aa04:	b930      	cbnz	r0, 800aa14 <__d2b+0x24>
 800aa06:	4602      	mov	r2, r0
 800aa08:	f240 310a 	movw	r1, #778	; 0x30a
 800aa0c:	4b24      	ldr	r3, [pc, #144]	; (800aaa0 <__d2b+0xb0>)
 800aa0e:	4825      	ldr	r0, [pc, #148]	; (800aaa4 <__d2b+0xb4>)
 800aa10:	f7fd ff82 	bl	8008918 <__assert_func>
 800aa14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aa1c:	bb2d      	cbnz	r5, 800aa6a <__d2b+0x7a>
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	f1b8 0300 	subs.w	r3, r8, #0
 800aa24:	d026      	beq.n	800aa74 <__d2b+0x84>
 800aa26:	4668      	mov	r0, sp
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	f7ff fd09 	bl	800a440 <__lo0bits>
 800aa2e:	9900      	ldr	r1, [sp, #0]
 800aa30:	b1f0      	cbz	r0, 800aa70 <__d2b+0x80>
 800aa32:	9a01      	ldr	r2, [sp, #4]
 800aa34:	f1c0 0320 	rsb	r3, r0, #32
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	430b      	orrs	r3, r1
 800aa3e:	40c2      	lsrs	r2, r0
 800aa40:	6163      	str	r3, [r4, #20]
 800aa42:	9201      	str	r2, [sp, #4]
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2102      	movne	r1, #2
 800aa4c:	2101      	moveq	r1, #1
 800aa4e:	61a3      	str	r3, [r4, #24]
 800aa50:	6121      	str	r1, [r4, #16]
 800aa52:	b1c5      	cbz	r5, 800aa86 <__d2b+0x96>
 800aa54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa58:	4405      	add	r5, r0
 800aa5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa5e:	603d      	str	r5, [r7, #0]
 800aa60:	6030      	str	r0, [r6, #0]
 800aa62:	4620      	mov	r0, r4
 800aa64:	b002      	add	sp, #8
 800aa66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa6e:	e7d6      	b.n	800aa1e <__d2b+0x2e>
 800aa70:	6161      	str	r1, [r4, #20]
 800aa72:	e7e7      	b.n	800aa44 <__d2b+0x54>
 800aa74:	a801      	add	r0, sp, #4
 800aa76:	f7ff fce3 	bl	800a440 <__lo0bits>
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	6121      	str	r1, [r4, #16]
 800aa80:	6163      	str	r3, [r4, #20]
 800aa82:	3020      	adds	r0, #32
 800aa84:	e7e5      	b.n	800aa52 <__d2b+0x62>
 800aa86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aa8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa8e:	6038      	str	r0, [r7, #0]
 800aa90:	6918      	ldr	r0, [r3, #16]
 800aa92:	f7ff fcb5 	bl	800a400 <__hi0bits>
 800aa96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800aa9a:	6031      	str	r1, [r6, #0]
 800aa9c:	e7e1      	b.n	800aa62 <__d2b+0x72>
 800aa9e:	bf00      	nop
 800aaa0:	0800b9d9 	.word	0x0800b9d9
 800aaa4:	0800bac8 	.word	0x0800bac8

0800aaa8 <__ratio>:
 800aaa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	4688      	mov	r8, r1
 800aaae:	4669      	mov	r1, sp
 800aab0:	4681      	mov	r9, r0
 800aab2:	f7ff ff49 	bl	800a948 <__b2d>
 800aab6:	460f      	mov	r7, r1
 800aab8:	4604      	mov	r4, r0
 800aaba:	460d      	mov	r5, r1
 800aabc:	4640      	mov	r0, r8
 800aabe:	a901      	add	r1, sp, #4
 800aac0:	f7ff ff42 	bl	800a948 <__b2d>
 800aac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aac8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aacc:	468b      	mov	fp, r1
 800aace:	eba3 0c02 	sub.w	ip, r3, r2
 800aad2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aad6:	1a9b      	subs	r3, r3, r2
 800aad8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bfd5      	itete	le
 800aae0:	460a      	movle	r2, r1
 800aae2:	462a      	movgt	r2, r5
 800aae4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aae8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aaec:	bfd8      	it	le
 800aaee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aaf2:	465b      	mov	r3, fp
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7f5 fe5d 	bl	80007b8 <__aeabi_ddiv>
 800aafe:	b003      	add	sp, #12
 800ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab04 <__copybits>:
 800ab04:	3901      	subs	r1, #1
 800ab06:	b570      	push	{r4, r5, r6, lr}
 800ab08:	1149      	asrs	r1, r1, #5
 800ab0a:	6914      	ldr	r4, [r2, #16]
 800ab0c:	3101      	adds	r1, #1
 800ab0e:	f102 0314 	add.w	r3, r2, #20
 800ab12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab1a:	1f05      	subs	r5, r0, #4
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	d30c      	bcc.n	800ab3a <__copybits+0x36>
 800ab20:	1aa3      	subs	r3, r4, r2
 800ab22:	3b11      	subs	r3, #17
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	3211      	adds	r2, #17
 800ab2a:	42a2      	cmp	r2, r4
 800ab2c:	bf88      	it	hi
 800ab2e:	2300      	movhi	r3, #0
 800ab30:	4418      	add	r0, r3
 800ab32:	2300      	movs	r3, #0
 800ab34:	4288      	cmp	r0, r1
 800ab36:	d305      	bcc.n	800ab44 <__copybits+0x40>
 800ab38:	bd70      	pop	{r4, r5, r6, pc}
 800ab3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab42:	e7eb      	b.n	800ab1c <__copybits+0x18>
 800ab44:	f840 3b04 	str.w	r3, [r0], #4
 800ab48:	e7f4      	b.n	800ab34 <__copybits+0x30>

0800ab4a <__any_on>:
 800ab4a:	f100 0214 	add.w	r2, r0, #20
 800ab4e:	6900      	ldr	r0, [r0, #16]
 800ab50:	114b      	asrs	r3, r1, #5
 800ab52:	4298      	cmp	r0, r3
 800ab54:	b510      	push	{r4, lr}
 800ab56:	db11      	blt.n	800ab7c <__any_on+0x32>
 800ab58:	dd0a      	ble.n	800ab70 <__any_on+0x26>
 800ab5a:	f011 011f 	ands.w	r1, r1, #31
 800ab5e:	d007      	beq.n	800ab70 <__any_on+0x26>
 800ab60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab64:	fa24 f001 	lsr.w	r0, r4, r1
 800ab68:	fa00 f101 	lsl.w	r1, r0, r1
 800ab6c:	428c      	cmp	r4, r1
 800ab6e:	d10b      	bne.n	800ab88 <__any_on+0x3e>
 800ab70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d803      	bhi.n	800ab80 <__any_on+0x36>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	bd10      	pop	{r4, pc}
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	e7f7      	b.n	800ab70 <__any_on+0x26>
 800ab80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d0f5      	beq.n	800ab74 <__any_on+0x2a>
 800ab88:	2001      	movs	r0, #1
 800ab8a:	e7f6      	b.n	800ab7a <__any_on+0x30>

0800ab8c <_calloc_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	fba1 5402 	umull	r5, r4, r1, r2
 800ab92:	b934      	cbnz	r4, 800aba2 <_calloc_r+0x16>
 800ab94:	4629      	mov	r1, r5
 800ab96:	f7fc f861 	bl	8006c5c <_malloc_r>
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	b928      	cbnz	r0, 800abaa <_calloc_r+0x1e>
 800ab9e:	4630      	mov	r0, r6
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
 800aba2:	220c      	movs	r2, #12
 800aba4:	2600      	movs	r6, #0
 800aba6:	6002      	str	r2, [r0, #0]
 800aba8:	e7f9      	b.n	800ab9e <_calloc_r+0x12>
 800abaa:	462a      	mov	r2, r5
 800abac:	4621      	mov	r1, r4
 800abae:	f7fb ffe5 	bl	8006b7c <memset>
 800abb2:	e7f4      	b.n	800ab9e <_calloc_r+0x12>

0800abb4 <_realloc_r>:
 800abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb8:	4680      	mov	r8, r0
 800abba:	4614      	mov	r4, r2
 800abbc:	460e      	mov	r6, r1
 800abbe:	b921      	cbnz	r1, 800abca <_realloc_r+0x16>
 800abc0:	4611      	mov	r1, r2
 800abc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	f7fc b849 	b.w	8006c5c <_malloc_r>
 800abca:	b92a      	cbnz	r2, 800abd8 <_realloc_r+0x24>
 800abcc:	f7fb ffde 	bl	8006b8c <_free_r>
 800abd0:	4625      	mov	r5, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	f000 fb36 	bl	800b248 <_malloc_usable_size_r>
 800abdc:	4284      	cmp	r4, r0
 800abde:	4607      	mov	r7, r0
 800abe0:	d802      	bhi.n	800abe8 <_realloc_r+0x34>
 800abe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abe6:	d812      	bhi.n	800ac0e <_realloc_r+0x5a>
 800abe8:	4621      	mov	r1, r4
 800abea:	4640      	mov	r0, r8
 800abec:	f7fc f836 	bl	8006c5c <_malloc_r>
 800abf0:	4605      	mov	r5, r0
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d0ed      	beq.n	800abd2 <_realloc_r+0x1e>
 800abf6:	42bc      	cmp	r4, r7
 800abf8:	4622      	mov	r2, r4
 800abfa:	4631      	mov	r1, r6
 800abfc:	bf28      	it	cs
 800abfe:	463a      	movcs	r2, r7
 800ac00:	f7fb ffae 	bl	8006b60 <memcpy>
 800ac04:	4631      	mov	r1, r6
 800ac06:	4640      	mov	r0, r8
 800ac08:	f7fb ffc0 	bl	8006b8c <_free_r>
 800ac0c:	e7e1      	b.n	800abd2 <_realloc_r+0x1e>
 800ac0e:	4635      	mov	r5, r6
 800ac10:	e7df      	b.n	800abd2 <_realloc_r+0x1e>

0800ac12 <__ssputs_r>:
 800ac12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac16:	688e      	ldr	r6, [r1, #8]
 800ac18:	4682      	mov	sl, r0
 800ac1a:	429e      	cmp	r6, r3
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	4690      	mov	r8, r2
 800ac20:	461f      	mov	r7, r3
 800ac22:	d838      	bhi.n	800ac96 <__ssputs_r+0x84>
 800ac24:	898a      	ldrh	r2, [r1, #12]
 800ac26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac2a:	d032      	beq.n	800ac92 <__ssputs_r+0x80>
 800ac2c:	6825      	ldr	r5, [r4, #0]
 800ac2e:	6909      	ldr	r1, [r1, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	eba5 0901 	sub.w	r9, r5, r1
 800ac36:	6965      	ldr	r5, [r4, #20]
 800ac38:	444b      	add	r3, r9
 800ac3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac42:	106d      	asrs	r5, r5, #1
 800ac44:	429d      	cmp	r5, r3
 800ac46:	bf38      	it	cc
 800ac48:	461d      	movcc	r5, r3
 800ac4a:	0553      	lsls	r3, r2, #21
 800ac4c:	d531      	bpl.n	800acb2 <__ssputs_r+0xa0>
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7fc f804 	bl	8006c5c <_malloc_r>
 800ac54:	4606      	mov	r6, r0
 800ac56:	b950      	cbnz	r0, 800ac6e <__ssputs_r+0x5c>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	f8ca 3000 	str.w	r3, [sl]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6e:	464a      	mov	r2, r9
 800ac70:	6921      	ldr	r1, [r4, #16]
 800ac72:	f7fb ff75 	bl	8006b60 <memcpy>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	6126      	str	r6, [r4, #16]
 800ac84:	444e      	add	r6, r9
 800ac86:	6026      	str	r6, [r4, #0]
 800ac88:	463e      	mov	r6, r7
 800ac8a:	6165      	str	r5, [r4, #20]
 800ac8c:	eba5 0509 	sub.w	r5, r5, r9
 800ac90:	60a5      	str	r5, [r4, #8]
 800ac92:	42be      	cmp	r6, r7
 800ac94:	d900      	bls.n	800ac98 <__ssputs_r+0x86>
 800ac96:	463e      	mov	r6, r7
 800ac98:	4632      	mov	r2, r6
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	f000 fab9 	bl	800b214 <memmove>
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	2000      	movs	r0, #0
 800aca6:	1b9b      	subs	r3, r3, r6
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	4433      	add	r3, r6
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	e7db      	b.n	800ac6a <__ssputs_r+0x58>
 800acb2:	462a      	mov	r2, r5
 800acb4:	f7ff ff7e 	bl	800abb4 <_realloc_r>
 800acb8:	4606      	mov	r6, r0
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1e1      	bne.n	800ac82 <__ssputs_r+0x70>
 800acbe:	4650      	mov	r0, sl
 800acc0:	6921      	ldr	r1, [r4, #16]
 800acc2:	f7fb ff63 	bl	8006b8c <_free_r>
 800acc6:	e7c7      	b.n	800ac58 <__ssputs_r+0x46>

0800acc8 <_svfiprintf_r>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	4698      	mov	r8, r3
 800acce:	898b      	ldrh	r3, [r1, #12]
 800acd0:	4607      	mov	r7, r0
 800acd2:	061b      	lsls	r3, r3, #24
 800acd4:	460d      	mov	r5, r1
 800acd6:	4614      	mov	r4, r2
 800acd8:	b09d      	sub	sp, #116	; 0x74
 800acda:	d50e      	bpl.n	800acfa <_svfiprintf_r+0x32>
 800acdc:	690b      	ldr	r3, [r1, #16]
 800acde:	b963      	cbnz	r3, 800acfa <_svfiprintf_r+0x32>
 800ace0:	2140      	movs	r1, #64	; 0x40
 800ace2:	f7fb ffbb 	bl	8006c5c <_malloc_r>
 800ace6:	6028      	str	r0, [r5, #0]
 800ace8:	6128      	str	r0, [r5, #16]
 800acea:	b920      	cbnz	r0, 800acf6 <_svfiprintf_r+0x2e>
 800acec:	230c      	movs	r3, #12
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e0d1      	b.n	800ae9a <_svfiprintf_r+0x1d2>
 800acf6:	2340      	movs	r3, #64	; 0x40
 800acf8:	616b      	str	r3, [r5, #20]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9309      	str	r3, [sp, #36]	; 0x24
 800acfe:	2320      	movs	r3, #32
 800ad00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad04:	2330      	movs	r3, #48	; 0x30
 800ad06:	f04f 0901 	mov.w	r9, #1
 800ad0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aeb4 <_svfiprintf_r+0x1ec>
 800ad12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad16:	4623      	mov	r3, r4
 800ad18:	469a      	mov	sl, r3
 800ad1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad1e:	b10a      	cbz	r2, 800ad24 <_svfiprintf_r+0x5c>
 800ad20:	2a25      	cmp	r2, #37	; 0x25
 800ad22:	d1f9      	bne.n	800ad18 <_svfiprintf_r+0x50>
 800ad24:	ebba 0b04 	subs.w	fp, sl, r4
 800ad28:	d00b      	beq.n	800ad42 <_svfiprintf_r+0x7a>
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff ff6e 	bl	800ac12 <__ssputs_r>
 800ad36:	3001      	adds	r0, #1
 800ad38:	f000 80aa 	beq.w	800ae90 <_svfiprintf_r+0x1c8>
 800ad3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad3e:	445a      	add	r2, fp
 800ad40:	9209      	str	r2, [sp, #36]	; 0x24
 800ad42:	f89a 3000 	ldrb.w	r3, [sl]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 80a2 	beq.w	800ae90 <_svfiprintf_r+0x1c8>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad56:	f10a 0a01 	add.w	sl, sl, #1
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	9307      	str	r3, [sp, #28]
 800ad5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad62:	931a      	str	r3, [sp, #104]	; 0x68
 800ad64:	4654      	mov	r4, sl
 800ad66:	2205      	movs	r2, #5
 800ad68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6c:	4851      	ldr	r0, [pc, #324]	; (800aeb4 <_svfiprintf_r+0x1ec>)
 800ad6e:	f7ff fa3b 	bl	800a1e8 <memchr>
 800ad72:	9a04      	ldr	r2, [sp, #16]
 800ad74:	b9d8      	cbnz	r0, 800adae <_svfiprintf_r+0xe6>
 800ad76:	06d0      	lsls	r0, r2, #27
 800ad78:	bf44      	itt	mi
 800ad7a:	2320      	movmi	r3, #32
 800ad7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad80:	0711      	lsls	r1, r2, #28
 800ad82:	bf44      	itt	mi
 800ad84:	232b      	movmi	r3, #43	; 0x2b
 800ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad90:	d015      	beq.n	800adbe <_svfiprintf_r+0xf6>
 800ad92:	4654      	mov	r4, sl
 800ad94:	2000      	movs	r0, #0
 800ad96:	f04f 0c0a 	mov.w	ip, #10
 800ad9a:	9a07      	ldr	r2, [sp, #28]
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ada2:	3b30      	subs	r3, #48	; 0x30
 800ada4:	2b09      	cmp	r3, #9
 800ada6:	d94e      	bls.n	800ae46 <_svfiprintf_r+0x17e>
 800ada8:	b1b0      	cbz	r0, 800add8 <_svfiprintf_r+0x110>
 800adaa:	9207      	str	r2, [sp, #28]
 800adac:	e014      	b.n	800add8 <_svfiprintf_r+0x110>
 800adae:	eba0 0308 	sub.w	r3, r0, r8
 800adb2:	fa09 f303 	lsl.w	r3, r9, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	46a2      	mov	sl, r4
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	e7d2      	b.n	800ad64 <_svfiprintf_r+0x9c>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	1d19      	adds	r1, r3, #4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	9103      	str	r1, [sp, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbb      	ittet	lt
 800adca:	425b      	neglt	r3, r3
 800adcc:	f042 0202 	orrlt.w	r2, r2, #2
 800add0:	9307      	strge	r3, [sp, #28]
 800add2:	9307      	strlt	r3, [sp, #28]
 800add4:	bfb8      	it	lt
 800add6:	9204      	strlt	r2, [sp, #16]
 800add8:	7823      	ldrb	r3, [r4, #0]
 800adda:	2b2e      	cmp	r3, #46	; 0x2e
 800addc:	d10c      	bne.n	800adf8 <_svfiprintf_r+0x130>
 800adde:	7863      	ldrb	r3, [r4, #1]
 800ade0:	2b2a      	cmp	r3, #42	; 0x2a
 800ade2:	d135      	bne.n	800ae50 <_svfiprintf_r+0x188>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	3402      	adds	r4, #2
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	9203      	str	r2, [sp, #12]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800adf6:	9305      	str	r3, [sp, #20]
 800adf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aeb8 <_svfiprintf_r+0x1f0>
 800adfc:	2203      	movs	r2, #3
 800adfe:	4650      	mov	r0, sl
 800ae00:	7821      	ldrb	r1, [r4, #0]
 800ae02:	f7ff f9f1 	bl	800a1e8 <memchr>
 800ae06:	b140      	cbz	r0, 800ae1a <_svfiprintf_r+0x152>
 800ae08:	2340      	movs	r3, #64	; 0x40
 800ae0a:	eba0 000a 	sub.w	r0, r0, sl
 800ae0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	3401      	adds	r4, #1
 800ae16:	4303      	orrs	r3, r0
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1e:	2206      	movs	r2, #6
 800ae20:	4826      	ldr	r0, [pc, #152]	; (800aebc <_svfiprintf_r+0x1f4>)
 800ae22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae26:	f7ff f9df 	bl	800a1e8 <memchr>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d038      	beq.n	800aea0 <_svfiprintf_r+0x1d8>
 800ae2e:	4b24      	ldr	r3, [pc, #144]	; (800aec0 <_svfiprintf_r+0x1f8>)
 800ae30:	bb1b      	cbnz	r3, 800ae7a <_svfiprintf_r+0x1b2>
 800ae32:	9b03      	ldr	r3, [sp, #12]
 800ae34:	3307      	adds	r3, #7
 800ae36:	f023 0307 	bic.w	r3, r3, #7
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	9303      	str	r3, [sp, #12]
 800ae3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae40:	4433      	add	r3, r6
 800ae42:	9309      	str	r3, [sp, #36]	; 0x24
 800ae44:	e767      	b.n	800ad16 <_svfiprintf_r+0x4e>
 800ae46:	460c      	mov	r4, r1
 800ae48:	2001      	movs	r0, #1
 800ae4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae4e:	e7a5      	b.n	800ad9c <_svfiprintf_r+0xd4>
 800ae50:	2300      	movs	r3, #0
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4619      	mov	r1, r3
 800ae58:	3401      	adds	r4, #1
 800ae5a:	9305      	str	r3, [sp, #20]
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae62:	3a30      	subs	r2, #48	; 0x30
 800ae64:	2a09      	cmp	r2, #9
 800ae66:	d903      	bls.n	800ae70 <_svfiprintf_r+0x1a8>
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0c5      	beq.n	800adf8 <_svfiprintf_r+0x130>
 800ae6c:	9105      	str	r1, [sp, #20]
 800ae6e:	e7c3      	b.n	800adf8 <_svfiprintf_r+0x130>
 800ae70:	4604      	mov	r4, r0
 800ae72:	2301      	movs	r3, #1
 800ae74:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae78:	e7f0      	b.n	800ae5c <_svfiprintf_r+0x194>
 800ae7a:	ab03      	add	r3, sp, #12
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4638      	mov	r0, r7
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <_svfiprintf_r+0x1fc>)
 800ae84:	a904      	add	r1, sp, #16
 800ae86:	f7fb fffb 	bl	8006e80 <_printf_float>
 800ae8a:	1c42      	adds	r2, r0, #1
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	d1d6      	bne.n	800ae3e <_svfiprintf_r+0x176>
 800ae90:	89ab      	ldrh	r3, [r5, #12]
 800ae92:	065b      	lsls	r3, r3, #25
 800ae94:	f53f af2c 	bmi.w	800acf0 <_svfiprintf_r+0x28>
 800ae98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae9a:	b01d      	add	sp, #116	; 0x74
 800ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea0:	ab03      	add	r3, sp, #12
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	462a      	mov	r2, r5
 800aea6:	4638      	mov	r0, r7
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <_svfiprintf_r+0x1fc>)
 800aeaa:	a904      	add	r1, sp, #16
 800aeac:	f7fc fa84 	bl	80073b8 <_printf_i>
 800aeb0:	e7eb      	b.n	800ae8a <_svfiprintf_r+0x1c2>
 800aeb2:	bf00      	nop
 800aeb4:	0800bc24 	.word	0x0800bc24
 800aeb8:	0800bc2a 	.word	0x0800bc2a
 800aebc:	0800bc2e 	.word	0x0800bc2e
 800aec0:	08006e81 	.word	0x08006e81
 800aec4:	0800ac13 	.word	0x0800ac13

0800aec8 <__sfputc_r>:
 800aec8:	6893      	ldr	r3, [r2, #8]
 800aeca:	b410      	push	{r4}
 800aecc:	3b01      	subs	r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	6093      	str	r3, [r2, #8]
 800aed2:	da07      	bge.n	800aee4 <__sfputc_r+0x1c>
 800aed4:	6994      	ldr	r4, [r2, #24]
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	db01      	blt.n	800aede <__sfputc_r+0x16>
 800aeda:	290a      	cmp	r1, #10
 800aedc:	d102      	bne.n	800aee4 <__sfputc_r+0x1c>
 800aede:	bc10      	pop	{r4}
 800aee0:	f7fd bc48 	b.w	8008774 <__swbuf_r>
 800aee4:	6813      	ldr	r3, [r2, #0]
 800aee6:	1c58      	adds	r0, r3, #1
 800aee8:	6010      	str	r0, [r2, #0]
 800aeea:	7019      	strb	r1, [r3, #0]
 800aeec:	4608      	mov	r0, r1
 800aeee:	bc10      	pop	{r4}
 800aef0:	4770      	bx	lr

0800aef2 <__sfputs_r>:
 800aef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef4:	4606      	mov	r6, r0
 800aef6:	460f      	mov	r7, r1
 800aef8:	4614      	mov	r4, r2
 800aefa:	18d5      	adds	r5, r2, r3
 800aefc:	42ac      	cmp	r4, r5
 800aefe:	d101      	bne.n	800af04 <__sfputs_r+0x12>
 800af00:	2000      	movs	r0, #0
 800af02:	e007      	b.n	800af14 <__sfputs_r+0x22>
 800af04:	463a      	mov	r2, r7
 800af06:	4630      	mov	r0, r6
 800af08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0c:	f7ff ffdc 	bl	800aec8 <__sfputc_r>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d1f3      	bne.n	800aefc <__sfputs_r+0xa>
 800af14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af18 <_vfiprintf_r>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	460d      	mov	r5, r1
 800af1e:	4614      	mov	r4, r2
 800af20:	4698      	mov	r8, r3
 800af22:	4606      	mov	r6, r0
 800af24:	b09d      	sub	sp, #116	; 0x74
 800af26:	b118      	cbz	r0, 800af30 <_vfiprintf_r+0x18>
 800af28:	6983      	ldr	r3, [r0, #24]
 800af2a:	b90b      	cbnz	r3, 800af30 <_vfiprintf_r+0x18>
 800af2c:	f7fe fcb4 	bl	8009898 <__sinit>
 800af30:	4b89      	ldr	r3, [pc, #548]	; (800b158 <_vfiprintf_r+0x240>)
 800af32:	429d      	cmp	r5, r3
 800af34:	d11b      	bne.n	800af6e <_vfiprintf_r+0x56>
 800af36:	6875      	ldr	r5, [r6, #4]
 800af38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af3a:	07d9      	lsls	r1, r3, #31
 800af3c:	d405      	bmi.n	800af4a <_vfiprintf_r+0x32>
 800af3e:	89ab      	ldrh	r3, [r5, #12]
 800af40:	059a      	lsls	r2, r3, #22
 800af42:	d402      	bmi.n	800af4a <_vfiprintf_r+0x32>
 800af44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af46:	f7ff f8c2 	bl	800a0ce <__retarget_lock_acquire_recursive>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	071b      	lsls	r3, r3, #28
 800af4e:	d501      	bpl.n	800af54 <_vfiprintf_r+0x3c>
 800af50:	692b      	ldr	r3, [r5, #16]
 800af52:	b9eb      	cbnz	r3, 800af90 <_vfiprintf_r+0x78>
 800af54:	4629      	mov	r1, r5
 800af56:	4630      	mov	r0, r6
 800af58:	f7fd fc70 	bl	800883c <__swsetup_r>
 800af5c:	b1c0      	cbz	r0, 800af90 <_vfiprintf_r+0x78>
 800af5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af60:	07dc      	lsls	r4, r3, #31
 800af62:	d50e      	bpl.n	800af82 <_vfiprintf_r+0x6a>
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	b01d      	add	sp, #116	; 0x74
 800af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6e:	4b7b      	ldr	r3, [pc, #492]	; (800b15c <_vfiprintf_r+0x244>)
 800af70:	429d      	cmp	r5, r3
 800af72:	d101      	bne.n	800af78 <_vfiprintf_r+0x60>
 800af74:	68b5      	ldr	r5, [r6, #8]
 800af76:	e7df      	b.n	800af38 <_vfiprintf_r+0x20>
 800af78:	4b79      	ldr	r3, [pc, #484]	; (800b160 <_vfiprintf_r+0x248>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	bf08      	it	eq
 800af7e:	68f5      	ldreq	r5, [r6, #12]
 800af80:	e7da      	b.n	800af38 <_vfiprintf_r+0x20>
 800af82:	89ab      	ldrh	r3, [r5, #12]
 800af84:	0598      	lsls	r0, r3, #22
 800af86:	d4ed      	bmi.n	800af64 <_vfiprintf_r+0x4c>
 800af88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8a:	f7ff f8a1 	bl	800a0d0 <__retarget_lock_release_recursive>
 800af8e:	e7e9      	b.n	800af64 <_vfiprintf_r+0x4c>
 800af90:	2300      	movs	r3, #0
 800af92:	9309      	str	r3, [sp, #36]	; 0x24
 800af94:	2320      	movs	r3, #32
 800af96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af9a:	2330      	movs	r3, #48	; 0x30
 800af9c:	f04f 0901 	mov.w	r9, #1
 800afa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b164 <_vfiprintf_r+0x24c>
 800afa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afac:	4623      	mov	r3, r4
 800afae:	469a      	mov	sl, r3
 800afb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb4:	b10a      	cbz	r2, 800afba <_vfiprintf_r+0xa2>
 800afb6:	2a25      	cmp	r2, #37	; 0x25
 800afb8:	d1f9      	bne.n	800afae <_vfiprintf_r+0x96>
 800afba:	ebba 0b04 	subs.w	fp, sl, r4
 800afbe:	d00b      	beq.n	800afd8 <_vfiprintf_r+0xc0>
 800afc0:	465b      	mov	r3, fp
 800afc2:	4622      	mov	r2, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7ff ff93 	bl	800aef2 <__sfputs_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	f000 80aa 	beq.w	800b126 <_vfiprintf_r+0x20e>
 800afd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd4:	445a      	add	r2, fp
 800afd6:	9209      	str	r2, [sp, #36]	; 0x24
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 80a2 	beq.w	800b126 <_vfiprintf_r+0x20e>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295
 800afe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afec:	f10a 0a01 	add.w	sl, sl, #1
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	9307      	str	r3, [sp, #28]
 800aff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aff8:	931a      	str	r3, [sp, #104]	; 0x68
 800affa:	4654      	mov	r4, sl
 800affc:	2205      	movs	r2, #5
 800affe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b002:	4858      	ldr	r0, [pc, #352]	; (800b164 <_vfiprintf_r+0x24c>)
 800b004:	f7ff f8f0 	bl	800a1e8 <memchr>
 800b008:	9a04      	ldr	r2, [sp, #16]
 800b00a:	b9d8      	cbnz	r0, 800b044 <_vfiprintf_r+0x12c>
 800b00c:	06d1      	lsls	r1, r2, #27
 800b00e:	bf44      	itt	mi
 800b010:	2320      	movmi	r3, #32
 800b012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b016:	0713      	lsls	r3, r2, #28
 800b018:	bf44      	itt	mi
 800b01a:	232b      	movmi	r3, #43	; 0x2b
 800b01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b2a      	cmp	r3, #42	; 0x2a
 800b026:	d015      	beq.n	800b054 <_vfiprintf_r+0x13c>
 800b028:	4654      	mov	r4, sl
 800b02a:	2000      	movs	r0, #0
 800b02c:	f04f 0c0a 	mov.w	ip, #10
 800b030:	9a07      	ldr	r2, [sp, #28]
 800b032:	4621      	mov	r1, r4
 800b034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b038:	3b30      	subs	r3, #48	; 0x30
 800b03a:	2b09      	cmp	r3, #9
 800b03c:	d94e      	bls.n	800b0dc <_vfiprintf_r+0x1c4>
 800b03e:	b1b0      	cbz	r0, 800b06e <_vfiprintf_r+0x156>
 800b040:	9207      	str	r2, [sp, #28]
 800b042:	e014      	b.n	800b06e <_vfiprintf_r+0x156>
 800b044:	eba0 0308 	sub.w	r3, r0, r8
 800b048:	fa09 f303 	lsl.w	r3, r9, r3
 800b04c:	4313      	orrs	r3, r2
 800b04e:	46a2      	mov	sl, r4
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	e7d2      	b.n	800affa <_vfiprintf_r+0xe2>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	1d19      	adds	r1, r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bfbb      	ittet	lt
 800b060:	425b      	neglt	r3, r3
 800b062:	f042 0202 	orrlt.w	r2, r2, #2
 800b066:	9307      	strge	r3, [sp, #28]
 800b068:	9307      	strlt	r3, [sp, #28]
 800b06a:	bfb8      	it	lt
 800b06c:	9204      	strlt	r2, [sp, #16]
 800b06e:	7823      	ldrb	r3, [r4, #0]
 800b070:	2b2e      	cmp	r3, #46	; 0x2e
 800b072:	d10c      	bne.n	800b08e <_vfiprintf_r+0x176>
 800b074:	7863      	ldrb	r3, [r4, #1]
 800b076:	2b2a      	cmp	r3, #42	; 0x2a
 800b078:	d135      	bne.n	800b0e6 <_vfiprintf_r+0x1ce>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3402      	adds	r4, #2
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	9203      	str	r2, [sp, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	bfb8      	it	lt
 800b088:	f04f 33ff 	movlt.w	r3, #4294967295
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b168 <_vfiprintf_r+0x250>
 800b092:	2203      	movs	r2, #3
 800b094:	4650      	mov	r0, sl
 800b096:	7821      	ldrb	r1, [r4, #0]
 800b098:	f7ff f8a6 	bl	800a1e8 <memchr>
 800b09c:	b140      	cbz	r0, 800b0b0 <_vfiprintf_r+0x198>
 800b09e:	2340      	movs	r3, #64	; 0x40
 800b0a0:	eba0 000a 	sub.w	r0, r0, sl
 800b0a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	3401      	adds	r4, #1
 800b0ac:	4303      	orrs	r3, r0
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b4:	2206      	movs	r2, #6
 800b0b6:	482d      	ldr	r0, [pc, #180]	; (800b16c <_vfiprintf_r+0x254>)
 800b0b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0bc:	f7ff f894 	bl	800a1e8 <memchr>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d03f      	beq.n	800b144 <_vfiprintf_r+0x22c>
 800b0c4:	4b2a      	ldr	r3, [pc, #168]	; (800b170 <_vfiprintf_r+0x258>)
 800b0c6:	bb1b      	cbnz	r3, 800b110 <_vfiprintf_r+0x1f8>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	3307      	adds	r3, #7
 800b0cc:	f023 0307 	bic.w	r3, r3, #7
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d6:	443b      	add	r3, r7
 800b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0da:	e767      	b.n	800afac <_vfiprintf_r+0x94>
 800b0dc:	460c      	mov	r4, r1
 800b0de:	2001      	movs	r0, #1
 800b0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0e4:	e7a5      	b.n	800b032 <_vfiprintf_r+0x11a>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f04f 0c0a 	mov.w	ip, #10
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	3401      	adds	r4, #1
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f8:	3a30      	subs	r2, #48	; 0x30
 800b0fa:	2a09      	cmp	r2, #9
 800b0fc:	d903      	bls.n	800b106 <_vfiprintf_r+0x1ee>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0c5      	beq.n	800b08e <_vfiprintf_r+0x176>
 800b102:	9105      	str	r1, [sp, #20]
 800b104:	e7c3      	b.n	800b08e <_vfiprintf_r+0x176>
 800b106:	4604      	mov	r4, r0
 800b108:	2301      	movs	r3, #1
 800b10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b10e:	e7f0      	b.n	800b0f2 <_vfiprintf_r+0x1da>
 800b110:	ab03      	add	r3, sp, #12
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	462a      	mov	r2, r5
 800b116:	4630      	mov	r0, r6
 800b118:	4b16      	ldr	r3, [pc, #88]	; (800b174 <_vfiprintf_r+0x25c>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	f7fb feb0 	bl	8006e80 <_printf_float>
 800b120:	4607      	mov	r7, r0
 800b122:	1c78      	adds	r0, r7, #1
 800b124:	d1d6      	bne.n	800b0d4 <_vfiprintf_r+0x1bc>
 800b126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b128:	07d9      	lsls	r1, r3, #31
 800b12a:	d405      	bmi.n	800b138 <_vfiprintf_r+0x220>
 800b12c:	89ab      	ldrh	r3, [r5, #12]
 800b12e:	059a      	lsls	r2, r3, #22
 800b130:	d402      	bmi.n	800b138 <_vfiprintf_r+0x220>
 800b132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b134:	f7fe ffcc 	bl	800a0d0 <__retarget_lock_release_recursive>
 800b138:	89ab      	ldrh	r3, [r5, #12]
 800b13a:	065b      	lsls	r3, r3, #25
 800b13c:	f53f af12 	bmi.w	800af64 <_vfiprintf_r+0x4c>
 800b140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b142:	e711      	b.n	800af68 <_vfiprintf_r+0x50>
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	462a      	mov	r2, r5
 800b14a:	4630      	mov	r0, r6
 800b14c:	4b09      	ldr	r3, [pc, #36]	; (800b174 <_vfiprintf_r+0x25c>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	f7fc f932 	bl	80073b8 <_printf_i>
 800b154:	e7e4      	b.n	800b120 <_vfiprintf_r+0x208>
 800b156:	bf00      	nop
 800b158:	0800ba0c 	.word	0x0800ba0c
 800b15c:	0800ba2c 	.word	0x0800ba2c
 800b160:	0800b9ec 	.word	0x0800b9ec
 800b164:	0800bc24 	.word	0x0800bc24
 800b168:	0800bc2a 	.word	0x0800bc2a
 800b16c:	0800bc2e 	.word	0x0800bc2e
 800b170:	08006e81 	.word	0x08006e81
 800b174:	0800aef3 	.word	0x0800aef3

0800b178 <_read_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	2200      	movs	r2, #0
 800b182:	4d05      	ldr	r5, [pc, #20]	; (800b198 <_read_r+0x20>)
 800b184:	602a      	str	r2, [r5, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	f7f8 ff05 	bl	8003f96 <_read>
 800b18c:	1c43      	adds	r3, r0, #1
 800b18e:	d102      	bne.n	800b196 <_read_r+0x1e>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	b103      	cbz	r3, 800b196 <_read_r+0x1e>
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	200007a4 	.word	0x200007a4

0800b19c <nan>:
 800b19c:	2000      	movs	r0, #0
 800b19e:	4901      	ldr	r1, [pc, #4]	; (800b1a4 <nan+0x8>)
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	7ff80000 	.word	0x7ff80000

0800b1a8 <__ascii_wctomb>:
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	b141      	cbz	r1, 800b1c0 <__ascii_wctomb+0x18>
 800b1ae:	2aff      	cmp	r2, #255	; 0xff
 800b1b0:	d904      	bls.n	800b1bc <__ascii_wctomb+0x14>
 800b1b2:	228a      	movs	r2, #138	; 0x8a
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	4770      	bx	lr
 800b1bc:	2001      	movs	r0, #1
 800b1be:	700a      	strb	r2, [r1, #0]
 800b1c0:	4770      	bx	lr

0800b1c2 <abort>:
 800b1c2:	2006      	movs	r0, #6
 800b1c4:	b508      	push	{r3, lr}
 800b1c6:	f000 f86f 	bl	800b2a8 <raise>
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	f7f8 fed9 	bl	8003f82 <_exit>

0800b1d0 <_fstat_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4d06      	ldr	r5, [pc, #24]	; (800b1f0 <_fstat_r+0x20>)
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4608      	mov	r0, r1
 800b1da:	4611      	mov	r1, r2
 800b1dc:	602b      	str	r3, [r5, #0]
 800b1de:	f7f8 ff1e 	bl	800401e <_fstat>
 800b1e2:	1c43      	adds	r3, r0, #1
 800b1e4:	d102      	bne.n	800b1ec <_fstat_r+0x1c>
 800b1e6:	682b      	ldr	r3, [r5, #0]
 800b1e8:	b103      	cbz	r3, 800b1ec <_fstat_r+0x1c>
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	bd38      	pop	{r3, r4, r5, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200007a4 	.word	0x200007a4

0800b1f4 <_isatty_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	4d05      	ldr	r5, [pc, #20]	; (800b210 <_isatty_r+0x1c>)
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	f7f8 ff1c 	bl	800403c <_isatty>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_isatty_r+0x1a>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_isatty_r+0x1a>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	200007a4 	.word	0x200007a4

0800b214 <memmove>:
 800b214:	4288      	cmp	r0, r1
 800b216:	b510      	push	{r4, lr}
 800b218:	eb01 0402 	add.w	r4, r1, r2
 800b21c:	d902      	bls.n	800b224 <memmove+0x10>
 800b21e:	4284      	cmp	r4, r0
 800b220:	4623      	mov	r3, r4
 800b222:	d807      	bhi.n	800b234 <memmove+0x20>
 800b224:	1e43      	subs	r3, r0, #1
 800b226:	42a1      	cmp	r1, r4
 800b228:	d008      	beq.n	800b23c <memmove+0x28>
 800b22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b22e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b232:	e7f8      	b.n	800b226 <memmove+0x12>
 800b234:	4601      	mov	r1, r0
 800b236:	4402      	add	r2, r0
 800b238:	428a      	cmp	r2, r1
 800b23a:	d100      	bne.n	800b23e <memmove+0x2a>
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b246:	e7f7      	b.n	800b238 <memmove+0x24>

0800b248 <_malloc_usable_size_r>:
 800b248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b24c:	1f18      	subs	r0, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfbc      	itt	lt
 800b252:	580b      	ldrlt	r3, [r1, r0]
 800b254:	18c0      	addlt	r0, r0, r3
 800b256:	4770      	bx	lr

0800b258 <_raise_r>:
 800b258:	291f      	cmp	r1, #31
 800b25a:	b538      	push	{r3, r4, r5, lr}
 800b25c:	4604      	mov	r4, r0
 800b25e:	460d      	mov	r5, r1
 800b260:	d904      	bls.n	800b26c <_raise_r+0x14>
 800b262:	2316      	movs	r3, #22
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	f04f 30ff 	mov.w	r0, #4294967295
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b26e:	b112      	cbz	r2, 800b276 <_raise_r+0x1e>
 800b270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b274:	b94b      	cbnz	r3, 800b28a <_raise_r+0x32>
 800b276:	4620      	mov	r0, r4
 800b278:	f000 f830 	bl	800b2dc <_getpid_r>
 800b27c:	462a      	mov	r2, r5
 800b27e:	4601      	mov	r1, r0
 800b280:	4620      	mov	r0, r4
 800b282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b286:	f000 b817 	b.w	800b2b8 <_kill_r>
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d00a      	beq.n	800b2a4 <_raise_r+0x4c>
 800b28e:	1c59      	adds	r1, r3, #1
 800b290:	d103      	bne.n	800b29a <_raise_r+0x42>
 800b292:	2316      	movs	r3, #22
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	2001      	movs	r0, #1
 800b298:	e7e7      	b.n	800b26a <_raise_r+0x12>
 800b29a:	2400      	movs	r4, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2a2:	4798      	blx	r3
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e7e0      	b.n	800b26a <_raise_r+0x12>

0800b2a8 <raise>:
 800b2a8:	4b02      	ldr	r3, [pc, #8]	; (800b2b4 <raise+0xc>)
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	f7ff bfd3 	b.w	800b258 <_raise_r>
 800b2b2:	bf00      	nop
 800b2b4:	20000034 	.word	0x20000034

0800b2b8 <_kill_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4d06      	ldr	r5, [pc, #24]	; (800b2d8 <_kill_r+0x20>)
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	f7f8 fe4c 	bl	8003f62 <_kill>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d102      	bne.n	800b2d4 <_kill_r+0x1c>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	b103      	cbz	r3, 800b2d4 <_kill_r+0x1c>
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	bd38      	pop	{r3, r4, r5, pc}
 800b2d6:	bf00      	nop
 800b2d8:	200007a4 	.word	0x200007a4

0800b2dc <_getpid_r>:
 800b2dc:	f7f8 be3a 	b.w	8003f54 <_getpid>

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
